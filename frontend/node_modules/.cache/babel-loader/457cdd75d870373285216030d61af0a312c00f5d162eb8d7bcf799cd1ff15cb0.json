{"ast":null,"code":"export default {\n  name: 'FlightSearch',\n  data() {\n    return {\n      airports: [],\n      airlines: [],\n      flights: [],\n      searchParams: {\n        departure: '',\n        arrival: '',\n        date: new Date().toISOString().split('T')[0],\n        airline: ''\n      },\n      isSearching: false,\n      hasSearched: false,\n      minDate: new Date().toISOString().split('T')[0]\n    };\n  },\n  async created() {\n    await this.fetchAirports();\n    await this.fetchAirlines();\n  },\n  methods: {\n    // 獲取機場資料\n    async fetchAirports() {\n      try {\n        // 模擬API回應\n        this.airports = [{\n          airport_id: 'TPE',\n          airport_name_zh: '桃園國際機場',\n          airport_name_en: 'Taiwan Taoyuan International Airport',\n          city_zh: '台北',\n          country: 'Taiwan'\n        }, {\n          airport_id: 'TSA',\n          airport_name_zh: '台北松山機場',\n          airport_name_en: 'Taipei Songshan Airport',\n          city_zh: '台北',\n          country: 'Taiwan'\n        }, {\n          airport_id: 'KHH',\n          airport_name_zh: '高雄國際機場',\n          airport_name_en: 'Kaohsiung International Airport',\n          city_zh: '高雄',\n          country: 'Taiwan'\n        }, {\n          airport_id: 'HKG',\n          airport_name_zh: '香港國際機場',\n          airport_name_en: 'Hong Kong International Airport',\n          city_zh: '香港',\n          country: 'Hong Kong'\n        }, {\n          airport_id: 'NRT',\n          airport_name_zh: '成田國際機場',\n          airport_name_en: 'Narita International Airport',\n          city_zh: '東京',\n          country: 'Japan'\n        }, {\n          airport_id: 'KIX',\n          airport_name_zh: '關西國際機場',\n          airport_name_en: 'Kansai International Airport',\n          city_zh: '大阪',\n          country: 'Japan'\n        }, {\n          airport_id: 'ICN',\n          airport_name_zh: '仁川國際機場',\n          airport_name_en: 'Incheon International Airport',\n          city_zh: '首爾',\n          country: 'South Korea'\n        }, {\n          airport_id: 'BKK',\n          airport_name_zh: '曼谷素萬那普機場',\n          airport_name_en: 'Suvarnabhumi Airport',\n          city_zh: '曼谷',\n          country: 'Thailand'\n        }, {\n          airport_id: 'SIN',\n          airport_name_zh: '新加坡樟宜機場',\n          airport_name_en: 'Singapore Changi Airport',\n          city_zh: '新加坡',\n          country: 'Singapore'\n        }, {\n          airport_id: 'KNH',\n          airport_name_zh: '金門尚義機場',\n          airport_name_en: 'Kinmen Airport',\n          city_zh: '金門',\n          country: 'Taiwan'\n        }, {\n          airport_id: 'MZG',\n          airport_name_zh: '馬公機場',\n          airport_name_en: 'Magong Airport',\n          city_zh: '澎湖',\n          country: 'Taiwan'\n        }, {\n          airport_id: 'TTT',\n          airport_name_zh: '台東機場',\n          airport_name_en: 'Taitung Airport',\n          city_zh: '台東',\n          country: 'Taiwan'\n        }, {\n          airport_id: 'KYD',\n          airport_name_zh: '蘭嶼機場',\n          airport_name_en: 'Lanyu Airport',\n          city_zh: '蘭嶼',\n          country: 'Taiwan'\n        }];\n      } catch (error) {\n        console.error('獲取機場資料失敗:', error);\n      }\n    },\n    // 獲取航空公司資料\n    async fetchAirlines() {\n      try {\n        // 模擬API回應\n        this.airlines = [{\n          airline_id: 'CI',\n          airline_name_zh: '中華航空',\n          airline_name_en: 'China Airlines',\n          logo_url: 'https://upload.wikimedia.org/wikipedia/zh/a/aa/China_Airlines_Logo.svg'\n        }, {\n          airline_id: 'BR',\n          airline_name_zh: '長榮航空',\n          airline_name_en: 'EVA Air',\n          logo_url: 'https://upload.wikimedia.org/wikipedia/zh/9/9c/EVA_Air_Logo.svg'\n        }, {\n          airline_id: 'AE',\n          airline_name_zh: '華信航空',\n          airline_name_en: 'Mandarin Airlines',\n          logo_url: 'https://upload.wikimedia.org/wikipedia/commons/2/2c/Mandarin_Airlines_logo_since_2005.svg'\n        }, {\n          airline_id: 'B7',\n          airline_name_zh: '立榮航空',\n          airline_name_en: 'UNI Airways',\n          logo_url: 'https://upload.wikimedia.org/wikipedia/commons/1/18/Uni_Airways_Logo.svg'\n        }, {\n          airline_id: 'DA',\n          airline_name_zh: '德安航空',\n          airline_name_en: 'Daily Air',\n          logo_url: 'https://www.dailyair.com.tw/wedassets/image/logo-1.png'\n        }, {\n          airline_id: 'CX',\n          airline_name_zh: '國泰航空',\n          airline_name_en: 'Cathay Pacific',\n          logo_url: 'https://upload.wikimedia.org/wikipedia/zh/0/00/Cathay_Pacific_Logo.svg'\n        }, {\n          airline_id: 'JL',\n          airline_name_zh: '日本航空',\n          airline_name_en: 'Japan Airlines',\n          logo_url: 'https://upload.wikimedia.org/wikipedia/zh/a/a3/Japan_Airlines_Logo_%282011%29.svg'\n        }, {\n          airline_id: 'KE',\n          airline_name_zh: '大韓航空',\n          airline_name_en: 'Korean Air',\n          logo_url: 'https://upload.wikimedia.org/wikipedia/zh/e/e4/Korean_Air_Logo.svg'\n        }, {\n          airline_id: 'TG',\n          airline_name_zh: '泰國航空',\n          airline_name_en: 'Thai Airways',\n          logo_url: 'https://upload.wikimedia.org/wikipedia/zh/b/b3/THAI_Logo.svg'\n        }];\n      } catch (error) {\n        console.error('獲取航空公司資料失敗:', error);\n      }\n    },\n    // 搜尋航班\n    async searchFlights() {\n      if (!this.searchParams.departure || !this.searchParams.arrival || !this.searchParams.date) {\n        alert('請填寫出發機場、抵達機場和日期');\n        return;\n      }\n      this.isSearching = true;\n      this.hasSearched = true;\n      try {\n        // 模擬API請求\n        await new Promise(resolve => setTimeout(resolve, 1500));\n\n        // 模擬響應數據\n        const departureDate = new Date(this.searchParams.date);\n\n        // 創建模擬航班數據\n        this.flights = this.generateMockFlights(this.searchParams.departure, this.searchParams.arrival, departureDate, this.searchParams.airline);\n      } catch (error) {\n        console.error('搜尋航班失敗:', error);\n        this.flights = [];\n      } finally {\n        this.isSearching = false;\n      }\n    },\n    // 產生模擬航班數據\n    generateMockFlights(departure, arrival, date, airline = '') {\n      const flights = [];\n      const airlines = airline ? [airline] : ['CI', 'BR', 'AE', 'B7', 'DA'];\n      const randomAirlines = airline ? [airline] : airlines.sort(() => 0.5 - Math.random()).slice(0, Math.floor(Math.random() * 3) + 1);\n      for (const airlineId of randomAirlines) {\n        const flightCount = Math.floor(Math.random() * 3) + 1;\n        for (let i = 0; i < flightCount; i++) {\n          const flightNumber = `${airlineId}${Math.floor(Math.random() * 1000) + 100}`;\n          const departureHour = 6 + Math.floor(Math.random() * 14);\n          const departureMin = Math.floor(Math.random() * 60);\n          const scheduledDeparture = new Date(date);\n          scheduledDeparture.setHours(departureHour, departureMin, 0);\n          const durationMin = 30 + Math.floor(Math.random() * 120);\n          const scheduledArrival = new Date(scheduledDeparture.getTime() + durationMin * 60000);\n          const statuses = ['on_time', 'on_time', 'on_time', 'on_time', 'delayed', 'cancelled'];\n          const status = statuses[Math.floor(Math.random() * statuses.length)];\n          const aircraft = ['A321', 'B737', 'A320', 'ATR72', 'DHC-6'];\n          const price = Math.floor(Math.random() * 5000) + 2000;\n          flights.push({\n            flight_number: flightNumber,\n            airline_id: airlineId,\n            departure_airport_code: departure,\n            arrival_airport_code: arrival,\n            scheduled_departure: scheduledDeparture,\n            scheduled_arrival: scheduledArrival,\n            flight_status: status,\n            aircraft_type: aircraft[Math.floor(Math.random() * aircraft.length)],\n            price: Math.random() > 0.3 ? price : null,\n            booking_link: Math.random() > 0.5 ? '#' : null\n          });\n        }\n      }\n      return flights.sort((a, b) => a.scheduled_departure - b.scheduled_departure);\n    },\n    // 獲取航空公司名稱\n    getAirlineName(airlineId) {\n      const airline = this.airlines.find(a => a.airline_id === airlineId);\n      return airline ? airline.airline_name_zh : airlineId;\n    },\n    // 獲取航空公司標誌\n    getAirlineLogo(airlineId) {\n      const airline = this.airlines.find(a => a.airline_id === airlineId);\n      return airline ? airline.logo_url : null;\n    },\n    // 獲取機場代碼\n    getAirportCode(airportId) {\n      return airportId;\n    },\n    // 獲取機場名稱\n    getAirportName(airportId) {\n      const airport = this.airports.find(a => a.airport_id === airportId);\n      return airport ? airport.airport_name_zh : airportId;\n    },\n    // 格式化時間\n    formatTime(date) {\n      const d = new Date(date);\n      return `${d.getHours().toString().padStart(2, '0')}:${d.getMinutes().toString().padStart(2, '0')}`;\n    },\n    // 計算飛行時間\n    calculateDuration(departure, arrival) {\n      const dep = new Date(departure);\n      const arr = new Date(arrival);\n      const diffMs = arr - dep;\n      const diffMins = Math.floor(diffMs / 60000);\n      const hours = Math.floor(diffMins / 60);\n      const mins = diffMins % 60;\n      return `${hours}時${mins}分`;\n    },\n    // 獲取航班狀態文字\n    getStatusText(status) {\n      const statusMap = {\n        'on_time': '準時',\n        'delayed': '延誤',\n        'cancelled': '取消',\n        'departed': '已起飛',\n        'arrived': '已抵達'\n      };\n      return statusMap[status] || status;\n    },\n    // 獲取航班狀態樣式\n    getStatusClass(status) {\n      const classMap = {\n        'on_time': 'status-on-time',\n        'delayed': 'status-delayed',\n        'cancelled': 'status-cancelled',\n        'departed': 'status-departed',\n        'arrived': 'status-arrived'\n      };\n      return classMap[status] || '';\n    }\n  }\n};","map":{"version":3,"names":["name","data","airports","airlines","flights","searchParams","departure","arrival","date","Date","toISOString","split","airline","isSearching","hasSearched","minDate","created","fetchAirports","fetchAirlines","methods","airport_id","airport_name_zh","airport_name_en","city_zh","country","error","console","airline_id","airline_name_zh","airline_name_en","logo_url","searchFlights","alert","Promise","resolve","setTimeout","departureDate","generateMockFlights","randomAirlines","sort","Math","random","slice","floor","airlineId","flightCount","i","flightNumber","departureHour","departureMin","scheduledDeparture","setHours","durationMin","scheduledArrival","getTime","statuses","status","length","aircraft","price","push","flight_number","departure_airport_code","arrival_airport_code","scheduled_departure","scheduled_arrival","flight_status","aircraft_type","booking_link","a","b","getAirlineName","find","getAirlineLogo","getAirportCode","airportId","getAirportName","airport","formatTime","d","getHours","toString","padStart","getMinutes","calculateDuration","dep","arr","diffMs","diffMins","hours","mins","getStatusText","statusMap","getStatusClass","classMap"],"sources":["C:\\Users\\Aliothouo\\OneDrive\\文件\\學校\\AlphaVision\\AerotwineX\\frontend\\src\\components\\FlightSearch.vue"],"sourcesContent":["<!-- 航班查詢組件 -->\n<template>\n  <div class=\"flight-search-container\">\n    <div class=\"flight-search-header\">\n      <h1>航班查詢</h1>\n      <p>尋找您所需的航班資訊</p>\n    </div>\n\n    <div class=\"search-form\">\n      <!-- 查詢表單 -->\n      <div class=\"form-group\">\n        <label for=\"departure\">出發機場</label>\n        <div class=\"select-wrapper\">\n          <select id=\"departure\" v-model=\"searchParams.departure\" class=\"form-control\">\n            <option value=\"\">選擇出發機場</option>\n            <option v-for=\"airport in airports\" :key=\"airport.airport_id\" :value=\"airport.airport_id\">\n              {{ airport.airport_name_zh }} ({{ airport.airport_id }})\n            </option>\n          </select>\n        </div>\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"arrival\">抵達機場</label>\n        <div class=\"select-wrapper\">\n          <select id=\"arrival\" v-model=\"searchParams.arrival\" class=\"form-control\">\n            <option value=\"\">選擇抵達機場</option>\n            <option v-for=\"airport in airports\" :key=\"airport.airport_id\" :value=\"airport.airport_id\">\n              {{ airport.airport_name_zh }} ({{ airport.airport_id }})\n            </option>\n          </select>\n        </div>\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"date\">日期</label>\n        <input \n          type=\"date\" \n          id=\"date\" \n          v-model=\"searchParams.date\" \n          class=\"form-control\"\n          :min=\"minDate\"\n        >\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"airline\">航空公司</label>\n        <div class=\"select-wrapper\">\n          <select id=\"airline\" v-model=\"searchParams.airline\" class=\"form-control\">\n            <option value=\"\">所有航空公司</option>\n            <option v-for=\"airline in airlines\" :key=\"airline.airline_id\" :value=\"airline.airline_id\">\n              {{ airline.airline_name_zh }}\n            </option>\n          </select>\n        </div>\n      </div>\n\n      <div class=\"form-group search-button-container\">\n        <button class=\"search-button\" @click=\"searchFlights\" :disabled=\"isSearching\">\n          <span v-if=\"isSearching\">搜尋中...</span>\n          <span v-else>搜尋航班</span>\n        </button>\n      </div>\n    </div>\n\n    <!-- 搜尋結果 -->\n    <div class=\"search-results\" v-show=\"hasSearched\">\n      <div v-if=\"isSearching\" class=\"loading-container\">\n        <div class=\"loading-spinner\"></div>\n        <p>正在搜尋航班，請稍候...</p>\n      </div>\n      \n      <div v-else-if=\"flights.length === 0\" class=\"no-results\">\n        <p>沒有找到符合條件的航班，請嘗試其他搜尋條件。</p>\n      </div>\n      \n      <div v-else class=\"results-info\">\n        <h2>搜尋結果</h2>\n        <p>共找到 {{ flights.length }} 個航班</p>\n        \n        <div class=\"flight-cards\">\n          <div v-for=\"(flight, index) in flights\" :key=\"index\" class=\"flight-card\">\n            <div class=\"flight-card-header\">\n              <div class=\"airline-info\">\n                <span class=\"airline-logo\" v-if=\"getAirlineLogo(flight.airline_id)\">\n                  <img :src=\"getAirlineLogo(flight.airline_id)\" :alt=\"getAirlineName(flight.airline_id)\">\n                </span>\n                <span class=\"airline-name\">{{ getAirlineName(flight.airline_id) }}</span>\n              </div>\n              <div class=\"flight-number\">{{ flight.flight_number }}</div>\n            </div>\n            \n            <div class=\"flight-card-body\">\n              <div class=\"flight-route\">\n                <div class=\"departure\">\n                  <h3>{{ getAirportCode(flight.departure_airport_code) }}</h3>\n                  <p>{{ formatTime(flight.scheduled_departure) }}</p>\n                  <p class=\"airport-name\">{{ getAirportName(flight.departure_airport_code) }}</p>\n                </div>\n                \n                <div class=\"flight-duration\">\n                  <div class=\"flight-line\">\n                    <div class=\"dot\"></div>\n                    <div class=\"line\"></div>\n                    <div class=\"dot\"></div>\n                  </div>\n                  <p>{{ calculateDuration(flight.scheduled_departure, flight.scheduled_arrival) }}</p>\n                </div>\n                \n                <div class=\"arrival\">\n                  <h3>{{ getAirportCode(flight.arrival_airport_code) }}</h3>\n                  <p>{{ formatTime(flight.scheduled_arrival) }}</p>\n                  <p class=\"airport-name\">{{ getAirportName(flight.arrival_airport_code) }}</p>\n                </div>\n              </div>\n              \n              <div class=\"flight-status\" :class=\"getStatusClass(flight.flight_status)\">\n                {{ getStatusText(flight.flight_status) }}\n              </div>\n            </div>\n            \n            <div class=\"flight-card-footer\">\n              <div class=\"flight-details\">\n                <p v-if=\"flight.aircraft_type\">機型: {{ flight.aircraft_type }}</p>\n                <p v-if=\"flight.price\">票價: NT$ {{ flight.price }}</p>\n              </div>\n              <a v-if=\"flight.booking_link\" :href=\"flight.booking_link\" target=\"_blank\" class=\"booking-link\">\n                訂票\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'FlightSearch',\n  data() {\n    return {\n      airports: [],\n      airlines: [],\n      flights: [],\n      searchParams: {\n        departure: '',\n        arrival: '',\n        date: new Date().toISOString().split('T')[0],\n        airline: ''\n      },\n      isSearching: false,\n      hasSearched: false,\n      minDate: new Date().toISOString().split('T')[0]\n    }\n  },\n  async created() {\n    await this.fetchAirports();\n    await this.fetchAirlines();\n  },\n  methods: {\n    // 獲取機場資料\n    async fetchAirports() {\n      try {\n        // 模擬API回應\n        this.airports = [\n          { airport_id: 'TPE', airport_name_zh: '桃園國際機場', airport_name_en: 'Taiwan Taoyuan International Airport', city_zh: '台北', country: 'Taiwan' },\n          { airport_id: 'TSA', airport_name_zh: '台北松山機場', airport_name_en: 'Taipei Songshan Airport', city_zh: '台北', country: 'Taiwan' },\n          { airport_id: 'KHH', airport_name_zh: '高雄國際機場', airport_name_en: 'Kaohsiung International Airport', city_zh: '高雄', country: 'Taiwan' },\n          { airport_id: 'HKG', airport_name_zh: '香港國際機場', airport_name_en: 'Hong Kong International Airport', city_zh: '香港', country: 'Hong Kong' },\n          { airport_id: 'NRT', airport_name_zh: '成田國際機場', airport_name_en: 'Narita International Airport', city_zh: '東京', country: 'Japan' },\n          { airport_id: 'KIX', airport_name_zh: '關西國際機場', airport_name_en: 'Kansai International Airport', city_zh: '大阪', country: 'Japan' },\n          { airport_id: 'ICN', airport_name_zh: '仁川國際機場', airport_name_en: 'Incheon International Airport', city_zh: '首爾', country: 'South Korea' },\n          { airport_id: 'BKK', airport_name_zh: '曼谷素萬那普機場', airport_name_en: 'Suvarnabhumi Airport', city_zh: '曼谷', country: 'Thailand' },\n          { airport_id: 'SIN', airport_name_zh: '新加坡樟宜機場', airport_name_en: 'Singapore Changi Airport', city_zh: '新加坡', country: 'Singapore' },\n          { airport_id: 'KNH', airport_name_zh: '金門尚義機場', airport_name_en: 'Kinmen Airport', city_zh: '金門', country: 'Taiwan' },\n          { airport_id: 'MZG', airport_name_zh: '馬公機場', airport_name_en: 'Magong Airport', city_zh: '澎湖', country: 'Taiwan' },\n          { airport_id: 'TTT', airport_name_zh: '台東機場', airport_name_en: 'Taitung Airport', city_zh: '台東', country: 'Taiwan' },\n          { airport_id: 'KYD', airport_name_zh: '蘭嶼機場', airport_name_en: 'Lanyu Airport', city_zh: '蘭嶼', country: 'Taiwan' }\n        ];\n      } catch (error) {\n        console.error('獲取機場資料失敗:', error);\n      }\n    },\n    \n    // 獲取航空公司資料\n    async fetchAirlines() {\n      try {\n        // 模擬API回應\n        this.airlines = [\n          { airline_id: 'CI', airline_name_zh: '中華航空', airline_name_en: 'China Airlines', logo_url: 'https://upload.wikimedia.org/wikipedia/zh/a/aa/China_Airlines_Logo.svg' },\n          { airline_id: 'BR', airline_name_zh: '長榮航空', airline_name_en: 'EVA Air', logo_url: 'https://upload.wikimedia.org/wikipedia/zh/9/9c/EVA_Air_Logo.svg' },\n          { airline_id: 'AE', airline_name_zh: '華信航空', airline_name_en: 'Mandarin Airlines', logo_url: 'https://upload.wikimedia.org/wikipedia/commons/2/2c/Mandarin_Airlines_logo_since_2005.svg' },\n          { airline_id: 'B7', airline_name_zh: '立榮航空', airline_name_en: 'UNI Airways', logo_url: 'https://upload.wikimedia.org/wikipedia/commons/1/18/Uni_Airways_Logo.svg' },\n          { airline_id: 'DA', airline_name_zh: '德安航空', airline_name_en: 'Daily Air', logo_url: 'https://www.dailyair.com.tw/wedassets/image/logo-1.png' },\n          { airline_id: 'CX', airline_name_zh: '國泰航空', airline_name_en: 'Cathay Pacific', logo_url: 'https://upload.wikimedia.org/wikipedia/zh/0/00/Cathay_Pacific_Logo.svg' },\n          { airline_id: 'JL', airline_name_zh: '日本航空', airline_name_en: 'Japan Airlines', logo_url: 'https://upload.wikimedia.org/wikipedia/zh/a/a3/Japan_Airlines_Logo_%282011%29.svg' },\n          { airline_id: 'KE', airline_name_zh: '大韓航空', airline_name_en: 'Korean Air', logo_url: 'https://upload.wikimedia.org/wikipedia/zh/e/e4/Korean_Air_Logo.svg' },\n          { airline_id: 'TG', airline_name_zh: '泰國航空', airline_name_en: 'Thai Airways', logo_url: 'https://upload.wikimedia.org/wikipedia/zh/b/b3/THAI_Logo.svg' }\n        ];\n      } catch (error) {\n        console.error('獲取航空公司資料失敗:', error);\n      }\n    },\n    \n    // 搜尋航班\n    async searchFlights() {\n      if (!this.searchParams.departure || !this.searchParams.arrival || !this.searchParams.date) {\n        alert('請填寫出發機場、抵達機場和日期');\n        return;\n      }\n      \n      this.isSearching = true;\n      this.hasSearched = true;\n      \n      try {\n        // 模擬API請求\n        await new Promise(resolve => setTimeout(resolve, 1500));\n        \n        // 模擬響應數據\n        const departureDate = new Date(this.searchParams.date);\n        \n        // 創建模擬航班數據\n        this.flights = this.generateMockFlights(\n          this.searchParams.departure,\n          this.searchParams.arrival,\n          departureDate,\n          this.searchParams.airline\n        );\n      } catch (error) {\n        console.error('搜尋航班失敗:', error);\n        this.flights = [];\n      } finally {\n        this.isSearching = false;\n      }\n    },\n    \n    // 產生模擬航班數據\n    generateMockFlights(departure, arrival, date, airline = '') {\n      const flights = [];\n      const airlines = airline ? [airline] : ['CI', 'BR', 'AE', 'B7', 'DA'];\n      const randomAirlines = airline ? [airline] : airlines.sort(() => 0.5 - Math.random()).slice(0, Math.floor(Math.random() * 3) + 1);\n      \n      for (const airlineId of randomAirlines) {\n        const flightCount = Math.floor(Math.random() * 3) + 1;\n        \n        for (let i = 0; i < flightCount; i++) {\n          const flightNumber = `${airlineId}${Math.floor(Math.random() * 1000) + 100}`;\n          const departureHour = 6 + Math.floor(Math.random() * 14);\n          const departureMin = Math.floor(Math.random() * 60);\n          \n          const scheduledDeparture = new Date(date);\n          scheduledDeparture.setHours(departureHour, departureMin, 0);\n          \n          const durationMin = 30 + Math.floor(Math.random() * 120);\n          const scheduledArrival = new Date(scheduledDeparture.getTime() + durationMin * 60000);\n          \n          const statuses = ['on_time', 'on_time', 'on_time', 'on_time', 'delayed', 'cancelled'];\n          const status = statuses[Math.floor(Math.random() * statuses.length)];\n          \n          const aircraft = ['A321', 'B737', 'A320', 'ATR72', 'DHC-6'];\n          const price = Math.floor(Math.random() * 5000) + 2000;\n          \n          flights.push({\n            flight_number: flightNumber,\n            airline_id: airlineId,\n            departure_airport_code: departure,\n            arrival_airport_code: arrival,\n            scheduled_departure: scheduledDeparture,\n            scheduled_arrival: scheduledArrival,\n            flight_status: status,\n            aircraft_type: aircraft[Math.floor(Math.random() * aircraft.length)],\n            price: Math.random() > 0.3 ? price : null,\n            booking_link: Math.random() > 0.5 ? '#' : null\n          });\n        }\n      }\n      \n      return flights.sort((a, b) => a.scheduled_departure - b.scheduled_departure);\n    },\n    \n    // 獲取航空公司名稱\n    getAirlineName(airlineId) {\n      const airline = this.airlines.find(a => a.airline_id === airlineId);\n      return airline ? airline.airline_name_zh : airlineId;\n    },\n    \n    // 獲取航空公司標誌\n    getAirlineLogo(airlineId) {\n      const airline = this.airlines.find(a => a.airline_id === airlineId);\n      return airline ? airline.logo_url : null;\n    },\n    \n    // 獲取機場代碼\n    getAirportCode(airportId) {\n      return airportId;\n    },\n    \n    // 獲取機場名稱\n    getAirportName(airportId) {\n      const airport = this.airports.find(a => a.airport_id === airportId);\n      return airport ? airport.airport_name_zh : airportId;\n    },\n    \n    // 格式化時間\n    formatTime(date) {\n      const d = new Date(date);\n      return `${d.getHours().toString().padStart(2, '0')}:${d.getMinutes().toString().padStart(2, '0')}`;\n    },\n    \n    // 計算飛行時間\n    calculateDuration(departure, arrival) {\n      const dep = new Date(departure);\n      const arr = new Date(arrival);\n      const diffMs = arr - dep;\n      const diffMins = Math.floor(diffMs / 60000);\n      const hours = Math.floor(diffMins / 60);\n      const mins = diffMins % 60;\n      return `${hours}時${mins}分`;\n    },\n    \n    // 獲取航班狀態文字\n    getStatusText(status) {\n      const statusMap = {\n        'on_time': '準時',\n        'delayed': '延誤',\n        'cancelled': '取消',\n        'departed': '已起飛',\n        'arrived': '已抵達'\n      };\n      return statusMap[status] || status;\n    },\n    \n    // 獲取航班狀態樣式\n    getStatusClass(status) {\n      const classMap = {\n        'on_time': 'status-on-time',\n        'delayed': 'status-delayed',\n        'cancelled': 'status-cancelled',\n        'departed': 'status-departed',\n        'arrived': 'status-arrived'\n      };\n      return classMap[status] || '';\n    }\n  }\n}\n</script>\n\n<style scoped>\n/* 主容器樣式 */\n.flight-search-container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 2rem;\n  font-family: 'Noto Sans TC', sans-serif;\n  color: #333;\n}\n\n/* 頁頭樣式 */\n.flight-search-header {\n  margin-bottom: 2rem;\n  text-align: center;\n}\n\n.flight-search-header h1 {\n  font-size: 2.5rem;\n  font-weight: 700;\n  margin-bottom: 0.5rem;\n  color: #000;\n}\n\n.flight-search-header p {\n  font-size: 1.2rem;\n  color: #666;\n}\n\n/* 表單樣式 */\n.search-form {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1.5rem;\n  background-color: #fff;\n  padding: 2rem;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n  margin-bottom: 2rem;\n}\n\n.form-group {\n  flex: 1 1 200px;\n}\n\n.form-group label {\n  display: block;\n  margin-bottom: 0.5rem;\n  font-weight: 600;\n  color: #333;\n}\n\n.form-control {\n  width: 100%;\n  padding: 0.75rem 1rem;\n  font-size: 1rem;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  background-color: #f8f8f8;\n  transition: border-color 0.3s, box-shadow 0.3s;\n}\n\n.form-control:focus {\n  border-color: #000;\n  outline: none;\n  box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1);\n}\n\n.select-wrapper {\n  position: relative;\n}\n\n.select-wrapper:after {\n  content: '▼';\n  font-size: 0.8rem;\n  position: absolute;\n  right: 1rem;\n  top: 50%;\n  transform: translateY(-50%);\n  pointer-events: none;\n  color: #666;\n}\n\n.search-button-container {\n  display: flex;\n  align-items: flex-end;\n}\n\n.search-button {\n  width: 100%;\n  padding: 0.85rem 1.5rem;\n  background-color: #000;\n  color: #fff;\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  font-weight: 600;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n.search-button:hover {\n  background-color: #333;\n}\n\n.search-button:disabled {\n  background-color: #ccc;\n  cursor: not-allowed;\n}\n\n/* 搜尋結果樣式 */\n.search-results {\n  background-color: #fff;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n  padding: 2rem;\n}\n\n.results-info {\n  margin-bottom: 1.5rem;\n}\n\n.results-info h2 {\n  font-size: 1.8rem;\n  font-weight: 700;\n  margin-bottom: 0.5rem;\n  color: #000;\n}\n\n.results-info p {\n  color: #666;\n  margin-bottom: 1.5rem;\n}\n\n/* 載入中樣式 */\n.loading-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 3rem 0;\n}\n\n.loading-spinner {\n  width: 40px;\n  height: 40px;\n  border: 3px solid rgba(0, 0, 0, 0.1);\n  border-radius: 50%;\n  border-top-color: #000;\n  animation: spin 1s ease-in-out infinite;\n  margin-bottom: 1rem;\n}\n\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n/* 無結果樣式 */\n.no-results {\n  text-align: center;\n  padding: 3rem 0;\n}\n\n.no-results p {\n  color: #666;\n  font-size: 1.1rem;\n}\n\n/* 航班卡片樣式 */\n.flight-cards {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.flight-card {\n  background-color: #f8f8f8;\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);\n}\n\n.flight-card-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem;\n  background-color: #000;\n  color: #fff;\n}\n\n.airline-info {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.airline-logo {\n  width: 30px;\n  height: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #fff;\n  border-radius: 50%;\n  padding: 3px;\n}\n\n.airline-logo img {\n  max-width: 100%;\n  max-height: 100%;\n}\n\n.airline-name {\n  font-weight: 600;\n}\n\n.flight-number {\n  font-size: 0.9rem;\n  font-weight: 600;\n  color: #ccc;\n}\n\n.flight-card-body {\n  padding: 1.5rem;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  align-items: center;\n  gap: 1rem;\n}\n\n.flight-route {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  flex: 1;\n  min-width: 300px;\n}\n\n.departure, .arrival {\n  flex: 1;\n}\n\n.departure h3, .arrival h3 {\n  font-size: 1.5rem;\n  font-weight: 700;\n  margin: 0;\n  color: #000;\n}\n\n.departure p, .arrival p {\n  margin: 0.2rem 0;\n  color: #666;\n}\n\n.airport-name {\n  font-size: 0.85rem;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 150px;\n}\n\n.flight-duration {\n  flex: 1;\n  text-align: center;\n  color: #666;\n  font-size: 0.9rem;\n  padding: 0 1rem;\n}\n\n.flight-line {\n  display: flex;\n  align-items: center;\n  margin-bottom: 0.5rem;\n}\n\n.dot {\n  width: 8px;\n  height: 8px;\n  background-color: #000;\n  border-radius: 50%;\n}\n\n.line {\n  flex: 1;\n  height: 2px;\n  background-color: #000;\n  margin: 0 4px;\n}\n\n.flight-status {\n  padding: 0.35rem 0.75rem;\n  border-radius: 4px;\n  font-size: 0.9rem;\n  font-weight: 600;\n  text-align: center;\n}\n\n.status-on-time {\n  background-color: #e6f7e6;\n  color: #2e7d32;\n}\n\n.status-delayed {\n  background-color: #fff3e0;\n  color: #e65100;\n}\n\n.status-cancelled {\n  background-color: #ffebee;\n  color: #c62828;\n}\n\n.status-departed {\n  background-color: #e3f2fd;\n  color: #1565c0;\n}\n\n.status-arrived {\n  background-color: #f3e5f5;\n  color: #6a1b9a;\n}\n\n.flight-card-footer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem;\n  border-top: 1px solid #eee;\n  background-color: #fff;\n}\n\n.flight-details {\n  color: #666;\n  font-size: 0.9rem;\n}\n\n.flight-details p {\n  margin: 0.2rem 0;\n}\n\n.booking-link {\n  display: inline-block;\n  padding: 0.5rem 1.5rem;\n  background-color: #000;\n  color: #fff;\n  text-decoration: none;\n  border-radius: 4px;\n  font-weight: 600;\n  font-size: 0.9rem;\n  transition: background-color 0.3s;\n}\n\n.booking-link:hover {\n  background-color: #333;\n}\n\n/* 響應式設計 */\n@media (max-width: 768px) {\n  .flight-search-container {\n    padding: 1rem;\n  }\n  \n  .search-form {\n    padding: 1.5rem;\n  }\n  \n  .flight-card-body {\n    flex-direction: column;\n    align-items: stretch;\n  }\n  \n  .flight-route {\n    margin-bottom: 1rem;\n  }\n  \n  .flight-card-footer {\n    flex-direction: column;\n    gap: 1rem;\n  }\n  \n  .booking-link {\n    width: 100%;\n    text-align: center;\n  }\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}