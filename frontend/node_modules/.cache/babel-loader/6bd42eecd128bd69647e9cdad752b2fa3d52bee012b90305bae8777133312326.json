{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelText as _vModelText, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"flight-search\"\n};\nconst _hoisted_2 = {\n  class: \"search-container\"\n};\nconst _hoisted_3 = {\n  class: \"search-form\"\n};\nconst _hoisted_4 = {\n  class: \"form-group\"\n};\nconst _hoisted_5 = [\"value\"];\nconst _hoisted_6 = {\n  class: \"form-group\"\n};\nconst _hoisted_7 = [\"disabled\"];\nconst _hoisted_8 = [\"value\"];\nconst _hoisted_9 = {\n  class: \"form-group\"\n};\nconst _hoisted_10 = [\"min\", \"max\"];\nconst _hoisted_11 = {\n  class: \"form-group\"\n};\nconst _hoisted_12 = [\"value\"];\nconst _hoisted_13 = {\n  class: \"action-buttons\"\n};\nconst _hoisted_14 = [\"disabled\"];\nconst _hoisted_15 = {\n  key: 0,\n  class: \"error-message\"\n};\nconst _hoisted_16 = {\n  key: 0,\n  class: \"search-results\"\n};\nconst _hoisted_17 = {\n  key: 0,\n  class: \"loading\"\n};\nconst _hoisted_18 = {\n  key: 1\n};\nconst _hoisted_19 = {\n  class: \"results-header\"\n};\nconst _hoisted_20 = {\n  key: 0\n};\nconst _hoisted_21 = {\n  key: 1\n};\nconst _hoisted_22 = {\n  key: 0,\n  class: \"flights-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_flight_card = _resolveComponent(\"flight-card\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[16] || (_cache[16] = _createElementVNode(\"div\", {\n    class: \"header\"\n  }, [_createElementVNode(\"h1\", null, \"AerotwineX 航班查詢\"), _createElementVNode(\"p\", null, \"簡單、快速地查詢您的航班\")], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_cache[8] || (_cache[8] = _createElementVNode(\"label\", null, \"出發地\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.departureAirport = $event),\n    onChange: _cache[1] || (_cache[1] = (...args) => $options.filterDestinations && $options.filterDestinations(...args))\n  }, [_cache[7] || (_cache[7] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"請選擇出發機場\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.taiwanAirports, airport => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: airport.code,\n      value: airport.code\n    }, _toDisplayString(airport.city) + \" - \" + _toDisplayString(airport.name) + \" (\" + _toDisplayString(airport.code) + \") \", 9 /* TEXT, PROPS */, _hoisted_5);\n  }), 128 /* KEYED_FRAGMENT */))], 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, $data.departureAirport]])]), _createElementVNode(\"div\", _hoisted_6, [_cache[10] || (_cache[10] = _createElementVNode(\"label\", null, \"目的地機場\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.destinationAirport = $event),\n    disabled: !$data.departureAirport || !$data.directFlightDestinations.length\n  }, [_cache[9] || (_cache[9] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"請選擇目的地機場\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.directFlightDestinations, airport => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: airport.code,\n      value: airport.code\n    }, _toDisplayString(airport.city) + \" - \" + _toDisplayString(airport.name) + \" (\" + _toDisplayString(airport.code) + \") \", 9 /* TEXT, PROPS */, _hoisted_8);\n  }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_7), [[_vModelSelect, $data.destinationAirport]])]), _createElementVNode(\"div\", _hoisted_9, [_cache[11] || (_cache[11] = _createElementVNode(\"label\", null, \"日期\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.flightDate = $event),\n    min: $options.minDate,\n    max: $options.maxDate\n  }, null, 8 /* PROPS */, _hoisted_10), [[_vModelText, $data.flightDate]])]), _createElementVNode(\"div\", _hoisted_11, [_cache[13] || (_cache[13] = _createElementVNode(\"label\", null, \"航空公司\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.selectedAirline = $event)\n  }, [_cache[12] || (_cache[12] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"所有航空公司\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.airlines, airline => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: airline.id,\n      value: airline.id\n    }, _toDisplayString(airline.name), 9 /* TEXT, PROPS */, _hoisted_12);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $data.selectedAirline]])]), _createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"button\", {\n    class: \"search-button\",\n    onClick: _cache[5] || (_cache[5] = (...args) => $options.searchFlights && $options.searchFlights(...args)),\n    disabled: !$options.canSearch\n  }, \" 搜尋航班 \", 8 /* PROPS */, _hoisted_14), _createElementVNode(\"button\", {\n    class: \"reset-button\",\n    onClick: _cache[6] || (_cache[6] = (...args) => $options.resetForm && $options.resetForm(...args))\n  }, \" 重設 \")]), $data.errorMessage ? (_openBlock(), _createElementBlock(\"div\", _hoisted_15, _toDisplayString($data.errorMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)])]), $data.searchComplete ? (_openBlock(), _createElementBlock(\"div\", _hoisted_16, [$data.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_17, _cache[14] || (_cache[14] = [_createElementVNode(\"div\", {\n    class: \"loader\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"搜尋中，請稍候...\", -1 /* HOISTED */)]))) : (_openBlock(), _createElementBlock(\"div\", _hoisted_18, [_createElementVNode(\"div\", _hoisted_19, [_cache[15] || (_cache[15] = _createElementVNode(\"h2\", null, \"搜尋結果\", -1 /* HOISTED */)), $data.flights.length === 0 ? (_openBlock(), _createElementBlock(\"p\", _hoisted_20, \"沒有找到符合條件的航班\")) : (_openBlock(), _createElementBlock(\"p\", _hoisted_21, \"找到 \" + _toDisplayString($data.flights.length) + \" 個符合條件的航班\", 1 /* TEXT */))]), $data.flights.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_22, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.flights, flight => {\n    return _openBlock(), _createBlock(_component_flight_card, {\n      key: `${flight.flight_number}-${flight.scheduled_departure}`,\n      flight: flight,\n      departureAirportName: $options.getAirportName(flight.departure_airport_code),\n      arrivalAirportName: $options.getAirportName(flight.arrival_airport_code),\n      airlineName: $options.getAirlineName(flight.airline_id)\n    }, null, 8 /* PROPS */, [\"flight\", \"departureAirportName\", \"arrivalAirportName\", \"airlineName\"]);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)]))])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_cache","$event","$data","departureAirport","onChange","args","$options","filterDestinations","value","_Fragment","_renderList","taiwanAirports","airport","code","city","_toDisplayString","name","_hoisted_5","_hoisted_6","destinationAirport","disabled","directFlightDestinations","length","_hoisted_8","_hoisted_7","_hoisted_9","type","flightDate","min","minDate","max","maxDate","_hoisted_10","_hoisted_11","selectedAirline","airlines","airline","id","_hoisted_12","_hoisted_13","onClick","searchFlights","canSearch","_hoisted_14","resetForm","errorMessage","_hoisted_15","_createCommentVNode","searchComplete","_hoisted_16","isLoading","_hoisted_17","_hoisted_18","_hoisted_19","flights","_hoisted_20","_hoisted_21","_hoisted_22","flight","_createBlock","_component_flight_card","flight_number","scheduled_departure","departureAirportName","getAirportName","departure_airport_code","arrivalAirportName","arrival_airport_code","airlineName","getAirlineName","airline_id"],"sources":["C:\\Users\\Aliothouo\\OneDrive\\文件\\學校\\AlphaVision\\AerotwineX\\frontend\\src\\components\\FlightSearch.vue"],"sourcesContent":["<template>\n  <div class=\"flight-search\">\n    <div class=\"header\">\n      <h1>AerotwineX 航班查詢</h1>\n      <p>簡單、快速地查詢您的航班</p>\n    </div>\n    \n    <div class=\"search-container\">\n      <div class=\"search-form\">\n        <div class=\"form-group\">\n          <label>出發地</label>\n          <select v-model=\"departureAirport\" @change=\"filterDestinations\">\n            <option value=\"\">請選擇出發機場</option>\n            <option v-for=\"airport in taiwanAirports\" :key=\"airport.code\" :value=\"airport.code\">\n              {{ airport.city }} - {{ airport.name }} ({{ airport.code }})\n            </option>\n          </select>\n        </div>\n        \n        <div class=\"form-group\">\n          <label>目的地機場</label>\n          <select v-model=\"destinationAirport\" :disabled=\"!departureAirport || !directFlightDestinations.length\">\n            <option value=\"\">請選擇目的地機場</option>\n            <option v-for=\"airport in directFlightDestinations\" :key=\"airport.code\" :value=\"airport.code\">\n              {{ airport.city }} - {{ airport.name }} ({{ airport.code }})\n            </option>\n          </select>\n        </div>\n        \n        <div class=\"form-group\">\n          <label>日期</label>\n          <input type=\"date\" v-model=\"flightDate\" :min=\"minDate\" :max=\"maxDate\">\n        </div>\n        \n        <div class=\"form-group\">\n          <label>航空公司</label>\n          <select v-model=\"selectedAirline\">\n            <option value=\"\">所有航空公司</option>\n            <option v-for=\"airline in airlines\" :key=\"airline.id\" :value=\"airline.id\">\n              {{ airline.name }}\n            </option>\n          </select>\n        </div>\n        \n        <div class=\"action-buttons\">\n          <button class=\"search-button\" @click=\"searchFlights\" :disabled=\"!canSearch\">\n            搜尋航班\n          </button>\n          <button class=\"reset-button\" @click=\"resetForm\">\n            重設\n          </button>\n        </div>\n        \n        <div v-if=\"errorMessage\" class=\"error-message\">\n          {{ errorMessage }}\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"search-results\" v-if=\"searchComplete\">\n      <div v-if=\"isLoading\" class=\"loading\">\n        <div class=\"loader\"></div>\n        <p>搜尋中，請稍候...</p>\n      </div>\n      \n      <div v-else>\n        <div class=\"results-header\">\n          <h2>搜尋結果</h2>\n          <p v-if=\"flights.length === 0\">沒有找到符合條件的航班</p>\n          <p v-else>找到 {{ flights.length }} 個符合條件的航班</p>\n        </div>\n        \n        <div class=\"flights-container\" v-if=\"flights.length > 0\">\n          <flight-card \n            v-for=\"flight in flights\" \n            :key=\"`${flight.flight_number}-${flight.scheduled_departure}`\" \n            :flight=\"flight\"\n            :departureAirportName=\"getAirportName(flight.departure_airport_code)\"\n            :arrivalAirportName=\"getAirportName(flight.arrival_airport_code)\"\n            :airlineName=\"getAirlineName(flight.airline_id)\"\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport FlightCard from './FlightCard.vue';\nimport { getAirports, getAirlines, searchFlights, getAvailableRoutes } from '../services/api';\n\nexport default {\n  name: 'FlightSearch',\n  components: {\n    FlightCard\n  },\n  data() {\n    return {\n      departureCountry: 'TW', // 預設出發國家為台灣\n      departureCity: '',\n      departureAirport: '',\n      destinationCountry: '',\n      destinationCity: '',\n      destinationAirport: '',\n      flightDate: this.getTodayDate(),\n      selectedAirline: '',\n      airports: [],\n      airlines: [],\n      filteredDepartureAirports: [],\n      filteredDestinationAirports: [],\n      departureCities: [],\n      destinationCities: [],\n      flights: [],\n      isLoading: false,\n      searchComplete: false,\n      errorMessage: '',\n      popularAirports: [],\n      airportsByCountry: {},\n      availableDestinationCountries: [],\n      availableRoutes: [], // 存儲可用的直飛航線\n      debugInfo: {\n        apiCallsStatus: {},\n        dataLoaded: false\n      },\n      taiwanAirports: [],\n      directFlightDestinations: []\n    };\n  },\n  computed: {\n    minDate() {\n      // 設定最小日期為今天\n      return this.getTodayDate();\n    },\n    maxDate() {\n      // 設定最大日期為一年後\n      const date = new Date();\n      date.setFullYear(date.getFullYear() + 1);\n      return date.toISOString().split('T')[0];\n    },\n    canSearch() {\n      return this.departureAirport && this.destinationAirport && this.flightDate;\n    }\n  },\n  async mounted() {\n    console.log('[DEBUG] FlightSearch組件掛載...');\n    await this.loadPopularAirports(); // 先加載熱門機場數據\n    await this.fetchInitialData(); // 嘗試從API獲取數據，如有必要會覆蓋熱門機場數據\n    \n    // 初始化時直接過濾台灣機場\n    this.filterDepartureAirports();\n  },\n  methods: {\n    async fetchInitialData() {\n      console.log('[DEBUG] 開始獲取初始資料...');\n      try {\n        // 從API獲取機場、航空公司和可用航線資料\n        const [airportsData, airlinesData, routesData] = await Promise.all([\n          getAirports(),\n          getAirlines(),\n          getAvailableRoutes()\n        ]);\n        \n        console.log('[DEBUG] API返回的機場數據:', airportsData);\n        console.log('[DEBUG] API返回的航空公司數據:', airlinesData);\n        console.log('[DEBUG] API返回的航線數據:', routesData);\n        \n        if (airportsData && airportsData.length) {\n          // 加入城市和國家資訊到機場數據\n          this.processAirportsData(airportsData);\n        }\n        \n        this.airlines = airlinesData;\n        this.availableRoutes = routesData || [];\n        \n        this.debugInfo.apiCallsStatus = {\n          airports: airportsData.length > 0 ? 'success' : 'empty',\n          airlines: airlinesData.length > 0 ? 'success' : 'empty',\n          routes: routesData.length > 0 ? 'success' : 'empty'\n        };\n        this.debugInfo.dataLoaded = true;\n        \n        console.log('[DEBUG] 初始化完成。機場數量:', this.airports.length, '航空公司數量:', this.airlines.length, '可用航線數量:', this.availableRoutes.length);\n      } catch (error) {\n        console.error('[ERROR] 無法載入初始資料:', error);\n        this.errorMessage = '無法載入資料，請稍後再試';\n        this.debugInfo.apiCallsStatus = {\n          error: error.message\n        };\n      }\n    },\n    \n    processAirportsData(airportsData) {\n      // 預設的機場資訊（含城市和國家）\n      const airportInfo = {\n        // 台灣機場\n        'TPE': { city_zh: '桃園', country: 'TW', country_name: '台灣' },\n        'TSA': { city_zh: '臺北', country: 'TW', country_name: '台灣' },\n        'KHH': { city_zh: '高雄', country: 'TW', country_name: '台灣' },\n        'RMQ': { city_zh: '台中', country: 'TW', country_name: '台灣' },\n        'TTT': { city_zh: '臺東', country: 'TW', country_name: '台灣' },\n        'KYD': { city_zh: '臺東', country: 'TW', country_name: '台灣' },\n        'KNH': { city_zh: '金門', country: 'TW', country_name: '台灣' },\n        'MZG': { city_zh: '澎湖', country: 'TW', country_name: '台灣' },\n        'HUN': { city_zh: '花蓮', country: 'TW', country_name: '台灣' },\n        'GNI': { city_zh: '臺東', country: 'TW', country_name: '台灣' },\n        'MFK': { city_zh: '連江', country: 'TW', country_name: '台灣' },\n        'LZN': { city_zh: '連江', country: 'TW', country_name: '台灣' },\n        'TNN': { city_zh: '台南', country: 'TW', country_name: '台灣' },\n        'CMJ': { city_zh: '澎湖', country: 'TW', country_name: '台灣' },\n        'WOT': { city_zh: '澎湖', country: 'TW', country_name: '台灣' },\n        \n        // 日本機場\n        'HND': { city_zh: '東京', country: 'JP', country_name: '日本' },\n        'NRT': { city_zh: '東京', country: 'JP', country_name: '日本' },\n        'KIX': { city_zh: '大阪', country: 'JP', country_name: '日本' },\n        'FUK': { city_zh: '福岡', country: 'JP', country_name: '日本' },\n        'CTS': { city_zh: '札幌', country: 'JP', country_name: '日本' },\n        'NGO': { city_zh: '名古屋', country: 'JP', country_name: '日本' },\n        'OKA': { city_zh: '沖繩', country: 'JP', country_name: '日本' },\n        \n        // 亞洲其他熱門機場\n        'HKG': { city_zh: '香港', country: 'HK', country_name: '香港' },\n        'ICN': { city_zh: '首爾', country: 'KR', country_name: '韓國' },\n        'GMP': { city_zh: '首爾', country: 'KR', country_name: '韓國' },\n        'PVG': { city_zh: '上海', country: 'CN', country_name: '中國大陸' },\n        'PEK': { city_zh: '北京', country: 'CN', country_name: '中國大陸' },\n        'SIN': { city_zh: '新加坡', country: 'SG', country_name: '新加坡' },\n        'BKK': { city_zh: '曼谷', country: 'TH', country_name: '泰國' },\n        'MNL': { city_zh: '馬尼拉', country: 'PH', country_name: '菲律賓' }\n      };\n      \n      // 擴展機場數據\n      this.airports = airportsData.map(airport => {\n        const info = airportInfo[airport.code] || { \n          city_zh: '未知城市', \n          country: 'XX', \n          country_name: '未知國家' \n        };\n        \n        return {\n          ...airport,\n          city: info.city_zh,\n          country: info.country,\n          country_name: info.country_name\n        };\n      });\n      \n      // 將機場按國家分類\n      this.organizeAirportsByCountry();\n    },\n    \n    organizeAirportsByCountry() {\n      // 整理機場按國家分類\n      this.airportsByCountry = {};\n      \n      for (const airport of this.airports) {\n        if (!this.airportsByCountry[airport.country]) {\n          this.airportsByCountry[airport.country] = [];\n        }\n        this.airportsByCountry[airport.country].push(airport);\n      }\n      \n      // 設定可用的目的地國家列表\n      const countries = [];\n      for (const countryCode in this.airportsByCountry) {\n        if (countryCode !== 'TW') {  // 排除台灣，因為不能同時作為出發地和目的地\n          const airports = this.airportsByCountry[countryCode];\n          if (airports && airports.length > 0) {\n            countries.push({\n              code: countryCode,\n              name: airports[0].country_name || countryCode\n            });\n          }\n        }\n      }\n      \n      this.availableDestinationCountries = countries;\n      console.log('[DEBUG] 可用的目的地國家:', this.availableDestinationCountries);\n    },\n    \n    filterDepartureAirports() {\n      console.log('[DEBUG] 篩選出發機場，當前國家:', this.departureCountry);\n      // 取得台灣機場\n      this.filteredDepartureAirports = this.airports.filter(\n        airport => airport.country === this.departureCountry\n      );\n      \n      // 從台灣機場中提取城市列表\n      const cities = [...new Set(this.filteredDepartureAirports.map(airport => airport.city))];\n      this.departureCities = cities;\n      \n      console.log('[DEBUG] 出發城市列表:', this.departureCities);\n      console.log('[DEBUG] 台灣機場數量:', this.filteredDepartureAirports.length);\n      \n      // 重置出發城市和機場選擇\n      this.departureCity = '';\n      this.departureAirport = '';\n      this.resetDestination();\n    },\n    \n    filterDepartureAirportsByCity() {\n      console.log('[DEBUG] 按城市篩選出發機場:', this.departureCity);\n      if (!this.departureCity) {\n        this.filteredDepartureAirports = [];\n        this.departureAirport = '';\n        return;\n      }\n      \n      // 篩選選定城市的機場\n      this.filteredDepartureAirports = this.airports.filter(\n        airport => airport.country === this.departureCountry && airport.city === this.departureCity\n      );\n      \n      console.log('[DEBUG] 篩選後的出發機場:', this.filteredDepartureAirports);\n      \n      // 如果只有一個機場，自動選擇\n      if (this.filteredDepartureAirports.length === 1) {\n        this.departureAirport = this.filteredDepartureAirports[0].code;\n        this.filterDestinations();\n      } else {\n        this.departureAirport = '';\n      }\n    },\n    \n    filterDestinations() {\n      console.log('[DEBUG] 篩選目的地機場，當前出發機場:', this.departureAirport);\n      if (!this.departureAirport) {\n        this.resetDestination();\n        return;\n      }\n      \n      // 重置目的地選擇\n      this.destinationCountry = '';\n      this.destinationCity = '';\n      this.destinationAirport = '';\n      this.filteredDestinationAirports = [];\n      this.destinationCities = [];\n      \n      // 根據可用航線過濾目的地國家\n      if (this.availableRoutes && this.availableRoutes.length > 0) {\n        console.log('[DEBUG] 使用可用航線過濾目的地...');\n        \n        // 找出當前出發地可以直飛的所有目的地機場代碼\n        const availableDestinations = this.availableRoutes\n          .filter(route => route.departure === this.departureAirport)\n          .map(route => route.arrival);\n        \n        console.log('[DEBUG] 可直飛的目的地機場:', availableDestinations);\n        \n        if (availableDestinations.length > 0) {\n          // 從可直飛的目的地機場中獲取它們的國家信息\n          const destinationAirports = this.airports.filter(airport => \n            availableDestinations.includes(airport.code)\n          );\n          \n          // 獲取可用目的地國家列表（不包括台灣）\n          const countries = [];\n          const countrySet = new Set();\n          \n          for (const airport of destinationAirports) {\n            if (airport.country !== 'TW' && !countrySet.has(airport.country)) {\n              countrySet.add(airport.country);\n              countries.push({\n                code: airport.country,\n                name: airport.country_name || airport.country\n              });\n            }\n          }\n          \n          this.availableDestinationCountries = countries;\n          console.log('[DEBUG] 可用的目的地國家 (直飛):', this.availableDestinationCountries);\n        } else {\n          // 如果沒有找到可直飛的目的地，則清空可用國家列表\n          this.availableDestinationCountries = [];\n          console.log('[DEBUG] 沒有找到可直飛的目的地');\n        }\n      } else {\n        console.log('[DEBUG] 沒有可用航線資料，使用所有非台灣國家作為目的地');\n        this.organizeAirportsByCountry(); // 使用原始的分類方法\n      }\n    },\n    \n    filterDestinationAirports() {\n      console.log('[DEBUG] 按國家篩選目的地機場:', this.destinationCountry);\n      if (!this.destinationCountry) {\n        this.destinationCity = '';\n        this.destinationAirport = '';\n        this.filteredDestinationAirports = [];\n        this.destinationCities = [];\n        return;\n      }\n      \n      // 獲取當前出發機場可直飛的目的地機場列表\n      const availableDestinationCodes = this.availableRoutes\n        .filter(route => route.departure === this.departureAirport)\n        .map(route => route.arrival);\n      \n      // 篩選選定國家內的機場，且必須是可直飛的\n      const airportsInCountry = this.airports.filter(\n        airport => airport.country === this.destinationCountry && \n                   availableDestinationCodes.includes(airport.code)\n      );\n      \n      // 從目的地國家機場中提取城市列表\n      const cities = [...new Set(airportsInCountry.map(airport => airport.city))];\n      this.destinationCities = cities;\n      \n      console.log('[DEBUG] 目的地城市列表 (直飛):', this.destinationCities);\n      \n      // 重置目的地城市和機場選擇\n      this.destinationCity = '';\n      this.destinationAirport = '';\n      this.filteredDestinationAirports = [];\n    },\n    \n    filterDestinationAirportsByCity() {\n      console.log('[DEBUG] 按城市篩選目的地機場:', this.destinationCity);\n      if (!this.destinationCity) {\n        this.filteredDestinationAirports = [];\n        this.destinationAirport = '';\n        return;\n      }\n      \n      // 獲取當前出發機場可直飛的目的地機場列表\n      const availableDestinationCodes = this.availableRoutes\n        .filter(route => route.departure === this.departureAirport)\n        .map(route => route.arrival);\n      \n      // 篩選選定城市的機場，且必須是可直飛的\n      this.filteredDestinationAirports = this.airports.filter(\n        airport => airport.country === this.destinationCountry && \n                  airport.city === this.destinationCity &&\n                  availableDestinationCodes.includes(airport.code)\n      );\n      \n      console.log('[DEBUG] 篩選後的目的地機場 (直飛):', this.filteredDestinationAirports);\n      \n      // 如果只有一個機場，自動選擇\n      if (this.filteredDestinationAirports.length === 1) {\n        this.destinationAirport = this.filteredDestinationAirports[0].code;\n      } else {\n        this.destinationAirport = '';\n      }\n    },\n    \n    resetDestination() {\n      this.destinationCountry = '';\n      this.destinationCity = '';\n      this.destinationAirport = '';\n      this.filteredDestinationAirports = [];\n      this.destinationCities = [];\n    },\n    \n    async loadPopularAirports() {\n      console.log('[DEBUG] 加載熱門機場數據...');\n      try {\n        // 嘗試讀取熱門機場配置文件\n        const response = await fetch('/config/airlines_airports.json');\n        if (!response.ok) {\n          throw new Error('無法獲取熱門機場數據');\n        }\n        \n        const data = await response.json();\n        console.log('[DEBUG] 熱門機場配置數據:', data);\n        \n        // 處理機場數據\n        if (data && data.airports && Array.isArray(data.airports)) {\n          this.popularAirports = data.airports;\n          console.log('[DEBUG] 已加載熱門機場數量:', this.popularAirports.length);\n          \n          // 機場數據處理：優先使用API數據，如果API無數據則使用熱門機場列表\n          if (this.airports.length === 0 && this.popularAirports.length > 0) {\n            console.log('[DEBUG] API沒有返回機場數據，使用熱門機場數據...');\n            \n            // 為熱門機場創建下拉選單所需的格式\n            const airportNames = {\n              // 台灣機場\n              'TPE': '台灣桃園國際機場',\n              'TSA': '台北松山機場',\n              'KHH': '高雄國際機場',\n              'RMQ': '台中國際機場',\n              'TTT': '台東機場',\n              'KYD': '蘭嶼機場',\n              'KNH': '金門機場',\n              'MZG': '馬公機場',\n              'HUN': '花蓮機場',\n              'GNI': '綠島機場',\n              'MFK': '馬祖北竿機場',\n              'LZN': '馬祖南竿機場',\n              'TNN': '台南機場',\n              'CMJ': '七美機場',\n              'WOT': '望安機場',\n              \n              // 日本熱門機場\n              'HND': '東京羽田機場',\n              'NRT': '東京成田國際機場',\n              'KIX': '大阪關西國際機場',\n              'FUK': '福岡機場',\n              'CTS': '札幌新千歲機場',\n              'NGO': '名古屋中部國際機場',\n              'OKA': '沖繩那霸機場',\n              \n              // 亞洲其他熱門機場\n              'HKG': '香港國際機場',\n              'ICN': '首爾仁川國際機場',\n              'GMP': '首爾金浦國際機場',\n              'PVG': '上海浦東國際機場',\n              'PEK': '北京首都國際機場',\n              'SIN': '新加坡樟宜機場',\n              'BKK': '曼谷素萬那普機場',\n              'MNL': '馬尼拉國際機場'\n            };\n            \n            // 將熱門機場代碼轉換為標準格式，含名稱\n            this.airports = this.popularAirports.map(code => ({\n              code,\n              name: airportNames[code] || `${code} 機場` // 如果沒有預設名稱，使用代碼+機場\n            }));\n            \n            console.log('[DEBUG] 轉換後的機場數據:', this.airports);\n          }\n        }\n        \n        // 處理航空公司數據\n        if (data && data.airlines && Array.isArray(data.airlines) && this.airlines.length === 0) {\n          console.log('[DEBUG] API沒有返回航空公司數據，使用配置文件數據...');\n          \n          // 為航空公司創建下拉選單所需的格式\n          const airlineNames = {\n            'CI': '中華航空',\n            'BR': '長榮航空',\n            'AE': '華信航空',\n            'B7': '立榮航空',\n            'JX': '星宇航空',\n            'DA': '德安航空',\n            'JL': '日本航空',\n            'CX': '國泰航空',\n            'OZ': '韓亞航空'\n          };\n          \n          // 將航空公司代碼轉換為標準格式，含名稱\n          this.airlines = data.airlines.map(id => ({\n            id,\n            name: airlineNames[id] || id\n          }));\n          \n          console.log('[DEBUG] 轉換後的航空公司數據:', this.airlines);\n        }\n      } catch (error) {\n        console.error('[ERROR] 無法載入熱門機場數據:', error);\n      }\n    },\n    \n    async searchFlights() {\n      this.isLoading = true;\n      this.searchComplete = true;\n      this.errorMessage = '';\n      \n      try {\n        // 調用API搜尋航班\n        const results = await searchFlights({\n          departureAirport: this.departureAirport,\n          destinationAirport: this.destinationAirport,\n          date: this.flightDate,\n          airline: this.selectedAirline\n        });\n        \n        this.flights = results;\n      } catch (error) {\n        console.error('搜尋航班時出錯:', error);\n        this.errorMessage = '搜尋過程中發生錯誤，請稍後再試';\n        this.flights = [];\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    resetForm() {\n      this.departureCountry = 'TW';\n      this.departureCity = '';\n      this.departureAirport = '';\n      this.destinationCountry = '';\n      this.destinationCity = '';\n      this.destinationAirport = '';\n      this.flightDate = this.getTodayDate();\n      this.selectedAirline = '';\n      this.flights = [];\n      this.searchComplete = false;\n      this.filterDepartureAirports();\n    },\n    getTodayDate() {\n      return new Date().toISOString().split('T')[0];\n    },\n    getAirportName(code) {\n      const airport = this.airports.find(a => a.code === code);\n      return airport ? airport.name : code;\n    },\n    getAirlineName(id) {\n      const airline = this.airlines.find(a => a.id === id);\n      return airline ? airline.name : id;\n    },\n    formatDateTime(dateTimeStr) {\n      const date = new Date(dateTimeStr);\n      return `${date.toLocaleDateString()} ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.flight-search {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 2rem;\n  color: #333;\n  font-family: 'Arial', sans-serif;\n}\n\n.header {\n  text-align: center;\n  margin-bottom: 2rem;\n}\n\n.header h1 {\n  font-size: 2.5rem;\n  margin-bottom: 0.5rem;\n  font-weight: 300;\n  letter-spacing: 1px;\n}\n\n.header p {\n  font-size: 1.2rem;\n  color: #666;\n}\n\n.search-container {\n  background-color: #f8f8f8;\n  border-radius: 8px;\n  padding: 2rem;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\n  margin-bottom: 2rem;\n}\n\n.search-form {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 1.5rem;\n}\n\n.form-group {\n  display: flex;\n  flex-direction: column;\n}\n\nlabel {\n  margin-bottom: 0.5rem;\n  font-weight: 500;\n  color: #555;\n}\n\nselect, input {\n  padding: 0.8rem;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 1rem;\n  background-color: white;\n  transition: border-color 0.3s;\n}\n\nselect:focus, input:focus {\n  border-color: #333;\n  outline: none;\n}\n\n.action-buttons {\n  display: flex;\n  gap: 1rem;\n  margin-top: 1.5rem;\n  grid-column: 1 / -1;\n}\n\nbutton {\n  padding: 0.8rem 1.5rem;\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  cursor: pointer;\n  transition: background-color 0.3s, transform 0.1s;\n}\n\nbutton:hover {\n  transform: translateY(-2px);\n}\n\n.search-button {\n  background-color: #333;\n  color: white;\n  flex: 2;\n}\n\n.search-button:hover {\n  background-color: #222;\n}\n\n.search-button:disabled {\n  background-color: #ccc;\n  cursor: not-allowed;\n  transform: none;\n}\n\n.reset-button {\n  background-color: #e6e6e6;\n  color: #333;\n  flex: 1;\n}\n\n.reset-button:hover {\n  background-color: #d9d9d9;\n}\n\n.error-message {\n  color: #d32f2f;\n  background-color: #ffebee;\n  padding: 0.8rem;\n  border-radius: 4px;\n  margin-top: 1rem;\n  text-align: center;\n  font-weight: 500;\n  grid-column: 1 / -1;\n}\n\n.search-results {\n  margin-top: 2rem;\n}\n\n.results-header {\n  text-align: center;\n  margin-bottom: 1.5rem;\n}\n\n.results-header h2 {\n  font-size: 1.8rem;\n  font-weight: 300;\n  margin-bottom: 0.5rem;\n}\n\n.loading {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 3rem 0;\n}\n\n.loader {\n  border: 4px solid #f3f3f3;\n  border-top: 4px solid #333;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  animation: spin 1s linear infinite;\n  margin-bottom: 1rem;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n.flights-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 1.5rem;\n}\n\n@media (max-width: 768px) {\n  .search-form {\n    grid-template-columns: 1fr;\n  }\n  \n  .flights-container {\n    grid-template-columns: 1fr;\n  }\n  \n  .flight-search {\n    padding: 1rem;\n  }\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}