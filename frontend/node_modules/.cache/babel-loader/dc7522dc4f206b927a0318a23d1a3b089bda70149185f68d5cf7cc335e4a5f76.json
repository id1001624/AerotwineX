{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelText as _vModelText, createCommentVNode as _createCommentVNode, normalizeStyle as _normalizeStyle, resolveComponent as _resolveComponent, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"flight-search\"\n};\nconst _hoisted_2 = {\n  class: \"search-container\"\n};\nconst _hoisted_3 = {\n  class: \"search-form\"\n};\nconst _hoisted_4 = {\n  class: \"form-group\"\n};\nconst _hoisted_5 = [\"value\"];\nconst _hoisted_6 = {\n  class: \"form-group\"\n};\nconst _hoisted_7 = [\"disabled\"];\nconst _hoisted_8 = {\n  value: \"\"\n};\nconst _hoisted_9 = [\"value\"];\nconst _hoisted_10 = {\n  class: \"form-group\"\n};\nconst _hoisted_11 = [\"min\", \"max\"];\nconst _hoisted_12 = {\n  class: \"form-group\"\n};\nconst _hoisted_13 = [\"disabled\"];\nconst _hoisted_14 = {\n  value: \"\"\n};\nconst _hoisted_15 = [\"value\"];\nconst _hoisted_16 = {\n  class: \"action-buttons\"\n};\nconst _hoisted_17 = [\"disabled\"];\nconst _hoisted_18 = {\n  key: 0,\n  class: \"error-message\"\n};\nconst _hoisted_19 = {\n  key: 0,\n  class: \"search-results\"\n};\nconst _hoisted_20 = {\n  key: 0,\n  class: \"loading\"\n};\nconst _hoisted_21 = {\n  key: 1\n};\nconst _hoisted_22 = {\n  class: \"results-header\"\n};\nconst _hoisted_23 = {\n  key: 0\n};\nconst _hoisted_24 = {\n  key: 1\n};\nconst _hoisted_25 = {\n  key: 0,\n  class: \"airline-summary\"\n};\nconst _hoisted_26 = {\n  class: \"airline-list\"\n};\nconst _hoisted_27 = [\"onClick\"];\nconst _hoisted_28 = {\n  class: \"airline-info\"\n};\nconst _hoisted_29 = {\n  class: \"airline-name\"\n};\nconst _hoisted_30 = {\n  class: \"airline-count\"\n};\nconst _hoisted_31 = {\n  class: \"airline-bar-container\"\n};\nconst _hoisted_32 = {\n  key: 1,\n  class: \"flights-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_flight_card = _resolveComponent(\"flight-card\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[16] || (_cache[16] = _createElementVNode(\"div\", {\n    class: \"header\"\n  }, [_createElementVNode(\"h1\", null, \"AerotwineX 航班查詢\"), _createElementVNode(\"p\", null, \"簡單、快速地查詢您的航班\")], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_cache[8] || (_cache[8] = _createElementVNode(\"label\", null, \"出發地\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.departureAirport = $event),\n    onChange: _cache[1] || (_cache[1] = (...args) => $options.filterDestinations && $options.filterDestinations(...args))\n  }, [_cache[7] || (_cache[7] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"請選擇出發機場\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.taiwanAirports, airport => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: airport.code,\n      value: airport.code\n    }, _toDisplayString(airport.city) + \" - \" + _toDisplayString(airport.name) + \" (\" + _toDisplayString(airport.code) + \") \", 9 /* TEXT, PROPS */, _hoisted_5);\n  }), 128 /* KEYED_FRAGMENT */))], 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, $data.departureAirport]])]), _createElementVNode(\"div\", _hoisted_6, [_cache[9] || (_cache[9] = _createElementVNode(\"label\", null, \"目的地機場\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.destinationAirport = $event),\n    disabled: !$data.departureAirport || $data.isLoadingDestinations\n  }, [_createElementVNode(\"option\", _hoisted_8, _toDisplayString($data.isLoadingDestinations ? '載入中...' : '請選擇目的地機場'), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.directFlightDestinations, airport => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: airport.code,\n      value: airport.code\n    }, _toDisplayString(airport.city || '未知城市') + \" - \" + _toDisplayString(airport.name) + \" (\" + _toDisplayString(airport.code) + \") \", 9 /* TEXT, PROPS */, _hoisted_9);\n  }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_7), [[_vModelSelect, $data.destinationAirport]])]), _createElementVNode(\"div\", _hoisted_10, [_cache[10] || (_cache[10] = _createElementVNode(\"label\", null, \"日期\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.flightDate = $event),\n    min: $options.minDate,\n    max: $options.maxDate\n  }, null, 8 /* PROPS */, _hoisted_11), [[_vModelText, $data.flightDate]])]), _createElementVNode(\"div\", _hoisted_12, [_cache[11] || (_cache[11] = _createElementVNode(\"label\", null, \"航空公司\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.selectedAirline = $event),\n    disabled: !$data.departureAirport || !$data.destinationAirport || $data.isLoadingAirlines\n  }, [_createElementVNode(\"option\", _hoisted_14, _toDisplayString($data.isLoadingAirlines ? '載入中...' : '全部航空公司'), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.availableAirlines, airline => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: airline.id,\n      value: airline.id\n    }, _toDisplayString(airline.name), 9 /* TEXT, PROPS */, _hoisted_15);\n  }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_13), [[_vModelSelect, $data.selectedAirline]])]), _createElementVNode(\"div\", _hoisted_16, [_createElementVNode(\"button\", {\n    class: \"search-button\",\n    onClick: _cache[5] || (_cache[5] = (...args) => $options.searchFlights && $options.searchFlights(...args)),\n    disabled: !$options.canSearch\n  }, \" 搜尋航班 \", 8 /* PROPS */, _hoisted_17), _createElementVNode(\"button\", {\n    class: \"reset-button\",\n    onClick: _cache[6] || (_cache[6] = (...args) => $options.resetForm && $options.resetForm(...args))\n  }, \" 重設 \")]), $data.errorMessage ? (_openBlock(), _createElementBlock(\"div\", _hoisted_18, _toDisplayString($data.errorMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)])]), $data.searchComplete ? (_openBlock(), _createElementBlock(\"div\", _hoisted_19, [$data.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_20, _cache[12] || (_cache[12] = [_createElementVNode(\"div\", {\n    class: \"loader\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"搜尋中，請稍候...\", -1 /* HOISTED */)]))) : (_openBlock(), _createElementBlock(\"div\", _hoisted_21, [_createElementVNode(\"div\", _hoisted_22, [_cache[13] || (_cache[13] = _createElementVNode(\"h2\", null, \"搜尋結果\", -1 /* HOISTED */)), $data.flights.length === 0 ? (_openBlock(), _createElementBlock(\"p\", _hoisted_23, \"沒有找到符合條件的航班\")) : (_openBlock(), _createElementBlock(\"p\", _hoisted_24, \"找到 \" + _toDisplayString($data.flights.length) + \" 個符合條件的航班\", 1 /* TEXT */))]), $data.flights.length > 0 && !$data.selectedAirline ? (_openBlock(), _createElementBlock(\"div\", _hoisted_25, [_cache[14] || (_cache[14] = _createElementVNode(\"h3\", null, \"航空公司航班分佈\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_26, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.getAirlineSummary(), airline => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: airline.id,\n      class: \"airline-item\",\n      onClick: $event => $data.selectedAirline = airline.id\n    }, [_createElementVNode(\"div\", _hoisted_28, [_createElementVNode(\"div\", _hoisted_29, _toDisplayString(airline.name), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_30, _toDisplayString(airline.count) + \" 個航班\", 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_31, [_createElementVNode(\"div\", {\n      class: \"airline-bar\",\n      style: _normalizeStyle({\n        width: $options.getPercentage(airline.count)\n      })\n    }, null, 4 /* STYLE */)])], 8 /* PROPS */, _hoisted_27);\n  }), 128 /* KEYED_FRAGMENT */))]), _cache[15] || (_cache[15] = _createElementVNode(\"div\", {\n    class: \"filter-note\"\n  }, \"點擊航空公司可以篩選結果\", -1 /* HOISTED */))])) : _createCommentVNode(\"v-if\", true), $data.flights.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_32, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.flights, flight => {\n    return _openBlock(), _createBlock(_component_flight_card, {\n      key: `${flight.flight_number}-${flight.scheduled_departure}`,\n      flight: flight,\n      departureAirportName: $options.getAirportName(flight.departure_airport_code),\n      arrivalAirportName: $options.getAirportName(flight.arrival_airport_code),\n      airlineName: $options.getAirlineName(flight.airline_id)\n    }, null, 8 /* PROPS */, [\"flight\", \"departureAirportName\", \"arrivalAirportName\", \"airlineName\"]);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)]))])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","value","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_cache","$event","$data","departureAirport","onChange","args","$options","filterDestinations","_Fragment","_renderList","taiwanAirports","airport","code","city","_toDisplayString","name","_hoisted_5","_hoisted_6","destinationAirport","disabled","isLoadingDestinations","_hoisted_8","directFlightDestinations","_hoisted_9","_hoisted_7","_hoisted_10","type","flightDate","min","minDate","max","maxDate","_hoisted_11","_hoisted_12","selectedAirline","isLoadingAirlines","_hoisted_14","availableAirlines","airline","id","_hoisted_15","_hoisted_13","_hoisted_16","onClick","searchFlights","canSearch","_hoisted_17","resetForm","errorMessage","_hoisted_18","_createCommentVNode","searchComplete","_hoisted_19","isLoading","_hoisted_20","_hoisted_21","_hoisted_22","flights","length","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","getAirlineSummary","_hoisted_28","_hoisted_29","_hoisted_30","count","_hoisted_31","style","_normalizeStyle","width","getPercentage","_hoisted_27","_hoisted_32","flight","_createBlock","_component_flight_card","flight_number","scheduled_departure","departureAirportName","getAirportName","departure_airport_code","arrivalAirportName","arrival_airport_code","airlineName","getAirlineName","airline_id"],"sources":["C:\\Users\\Aliothouo\\OneDrive\\文件\\學校\\AlphaVision\\AerotwineX\\frontend\\src\\components\\FlightSearch.vue"],"sourcesContent":["<template>\n  <div class=\"flight-search\">\n    <div class=\"header\">\n      <h1>AerotwineX 航班查詢</h1>\n      <p>簡單、快速地查詢您的航班</p>\n    </div>\n    \n    <div class=\"search-container\">\n      <div class=\"search-form\">\n        <div class=\"form-group\">\n          <label>出發地</label>\n          <select v-model=\"departureAirport\" @change=\"filterDestinations\">\n            <option value=\"\">請選擇出發機場</option>\n            <option v-for=\"airport in taiwanAirports\" :key=\"airport.code\" :value=\"airport.code\">\n              {{ airport.city }} - {{ airport.name }} ({{ airport.code }})\n            </option>\n          </select>\n        </div>\n        \n        <div class=\"form-group\">\n          <label>目的地機場</label>\n          <select v-model=\"destinationAirport\" :disabled=\"!departureAirport || isLoadingDestinations\">\n            <option value=\"\">{{ isLoadingDestinations ? '載入中...' : '請選擇目的地機場' }}</option>\n            <option v-for=\"airport in directFlightDestinations\" :key=\"airport.code\" :value=\"airport.code\">\n              {{ airport.city || '未知城市' }} - {{ airport.name }} ({{ airport.code }})\n            </option>\n          </select>\n        </div>\n        \n        <div class=\"form-group\">\n          <label>日期</label>\n          <input type=\"date\" v-model=\"flightDate\" :min=\"minDate\" :max=\"maxDate\">\n        </div>\n        \n        <div class=\"form-group\">\n          <label>航空公司</label>\n          <select v-model=\"selectedAirline\" :disabled=\"!departureAirport || !destinationAirport || isLoadingAirlines\">\n            <option value=\"\">{{ isLoadingAirlines ? '載入中...' : '全部航空公司' }}</option>\n            <option v-for=\"airline in availableAirlines\" :key=\"airline.id\" :value=\"airline.id\">\n              {{ airline.name }}\n            </option>\n          </select>\n        </div>\n        \n        <div class=\"action-buttons\">\n          <button class=\"search-button\" @click=\"searchFlights\" :disabled=\"!canSearch\">\n            搜尋航班\n          </button>\n          <button class=\"reset-button\" @click=\"resetForm\">\n            重設\n          </button>\n        </div>\n        \n        <div v-if=\"errorMessage\" class=\"error-message\">\n          {{ errorMessage }}\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"search-results\" v-if=\"searchComplete\">\n      <div v-if=\"isLoading\" class=\"loading\">\n        <div class=\"loader\"></div>\n        <p>搜尋中，請稍候...</p>\n      </div>\n      \n      <div v-else>\n        <div class=\"results-header\">\n          <h2>搜尋結果</h2>\n          <p v-if=\"flights.length === 0\">沒有找到符合條件的航班</p>\n          <p v-else>找到 {{ flights.length }} 個符合條件的航班</p>\n        </div>\n        \n        <div v-if=\"flights.length > 0 && !selectedAirline\" class=\"airline-summary\">\n          <h3>航空公司航班分佈</h3>\n          <div class=\"airline-list\">\n            <div v-for=\"airline in getAirlineSummary()\" :key=\"airline.id\" \n                 class=\"airline-item\" \n                 @click=\"selectedAirline = airline.id\">\n              <div class=\"airline-info\">\n                <div class=\"airline-name\">{{ airline.name }}</div>\n                <div class=\"airline-count\">{{ airline.count }} 個航班</div>\n              </div>\n              <div class=\"airline-bar-container\">\n                <div class=\"airline-bar\" :style=\"{ width: getPercentage(airline.count) }\"></div>\n              </div>\n            </div>\n          </div>\n          <div class=\"filter-note\">點擊航空公司可以篩選結果</div>\n        </div>\n        \n        <div class=\"flights-container\" v-if=\"flights.length > 0\">\n          <flight-card \n            v-for=\"flight in flights\" \n            :key=\"`${flight.flight_number}-${flight.scheduled_departure}`\" \n            :flight=\"flight\"\n            :departureAirportName=\"getAirportName(flight.departure_airport_code)\"\n            :arrivalAirportName=\"getAirportName(flight.arrival_airport_code)\"\n            :airlineName=\"getAirlineName(flight.airline_id)\"\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport FlightCard from './FlightCard.vue';\nimport axios from 'axios';\n\nexport default {\n  name: 'FlightSearch',\n  components: {\n    FlightCard\n  },\n  data() {\n    return {\n      departureAirport: '',\n      destinationAirport: '',\n      flightDate: this.getTodayDate(),\n      selectedAirline: '',\n      airports: [],\n      airlines: [],\n      availableAirlines: [], // 特定航線可用的航空公司\n      flights: [],\n      isLoading: false,\n      isLoadingDestinations: false,\n      isLoadingAirlines: false,\n      searchComplete: false,\n      errorMessage: '',\n      popularAirports: [],\n      airportsByCountry: {},\n      availableRoutes: [], // 存儲可用的直飛航線\n      debugInfo: {\n        apiCallsStatus: {},\n        dataLoaded: false\n      },\n      taiwanAirports: [], // 台灣機場列表\n      directFlightDestinations: [], // 直飛目的地列表\n      airportData: [],\n      airportNames: {\n        'TPE': '台灣桃園國際機場',\n        'TSA': '台北松山機場',\n        'KHH': '高雄國際機場',\n        'RMQ': '台中國際機場',\n        'TTT': '台東機場',\n        'KYD': '蘭嶼機場',\n        'KNH': '金門機場',\n        'MZG': '馬公機場',\n        'HUN': '花蓮機場',\n        'GNI': '綠島機場',\n        'MFK': '馬祖北竿機場',\n        'LZN': '馬祖南竿機場',\n        'TNN': '台南機場',\n        'CMJ': '七美機場',\n        'WOT': '望安機場',\n        'HND': '東京羽田機場',\n        'NRT': '東京成田國際機場',\n        'KIX': '大阪關西國際機場',\n        'FUK': '福岡機場',\n        'CTS': '札幌新千歲機場',\n        'NGO': '名古屋中部國際機場',\n        'OKA': '沖繩那霸機場',\n        'HKG': '香港國際機場',\n        'ICN': '首爾仁川國際機場',\n        'GMP': '首爾金浦國際機場',\n        'PVG': '上海浦東國際機場',\n        'PEK': '北京首都國際機場',\n        'SIN': '新加坡樟宜機場',\n        'BKK': '曼谷素萬那普機場',\n        'MNL': '馬尼拉國際機場'\n      },\n      cityInfo: {\n        'TPE': '桃園',\n        'TSA': '臺北',\n        'KHH': '高雄',\n        'RMQ': '台中',\n        'TTT': '臺東',\n        'KYD': '臺東',\n        'KNH': '金門',\n        'MZG': '澎湖',\n        'HUN': '花蓮',\n        'GNI': '臺東',\n        'MFK': '連江',\n        'LZN': '連江',\n        'TNN': '台南',\n        'CMJ': '澎湖',\n        'WOT': '澎湖',\n        'HND': '東京',\n        'NRT': '東京',\n        'KIX': '大阪',\n        'FUK': '福岡',\n        'CTS': '札幌',\n        'NGO': '名古屋',\n        'OKA': '沖繩',\n        'HKG': '香港',\n        'ICN': '首爾',\n        'GMP': '首爾',\n        'PVG': '上海',\n        'PEK': '北京',\n        'SIN': '新加坡',\n        'BKK': '曼谷',\n        'MNL': '馬尼拉'\n      },\n      countryInfo: {\n        'TPE': 'TW',\n        'TSA': 'TW',\n        'KHH': 'TW',\n        'RMQ': 'TW',\n        'TTT': 'TW',\n        'KYD': 'TW',\n        'KNH': 'TW',\n        'MZG': 'TW',\n        'HUN': 'TW',\n        'GNI': 'TW',\n        'MFK': 'TW',\n        'LZN': 'TW',\n        'TNN': 'TW',\n        'CMJ': 'TW',\n        'WOT': 'TW',\n        'HND': 'JP',\n        'NRT': 'JP',\n        'KIX': 'JP',\n        'FUK': 'JP',\n        'CTS': 'JP',\n        'NGO': 'JP',\n        'OKA': 'JP',\n        'HKG': 'HK',\n        'ICN': 'KR',\n        'GMP': 'KR',\n        'PVG': 'CN',\n        'PEK': 'CN',\n        'SIN': 'SG',\n        'BKK': 'TH',\n        'MNL': 'PH'\n      }\n    };\n  },\n  computed: {\n    minDate() {\n      // 設定最小日期為今天\n      return this.getTodayDate();\n    },\n    maxDate() {\n      // 設定最大日期為一年後\n      const date = new Date();\n      date.setFullYear(date.getFullYear() + 1);\n      return date.toISOString().split('T')[0];\n    },\n    canSearch() {\n      // 不需要選擇航空公司也可以搜尋\n      return this.departureAirport && this.destinationAirport && this.flightDate;\n    }\n  },\n  \n  watch: {\n    // 當目的地機場變更時，獲取可用航空公司\n    destinationAirport() {\n      if (this.destinationAirport) {\n        this.filterAirlines();\n      }\n    }\n  },\n  async mounted() {\n    console.log('[DEBUG] FlightSearch組件掛載...');\n    this.isLoading = true;\n    \n    try {\n      // 加載台灣國內機場數據\n      const airportsResponse = await axios.get('http://localhost:5000/api/airports');\n      this.taiwanAirports = airportsResponse.data;\n      console.log('[DEBUG] 台灣機場數據載入成功:', this.taiwanAirports);\n      \n      // 將台灣機場添加到機場清單中\n      this.airports = [...this.taiwanAirports];\n      \n      // 加載所有航空公司數據\n      const airlinesResponse = await axios.get('http://localhost:5000/api/airlines');\n      this.airlines = airlinesResponse.data;\n      console.log('[DEBUG] 航空公司數據載入成功:', this.airlines);\n    } catch (error) {\n      console.error('[ERROR] 初始數據加載失敗:', error);\n      this.errorMessage = '載入初始數據時出錯，請重新整理頁面。';\n      await this.loadPopularAirports(); // 如果API失敗，嘗試加載本地數據\n    } finally {\n      this.isLoading = false;\n    }\n  },\n  methods: {\n    // 修改後的方法：根據選擇的出發機場從API獲取可直飛的目的地\n    async filterDestinations() {\n      console.log('[DEBUG] 根據出發機場獲取目的地，當前出發機場:', this.departureAirport);\n      this.directFlightDestinations = [];\n      this.destinationAirport = '';\n      this.selectedAirline = '';\n      this.availableAirlines = [];\n      \n      if (!this.departureAirport) {\n        return;\n      }\n      \n      // 從API獲取可直飛的目的地\n      this.isLoadingDestinations = true;\n      try {\n        const response = await axios.get(`http://localhost:5000/api/destinations?departure=${this.departureAirport}`);\n        this.directFlightDestinations = response.data;\n        console.log('[DEBUG] 從API獲取的目的地機場:', this.directFlightDestinations);\n      } catch (error) {\n        console.error('[ERROR] 獲取目的地機場失敗:', error);\n        this.errorMessage = '無法獲取目的地機場資訊，請稍後再試。';\n      } finally {\n        this.isLoadingDestinations = false;\n      }\n    },\n    \n    // 新增方法：根據出發地和目的地獲取可用航空公司\n    async filterAirlines() {\n      console.log('[DEBUG] 獲取可用航空公司，出發地:', this.departureAirport, '目的地:', this.destinationAirport);\n      this.availableAirlines = [];\n      this.selectedAirline = '';\n      \n      if (!this.departureAirport || !this.destinationAirport) {\n        return;\n      }\n      \n      // 從API獲取該航線的可用航空公司\n      this.isLoadingAirlines = true;\n      try {\n        const response = await axios.get(`http://localhost:5000/api/airlines?departure=${this.departureAirport}&destination=${this.destinationAirport}`);\n        this.availableAirlines = response.data;\n        console.log('[DEBUG] 從API獲取的航空公司:', this.availableAirlines);\n      } catch (error) {\n        console.error('[ERROR] 獲取航空公司失敗:', error);\n        this.errorMessage = '無法獲取航空公司資訊，請稍後再試。';\n      } finally {\n        this.isLoadingAirlines = false;\n      }\n    },\n    \n    async fetchInitialData() {\n      this.isLoading = true;\n      \n      // 1. 獲取機場詳細資料，包含城市資訊\n      axios.get('http://localhost:5000/api/airports/details')\n        .then(response => {\n          this.airportData = response.data;\n          this.organizeAirportsByCountry();\n          console.log('機場詳細資料載入成功:', this.airportData.length);\n          this.isLoading = false;\n        })\n        .catch(error => {\n          console.error('無法獲取機場資料:', error);\n          this.isLoading = false;\n        });\n        \n      // 2. 獲取可用路線\n      axios.get('http://localhost:5000/api/routes')\n        .then(response => {\n          this.availableRoutes = response.data;\n          console.log('可用路線載入成功:', this.availableRoutes.length);\n        })\n        .catch(error => {\n          console.error('無法獲取路線資料:', error);\n        });\n    },\n    \n    processAirportsData(airportsData) {\n      // 只有在API請求失敗或沒有返回城市資訊時才使用這個備用資料\n      // 預設的機場資訊（含城市和國家）\n      const airportInfo = {\n        // 台灣機場\n        'TPE': { city_zh: '桃園', country: 'TW', country_name: '台灣' },\n        'TSA': { city_zh: '臺北', country: 'TW', country_name: '台灣' },\n        'KHH': { city_zh: '高雄', country: 'TW', country_name: '台灣' },\n        'RMQ': { city_zh: '台中', country: 'TW', country_name: '台灣' },\n        'TTT': { city_zh: '臺東', country: 'TW', country_name: '台灣' },\n        'KYD': { city_zh: '臺東', country: 'TW', country_name: '台灣' },\n        'KNH': { city_zh: '金門', country: 'TW', country_name: '台灣' },\n        'MZG': { city_zh: '澎湖', country: 'TW', country_name: '台灣' },\n        'HUN': { city_zh: '花蓮', country: 'TW', country_name: '台灣' },\n        'GNI': { city_zh: '臺東', country: 'TW', country_name: '台灣' },\n        'MFK': { city_zh: '連江', country: 'TW', country_name: '台灣' },\n        'LZN': { city_zh: '連江', country: 'TW', country_name: '台灣' },\n        'TNN': { city_zh: '台南', country: 'TW', country_name: '台灣' },\n        'CMJ': { city_zh: '澎湖', country: 'TW', country_name: '台灣' },\n        'WOT': { city_zh: '澎湖', country: 'TW', country_name: '台灣' },\n        \n        // 日本機場\n        'HND': { city_zh: '東京', country: 'JP', country_name: '日本' },\n        'NRT': { city_zh: '東京', country: 'JP', country_name: '日本' },\n        'KIX': { city_zh: '大阪', country: 'JP', country_name: '日本' },\n        'FUK': { city_zh: '福岡', country: 'JP', country_name: '日本' },\n        'CTS': { city_zh: '札幌', country: 'JP', country_name: '日本' },\n        'NGO': { city_zh: '名古屋', country: 'JP', country_name: '日本' },\n        'OKA': { city_zh: '沖繩', country: 'JP', country_name: '日本' },\n        \n        // 亞洲其他熱門機場\n        'HKG': { city_zh: '香港', country: 'HK', country_name: '香港' },\n        'ICN': { city_zh: '首爾', country: 'KR', country_name: '韓國' },\n        'GMP': { city_zh: '首爾', country: 'KR', country_name: '韓國' },\n        'PVG': { city_zh: '上海', country: 'CN', country_name: '中國大陸' },\n        'PEK': { city_zh: '北京', country: 'CN', country_name: '中國大陸' },\n        'SIN': { city_zh: '新加坡', country: 'SG', country_name: '新加坡' },\n        'BKK': { city_zh: '曼谷', country: 'TH', country_name: '泰國' },\n        'MNL': { city_zh: '馬尼拉', country: 'PH', country_name: '菲律賓' }\n      };\n      \n      // 檢查airportsData是否已經包含完整資訊\n      if (Array.isArray(airportsData) && airportsData.length > 0 && \n          typeof airportsData[0] === 'object' && airportsData[0].city_zh) {\n        // 如果已經有完整資訊，直接使用\n        this.airports = airportsData;\n        return;\n      }\n      \n      // 擴展機場數據\n      this.airports = airportsData.map(airport => {\n        // 如果是簡單字串，轉換為物件\n        let code = typeof airport === 'string' ? airport : airport.code;\n        \n        const info = airportInfo[code] || { \n          city_zh: '未知城市', \n          country: 'XX', \n          country_name: '未知國家' \n        };\n        \n        // 如果已經是物件且有city_zh屬性，使用現有的，否則使用默認值\n        return typeof airport === 'string' ? {\n          code,\n          name: `${code} 機場`,\n          city: info.city_zh,\n          country: info.country,\n          country_name: info.country_name\n        } : {\n          ...airport,\n          city: airport.city_zh || info.city_zh,\n          country: airport.country || info.country,\n          country_name: airport.country_name || info.country_name\n        };\n      });\n      \n      // 將機場按國家分類\n      this.organizeAirportsByCountry();\n    },\n    \n    organizeAirportsByCountry() {\n      // 清空現有資料\n      this.airportsByCountry = {};\n      \n      // 按國家組織機場\n      this.airportData.forEach(airport => {\n        const countryCode = airport.country || 'XX';\n        \n        if (!this.airportsByCountry[countryCode]) {\n          this.airportsByCountry[countryCode] = [];\n        }\n        \n        this.airportsByCountry[countryCode].push({\n          code: airport.code,\n          name: airport.name,\n          city: airport.city_zh || '未知城市',\n          country: countryCode,\n          country_name: airport.country_name || '未知國家'\n        });\n      });\n      \n      // 初始化台灣機場列表\n      this.filterTaiwanAirports();\n    },\n    \n    filterTaiwanAirports() {\n      // 篩選出台灣的機場\n      this.taiwanAirports = this.airportData.filter(airport => airport.country === 'TW');\n    },\n    \n    async loadPopularAirports() {\n      console.log('[DEBUG] 加載熱門機場數據...');\n      try {\n        // 嘗試讀取熱門機場配置文件\n        const response = await fetch('/config/airlines_airports.json');\n        if (!response.ok) {\n          throw new Error('無法獲取熱門機場數據');\n        }\n        \n        const data = await response.json();\n        console.log('[DEBUG] 熱門機場配置數據:', data);\n        \n        // 處理機場數據\n        if (data && data.airports && Array.isArray(data.airports)) {\n          this.popularAirports = data.airports;\n          console.log('[DEBUG] 已加載熱門機場數量:', this.popularAirports.length);\n          \n          // 機場數據處理：優先使用API數據，如果API無數據則使用熱門機場列表\n          if (this.airports.length === 0 && this.popularAirports.length > 0) {\n            console.log('[DEBUG] API沒有返回機場數據，使用熱門機場數據...');\n            \n            // 為熱門機場創建下拉選單所需的格式\n            const airportNames = {\n              // 台灣機場\n              'TPE': '台灣桃園國際機場',\n              'TSA': '台北松山機場',\n              'KHH': '高雄國際機場',\n              'RMQ': '台中國際機場',\n              'TTT': '台東機場',\n              'KYD': '蘭嶼機場',\n              'KNH': '金門機場',\n              'MZG': '馬公機場',\n              'HUN': '花蓮機場',\n              'GNI': '綠島機場',\n              'MFK': '馬祖北竿機場',\n              'LZN': '馬祖南竿機場',\n              'TNN': '台南機場',\n              'CMJ': '七美機場',\n              'WOT': '望安機場',\n              \n              // 日本熱門機場\n              'HND': '東京羽田機場',\n              'NRT': '東京成田國際機場',\n              'KIX': '大阪關西國際機場',\n              'FUK': '福岡機場',\n              'CTS': '札幌新千歲機場',\n              'NGO': '名古屋中部國際機場',\n              'OKA': '沖繩那霸機場',\n              \n              // 亞洲其他熱門機場\n              'HKG': '香港國際機場',\n              'ICN': '首爾仁川國際機場',\n              'GMP': '首爾金浦國際機場',\n              'PVG': '上海浦東國際機場',\n              'PEK': '北京首都國際機場',\n              'SIN': '新加坡樟宜機場',\n              'BKK': '曼谷素萬那普機場',\n              'MNL': '馬尼拉國際機場'\n            };\n            \n            const cityInfo = {\n              'TPE': '桃園',\n              'TSA': '臺北',\n              'KHH': '高雄',\n              'RMQ': '台中',\n              'TTT': '臺東',\n              'KYD': '臺東',\n              'KNH': '金門',\n              'MZG': '澎湖',\n              'HUN': '花蓮',\n              'GNI': '臺東',\n              'MFK': '連江',\n              'LZN': '連江',\n              'TNN': '台南',\n              'CMJ': '澎湖',\n              'WOT': '澎湖',\n              \n              'HND': '東京',\n              'NRT': '東京',\n              'KIX': '大阪',\n              'FUK': '福岡',\n              'CTS': '札幌',\n              'NGO': '名古屋',\n              'OKA': '沖繩',\n              \n              'HKG': '香港',\n              'ICN': '首爾',\n              'GMP': '首爾',\n              'PVG': '上海',\n              'PEK': '北京',\n              'SIN': '新加坡',\n              'BKK': '曼谷',\n              'MNL': '馬尼拉'\n            };\n            \n            const countryInfo = {\n              'TPE': 'TW',\n              'TSA': 'TW',\n              'KHH': 'TW',\n              'RMQ': 'TW',\n              'TTT': 'TW',\n              'KYD': 'TW',\n              'KNH': 'TW',\n              'MZG': 'TW',\n              'HUN': 'TW',\n              'GNI': 'TW',\n              'MFK': 'TW',\n              'LZN': 'TW',\n              'TNN': 'TW',\n              'CMJ': 'TW',\n              'WOT': 'TW',\n              \n              'HND': 'JP',\n              'NRT': 'JP',\n              'KIX': 'JP',\n              'FUK': 'JP',\n              'CTS': 'JP',\n              'NGO': 'JP',\n              'OKA': 'JP',\n              \n              'HKG': 'HK',\n              'ICN': 'KR',\n              'GMP': 'KR',\n              'PVG': 'CN',\n              'PEK': 'CN',\n              'SIN': 'SG',\n              'BKK': 'TH',\n              'MNL': 'PH'\n            };\n            \n            // 將熱門機場代碼轉換為標準格式，含名稱、城市和國家\n            this.airports = this.popularAirports.map(code => ({\n              code,\n              name: airportNames[code] || `${code} 機場`,\n              city: cityInfo[code] || '未知城市',\n              country: countryInfo[code] || 'XX'\n            }));\n            \n            console.log('[DEBUG] 轉換後的機場數據:', this.airports);\n            \n            // 初始化台灣機場列表\n            this.filterTaiwanAirports();\n          }\n        }\n        \n        // 處理航空公司數據\n        if (data && data.airlines && Array.isArray(data.airlines) && this.airlines.length === 0) {\n          console.log('[DEBUG] API沒有返回航空公司數據，使用配置文件數據...');\n          \n          // 為航空公司創建下拉選單所需的格式\n          const airlineNames = {\n            'CI': '中華航空',\n            'BR': '長榮航空',\n            'AE': '華信航空',\n            'B7': '立榮航空',\n            'JX': '星宇航空',\n            'DA': '德安航空',\n            'JL': '日本航空',\n            'CX': '國泰航空',\n            'OZ': '韓亞航空'\n          };\n          \n          // 將航空公司代碼轉換為標準格式，含名稱\n          this.airlines = data.airlines.map(id => ({\n            id,\n            name: airlineNames[id] || id\n          }));\n          \n          console.log('[DEBUG] 轉換後的航空公司數據:', this.airlines);\n        }\n      } catch (error) {\n        console.error('[ERROR] 無法載入熱門機場數據:', error);\n      }\n    },\n    \n    async searchFlights() {\n      this.isLoading = true;\n      this.searchComplete = true;\n      this.errorMessage = '';\n      \n      try {\n        // 調用API搜尋航班\n        const params = {\n          departure: this.departureAirport,\n          destination: this.destinationAirport,\n          date: this.flightDate\n        };\n        \n        // 只有選擇了航空公司時才加入航空公司參數\n        if (this.selectedAirline) {\n          params.airline = this.selectedAirline;\n        }\n        \n        const response = await axios.get('http://localhost:5000/api/flights', { params });\n        \n        this.flights = response.data;\n        console.log('[DEBUG] 搜尋結果:', this.flights);\n      } catch (error) {\n        console.error('搜尋航班時出錯:', error);\n        this.errorMessage = '搜尋過程中發生錯誤，請稍後再試';\n        this.flights = [];\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    resetForm() {\n      this.departureAirport = '';\n      this.destinationAirport = '';\n      this.flightDate = this.getTodayDate();\n      this.selectedAirline = '';\n      this.flights = [];\n      this.searchComplete = false;\n      this.directFlightDestinations = [];\n      this.availableAirlines = [];\n      this.errorMessage = '';\n    },\n    getTodayDate() {\n      return new Date().toISOString().split('T')[0];\n    },\n    getAirportName(code) {\n      if (!code) return '未知機場';\n      const airport = this.airports.find(a => a.code === code);\n      return airport ? airport.name : (this.airportNames[code] || `${code} 機場`);\n    },\n    getAirlineName(id) {\n      if (!id) return '未知航空公司';\n      const airline = this.airlines.find(a => a.id === id);\n      return airline ? airline.name : id;\n    },\n    formatDateTime(dateTimeStr) {\n      const date = new Date(dateTimeStr);\n      return `${date.toLocaleDateString()} ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;\n    },\n    getAirlineSummary() {\n      const summary = [];\n      const airlineCounts = {};\n      const airlineNames = {};\n\n      // 獲取所有航班中出現的航空公司，確保航班有效且airline_id存在\n      this.flights.forEach(flight => {\n        if (!flight || !flight.airline_id) return;\n        \n        const airlineId = flight.airline_id;\n        if (!airlineCounts[airlineId]) {\n          airlineCounts[airlineId] = 0;\n          // 保存航空公司名稱，確保使用有效的名稱\n          airlineNames[airlineId] = flight.airline_name || this.getAirlineName(airlineId) || `航空公司 ${airlineId}`;\n        }\n        airlineCounts[airlineId]++;\n      });\n\n      // 將統計數據轉換為數組\n      Object.keys(airlineCounts).forEach(id => {\n        if (id && airlineNames[id]) {\n          summary.push({\n            id,\n            name: airlineNames[id],\n            count: airlineCounts[id]\n          });\n        }\n      });\n\n      // 按照航班數量降序排序\n      return summary.sort((a, b) => b.count - a.count);\n    },\n    \n    // 計算航班數量的百分比\n    getPercentage(count) {\n      const total = this.flights.length;\n      return `${Math.round((count / total) * 100)}%`;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.flight-search {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 2rem;\n  color: #333;\n  font-family: 'Arial', sans-serif;\n}\n\n.header {\n  text-align: center;\n  margin-bottom: 2rem;\n}\n\n.header h1 {\n  font-size: 2.5rem;\n  margin-bottom: 0.5rem;\n  font-weight: 300;\n  letter-spacing: 1px;\n}\n\n.header p {\n  font-size: 1.2rem;\n  color: #666;\n}\n\n.search-container {\n  background-color: #f8f8f8;\n  border-radius: 8px;\n  padding: 2rem;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\n  margin-bottom: 2rem;\n}\n\n.search-form {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 1.5rem;\n}\n\n.form-group {\n  display: flex;\n  flex-direction: column;\n}\n\nlabel {\n  margin-bottom: 0.5rem;\n  font-weight: 500;\n  color: #555;\n}\n\nselect, input {\n  padding: 0.8rem;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 1rem;\n  background-color: white;\n  transition: border-color 0.3s;\n}\n\nselect:focus, input:focus {\n  border-color: #333;\n  outline: none;\n}\n\n.action-buttons {\n  display: flex;\n  gap: 1rem;\n  margin-top: 1.5rem;\n  grid-column: 1 / -1;\n}\n\nbutton {\n  padding: 0.8rem 1.5rem;\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  cursor: pointer;\n  transition: background-color 0.3s, transform 0.1s;\n}\n\nbutton:hover {\n  transform: translateY(-2px);\n}\n\n.search-button {\n  background-color: #333;\n  color: white;\n  flex: 2;\n}\n\n.search-button:hover {\n  background-color: #222;\n}\n\n.search-button:disabled {\n  background-color: #ccc;\n  cursor: not-allowed;\n  transform: none;\n}\n\n.reset-button {\n  background-color: #e6e6e6;\n  color: #333;\n  flex: 1;\n}\n\n.reset-button:hover {\n  background-color: #d9d9d9;\n}\n\n.error-message {\n  color: #d32f2f;\n  background-color: #ffebee;\n  padding: 0.8rem;\n  border-radius: 4px;\n  margin-top: 1rem;\n  text-align: center;\n  font-weight: 500;\n  grid-column: 1 / -1;\n}\n\n.search-results {\n  margin-top: 2rem;\n}\n\n.results-header {\n  text-align: center;\n  margin-bottom: 1.5rem;\n}\n\n.results-header h2 {\n  font-size: 1.8rem;\n  font-weight: 300;\n  margin-bottom: 0.5rem;\n}\n\n.loading {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 3rem 0;\n}\n\n.loader {\n  border: 4px solid #f3f3f3;\n  border-top: 4px solid #333;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  animation: spin 1s linear infinite;\n  margin-bottom: 1rem;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n.flights-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 1.5rem;\n}\n\n.airline-summary {\n  margin-bottom: 2rem;\n  background-color: #f8f8f8;\n  padding: 1.5rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n}\n\n.airline-summary h3 {\n  margin-bottom: 1rem;\n  font-size: 1.2rem;\n  color: #333;\n  font-weight: 500;\n}\n\n.airline-list {\n  list-style: none;\n  padding: 0;\n}\n\n.airline-item {\n  margin-bottom: 0.8rem;\n  padding: 0.8rem;\n  background-color: white;\n  border-radius: 4px;\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.04);\n  cursor: pointer;\n  transition: all 0.2s;\n}\n\n.airline-item:hover {\n  background-color: #f3f9ff;\n  transform: translateY(-2px);\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.08);\n}\n\n.airline-info {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 0.5rem;\n}\n\n.airline-name {\n  font-weight: 500;\n}\n\n.airline-count {\n  color: #666;\n}\n\n.airline-bar-container {\n  width: 100%;\n  background-color: #eee;\n  height: 6px;\n  border-radius: 3px;\n  overflow: hidden;\n}\n\n.airline-bar {\n  height: 100%;\n  background-color: #4CAF50;\n  border-radius: 3px;\n}\n\n.filter-note {\n  margin-top: 1rem;\n  font-size: 0.9rem;\n  color: #666;\n  text-align: center;\n  font-style: italic;\n}\n\n@media (max-width: 768px) {\n  .search-form {\n    grid-template-columns: 1fr;\n  }\n  \n  .flights-container {\n    grid-template-columns: 1fr;\n  }\n  \n  .flight-search {\n    padding: 1rem;\n  }\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}