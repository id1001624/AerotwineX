{"ast":null,"code":"import FlightCard from './FlightCard.vue';\nimport axios from 'axios';\nexport default {\n  name: 'FlightSearch',\n  components: {\n    FlightCard\n  },\n  data() {\n    return {\n      departureAirport: '',\n      destinationAirport: '',\n      flightDate: this.getTodayDate(),\n      selectedAirline: '',\n      airports: [],\n      airlines: [],\n      availableAirlines: [],\n      // 特定航線可用的航空公司\n      flights: [],\n      isLoading: false,\n      isLoadingDestinations: false,\n      isLoadingAirlines: false,\n      searchComplete: false,\n      errorMessage: '',\n      popularAirports: [],\n      airportsByCountry: {},\n      availableRoutes: [],\n      // 存儲可用的直飛航線\n      debugInfo: {\n        apiCallsStatus: {},\n        dataLoaded: false\n      },\n      taiwanAirports: [],\n      // 台灣機場列表\n      directFlightDestinations: [],\n      // 直飛目的地列表\n      airportData: [],\n      airportNames: {\n        'TPE': '台灣桃園國際機場',\n        'TSA': '台北松山機場',\n        'KHH': '高雄國際機場',\n        'RMQ': '台中國際機場',\n        'TTT': '台東機場',\n        'KYD': '蘭嶼機場',\n        'KNH': '金門機場',\n        'MZG': '馬公機場',\n        'HUN': '花蓮機場',\n        'GNI': '綠島機場',\n        'MFK': '馬祖北竿機場',\n        'LZN': '馬祖南竿機場',\n        'TNN': '台南機場',\n        'CMJ': '七美機場',\n        'WOT': '望安機場',\n        'HND': '東京羽田機場',\n        'NRT': '東京成田國際機場',\n        'KIX': '大阪關西國際機場',\n        'FUK': '福岡機場',\n        'CTS': '札幌新千歲機場',\n        'NGO': '名古屋中部國際機場',\n        'OKA': '沖繩那霸機場',\n        'HKG': '香港國際機場',\n        'ICN': '首爾仁川國際機場',\n        'GMP': '首爾金浦國際機場',\n        'PVG': '上海浦東國際機場',\n        'PEK': '北京首都國際機場',\n        'SIN': '新加坡樟宜機場',\n        'BKK': '曼谷素萬那普機場',\n        'MNL': '馬尼拉國際機場'\n      },\n      cityInfo: {\n        'TPE': '桃園',\n        'TSA': '臺北',\n        'KHH': '高雄',\n        'RMQ': '台中',\n        'TTT': '臺東',\n        'KYD': '臺東',\n        'KNH': '金門',\n        'MZG': '澎湖',\n        'HUN': '花蓮',\n        'GNI': '臺東',\n        'MFK': '連江',\n        'LZN': '連江',\n        'TNN': '台南',\n        'CMJ': '澎湖',\n        'WOT': '澎湖',\n        'HND': '東京',\n        'NRT': '東京',\n        'KIX': '大阪',\n        'FUK': '福岡',\n        'CTS': '札幌',\n        'NGO': '名古屋',\n        'OKA': '沖繩',\n        'HKG': '香港',\n        'ICN': '首爾',\n        'GMP': '首爾',\n        'PVG': '上海',\n        'PEK': '北京',\n        'SIN': '新加坡',\n        'BKK': '曼谷',\n        'MNL': '馬尼拉'\n      },\n      countryInfo: {\n        'TPE': 'TW',\n        'TSA': 'TW',\n        'KHH': 'TW',\n        'RMQ': 'TW',\n        'TTT': 'TW',\n        'KYD': 'TW',\n        'KNH': 'TW',\n        'MZG': 'TW',\n        'HUN': 'TW',\n        'GNI': 'TW',\n        'MFK': 'TW',\n        'LZN': 'TW',\n        'TNN': 'TW',\n        'CMJ': 'TW',\n        'WOT': 'TW',\n        'HND': 'JP',\n        'NRT': 'JP',\n        'KIX': 'JP',\n        'FUK': 'JP',\n        'CTS': 'JP',\n        'NGO': 'JP',\n        'OKA': 'JP',\n        'HKG': 'HK',\n        'ICN': 'KR',\n        'GMP': 'KR',\n        'PVG': 'CN',\n        'PEK': 'CN',\n        'SIN': 'SG',\n        'BKK': 'TH',\n        'MNL': 'PH'\n      }\n    };\n  },\n  computed: {\n    minDate() {\n      // 設定最小日期為今天\n      return this.getTodayDate();\n    },\n    maxDate() {\n      // 設定最大日期為一年後\n      const date = new Date();\n      date.setFullYear(date.getFullYear() + 1);\n      return date.toISOString().split('T')[0];\n    },\n    canSearch() {\n      // 不需要選擇航空公司也可以搜尋\n      return this.departureAirport && this.destinationAirport && this.flightDate;\n    }\n  },\n  watch: {\n    // 當目的地機場變更時，獲取可用航空公司\n    destinationAirport() {\n      if (this.destinationAirport) {\n        this.filterAirlines();\n      }\n    }\n  },\n  async mounted() {\n    console.log('[DEBUG] FlightSearch組件掛載...');\n    this.isLoading = true;\n    try {\n      // 加載台灣國內機場數據\n      const airportsResponse = await axios.get('http://localhost:5000/api/airports');\n      this.taiwanAirports = airportsResponse.data;\n      console.log('[DEBUG] 台灣機場數據載入成功:', this.taiwanAirports);\n\n      // 將台灣機場添加到機場清單中\n      this.airports = [...this.taiwanAirports];\n\n      // 加載所有航空公司數據\n      const airlinesResponse = await axios.get('http://localhost:5000/api/airlines');\n      this.airlines = airlinesResponse.data;\n      console.log('[DEBUG] 航空公司數據載入成功:', this.airlines);\n    } catch (error) {\n      console.error('[ERROR] 初始數據加載失敗:', error);\n      this.errorMessage = '載入初始數據時出錯，請重新整理頁面。';\n      await this.loadPopularAirports(); // 如果API失敗，嘗試加載本地數據\n    } finally {\n      this.isLoading = false;\n    }\n  },\n  methods: {\n    // 修改後的方法：根據選擇的出發機場從API獲取可直飛的目的地\n    async filterDestinations() {\n      console.log('[DEBUG] 根據出發機場獲取目的地，當前出發機場:', this.departureAirport);\n      this.directFlightDestinations = [];\n      this.destinationAirport = '';\n      this.selectedAirline = '';\n      this.availableAirlines = [];\n      if (!this.departureAirport) {\n        return;\n      }\n\n      // 從API獲取可直飛的目的地\n      this.isLoadingDestinations = true;\n      try {\n        const response = await axios.get(`http://localhost:5000/api/destinations?departure=${this.departureAirport}`);\n        this.directFlightDestinations = response.data;\n        console.log('[DEBUG] 從API獲取的目的地機場:', this.directFlightDestinations);\n      } catch (error) {\n        console.error('[ERROR] 獲取目的地機場失敗:', error);\n        this.errorMessage = '無法獲取目的地機場資訊，請稍後再試。';\n      } finally {\n        this.isLoadingDestinations = false;\n      }\n    },\n    // 新增方法：根據出發地和目的地獲取可用航空公司\n    async filterAirlines() {\n      console.log('[DEBUG] 獲取可用航空公司，出發地:', this.departureAirport, '目的地:', this.destinationAirport);\n      this.availableAirlines = [];\n      this.selectedAirline = '';\n      if (!this.departureAirport || !this.destinationAirport) {\n        return;\n      }\n\n      // 從API獲取該航線的可用航空公司\n      this.isLoadingAirlines = true;\n      try {\n        const response = await axios.get(`http://localhost:5000/api/airlines?departure=${this.departureAirport}&destination=${this.destinationAirport}`);\n        this.availableAirlines = response.data;\n        console.log('[DEBUG] 從API獲取的航空公司:', this.availableAirlines);\n      } catch (error) {\n        console.error('[ERROR] 獲取航空公司失敗:', error);\n        this.errorMessage = '無法獲取航空公司資訊，請稍後再試。';\n      } finally {\n        this.isLoadingAirlines = false;\n      }\n    },\n    async fetchInitialData() {\n      this.isLoading = true;\n\n      // 1. 獲取機場詳細資料，包含城市資訊\n      axios.get('http://localhost:5000/api/airports/details').then(response => {\n        this.airportData = response.data;\n        this.organizeAirportsByCountry();\n        console.log('機場詳細資料載入成功:', this.airportData.length);\n        this.isLoading = false;\n      }).catch(error => {\n        console.error('無法獲取機場資料:', error);\n        this.isLoading = false;\n      });\n\n      // 2. 獲取可用路線\n      axios.get('http://localhost:5000/api/routes').then(response => {\n        this.availableRoutes = response.data;\n        console.log('可用路線載入成功:', this.availableRoutes.length);\n      }).catch(error => {\n        console.error('無法獲取路線資料:', error);\n      });\n    },\n    processAirportsData(airportsData) {\n      // 只有在API請求失敗或沒有返回城市資訊時才使用這個備用資料\n      // 預設的機場資訊（含城市和國家）\n      const airportInfo = {\n        // 台灣機場\n        'TPE': {\n          city_zh: '桃園',\n          country: 'TW',\n          country_name: '台灣'\n        },\n        'TSA': {\n          city_zh: '臺北',\n          country: 'TW',\n          country_name: '台灣'\n        },\n        'KHH': {\n          city_zh: '高雄',\n          country: 'TW',\n          country_name: '台灣'\n        },\n        'RMQ': {\n          city_zh: '台中',\n          country: 'TW',\n          country_name: '台灣'\n        },\n        'TTT': {\n          city_zh: '臺東',\n          country: 'TW',\n          country_name: '台灣'\n        },\n        'KYD': {\n          city_zh: '臺東',\n          country: 'TW',\n          country_name: '台灣'\n        },\n        'KNH': {\n          city_zh: '金門',\n          country: 'TW',\n          country_name: '台灣'\n        },\n        'MZG': {\n          city_zh: '澎湖',\n          country: 'TW',\n          country_name: '台灣'\n        },\n        'HUN': {\n          city_zh: '花蓮',\n          country: 'TW',\n          country_name: '台灣'\n        },\n        'GNI': {\n          city_zh: '臺東',\n          country: 'TW',\n          country_name: '台灣'\n        },\n        'MFK': {\n          city_zh: '連江',\n          country: 'TW',\n          country_name: '台灣'\n        },\n        'LZN': {\n          city_zh: '連江',\n          country: 'TW',\n          country_name: '台灣'\n        },\n        'TNN': {\n          city_zh: '台南',\n          country: 'TW',\n          country_name: '台灣'\n        },\n        'CMJ': {\n          city_zh: '澎湖',\n          country: 'TW',\n          country_name: '台灣'\n        },\n        'WOT': {\n          city_zh: '澎湖',\n          country: 'TW',\n          country_name: '台灣'\n        },\n        // 日本機場\n        'HND': {\n          city_zh: '東京',\n          country: 'JP',\n          country_name: '日本'\n        },\n        'NRT': {\n          city_zh: '東京',\n          country: 'JP',\n          country_name: '日本'\n        },\n        'KIX': {\n          city_zh: '大阪',\n          country: 'JP',\n          country_name: '日本'\n        },\n        'FUK': {\n          city_zh: '福岡',\n          country: 'JP',\n          country_name: '日本'\n        },\n        'CTS': {\n          city_zh: '札幌',\n          country: 'JP',\n          country_name: '日本'\n        },\n        'NGO': {\n          city_zh: '名古屋',\n          country: 'JP',\n          country_name: '日本'\n        },\n        'OKA': {\n          city_zh: '沖繩',\n          country: 'JP',\n          country_name: '日本'\n        },\n        // 亞洲其他熱門機場\n        'HKG': {\n          city_zh: '香港',\n          country: 'HK',\n          country_name: '香港'\n        },\n        'ICN': {\n          city_zh: '首爾',\n          country: 'KR',\n          country_name: '韓國'\n        },\n        'GMP': {\n          city_zh: '首爾',\n          country: 'KR',\n          country_name: '韓國'\n        },\n        'PVG': {\n          city_zh: '上海',\n          country: 'CN',\n          country_name: '中國大陸'\n        },\n        'PEK': {\n          city_zh: '北京',\n          country: 'CN',\n          country_name: '中國大陸'\n        },\n        'SIN': {\n          city_zh: '新加坡',\n          country: 'SG',\n          country_name: '新加坡'\n        },\n        'BKK': {\n          city_zh: '曼谷',\n          country: 'TH',\n          country_name: '泰國'\n        },\n        'MNL': {\n          city_zh: '馬尼拉',\n          country: 'PH',\n          country_name: '菲律賓'\n        }\n      };\n\n      // 檢查airportsData是否已經包含完整資訊\n      if (Array.isArray(airportsData) && airportsData.length > 0 && typeof airportsData[0] === 'object' && airportsData[0].city_zh) {\n        // 如果已經有完整資訊，直接使用\n        this.airports = airportsData;\n        return;\n      }\n\n      // 擴展機場數據\n      this.airports = airportsData.map(airport => {\n        // 如果是簡單字串，轉換為物件\n        let code = typeof airport === 'string' ? airport : airport.code;\n        const info = airportInfo[code] || {\n          city_zh: '未知城市',\n          country: 'XX',\n          country_name: '未知國家'\n        };\n\n        // 如果已經是物件且有city_zh屬性，使用現有的，否則使用默認值\n        return typeof airport === 'string' ? {\n          code,\n          name: `${code} 機場`,\n          city: info.city_zh,\n          country: info.country,\n          country_name: info.country_name\n        } : {\n          ...airport,\n          city: airport.city_zh || info.city_zh,\n          country: airport.country || info.country,\n          country_name: airport.country_name || info.country_name\n        };\n      });\n\n      // 將機場按國家分類\n      this.organizeAirportsByCountry();\n    },\n    organizeAirportsByCountry() {\n      // 清空現有資料\n      this.airportsByCountry = {};\n\n      // 按國家組織機場\n      this.airportData.forEach(airport => {\n        const countryCode = airport.country || 'XX';\n        if (!this.airportsByCountry[countryCode]) {\n          this.airportsByCountry[countryCode] = [];\n        }\n        this.airportsByCountry[countryCode].push({\n          code: airport.code,\n          name: airport.name,\n          city: airport.city_zh || '未知城市',\n          country: countryCode,\n          country_name: airport.country_name || '未知國家'\n        });\n      });\n\n      // 初始化台灣機場列表\n      this.filterTaiwanAirports();\n    },\n    filterTaiwanAirports() {\n      // 篩選出台灣的機場\n      this.taiwanAirports = this.airportData.filter(airport => airport.country === 'TW');\n    },\n    async loadPopularAirports() {\n      console.log('[DEBUG] 加載熱門機場數據...');\n      try {\n        // 嘗試讀取熱門機場配置文件\n        const response = await fetch('/config/airlines_airports.json');\n        if (!response.ok) {\n          throw new Error('無法獲取熱門機場數據');\n        }\n        const data = await response.json();\n        console.log('[DEBUG] 熱門機場配置數據:', data);\n\n        // 處理機場數據\n        if (data && data.airports && Array.isArray(data.airports)) {\n          this.popularAirports = data.airports;\n          console.log('[DEBUG] 已加載熱門機場數量:', this.popularAirports.length);\n\n          // 機場數據處理：優先使用API數據，如果API無數據則使用熱門機場列表\n          if (this.airports.length === 0 && this.popularAirports.length > 0) {\n            console.log('[DEBUG] API沒有返回機場數據，使用熱門機場數據...');\n\n            // 為熱門機場創建下拉選單所需的格式\n            const airportNames = {\n              // 台灣機場\n              'TPE': '台灣桃園國際機場',\n              'TSA': '台北松山機場',\n              'KHH': '高雄國際機場',\n              'RMQ': '台中國際機場',\n              'TTT': '台東機場',\n              'KYD': '蘭嶼機場',\n              'KNH': '金門機場',\n              'MZG': '馬公機場',\n              'HUN': '花蓮機場',\n              'GNI': '綠島機場',\n              'MFK': '馬祖北竿機場',\n              'LZN': '馬祖南竿機場',\n              'TNN': '台南機場',\n              'CMJ': '七美機場',\n              'WOT': '望安機場',\n              // 日本熱門機場\n              'HND': '東京羽田機場',\n              'NRT': '東京成田國際機場',\n              'KIX': '大阪關西國際機場',\n              'FUK': '福岡機場',\n              'CTS': '札幌新千歲機場',\n              'NGO': '名古屋中部國際機場',\n              'OKA': '沖繩那霸機場',\n              // 亞洲其他熱門機場\n              'HKG': '香港國際機場',\n              'ICN': '首爾仁川國際機場',\n              'GMP': '首爾金浦國際機場',\n              'PVG': '上海浦東國際機場',\n              'PEK': '北京首都國際機場',\n              'SIN': '新加坡樟宜機場',\n              'BKK': '曼谷素萬那普機場',\n              'MNL': '馬尼拉國際機場'\n            };\n            const cityInfo = {\n              'TPE': '桃園',\n              'TSA': '臺北',\n              'KHH': '高雄',\n              'RMQ': '台中',\n              'TTT': '臺東',\n              'KYD': '臺東',\n              'KNH': '金門',\n              'MZG': '澎湖',\n              'HUN': '花蓮',\n              'GNI': '臺東',\n              'MFK': '連江',\n              'LZN': '連江',\n              'TNN': '台南',\n              'CMJ': '澎湖',\n              'WOT': '澎湖',\n              'HND': '東京',\n              'NRT': '東京',\n              'KIX': '大阪',\n              'FUK': '福岡',\n              'CTS': '札幌',\n              'NGO': '名古屋',\n              'OKA': '沖繩',\n              'HKG': '香港',\n              'ICN': '首爾',\n              'GMP': '首爾',\n              'PVG': '上海',\n              'PEK': '北京',\n              'SIN': '新加坡',\n              'BKK': '曼谷',\n              'MNL': '馬尼拉'\n            };\n            const countryInfo = {\n              'TPE': 'TW',\n              'TSA': 'TW',\n              'KHH': 'TW',\n              'RMQ': 'TW',\n              'TTT': 'TW',\n              'KYD': 'TW',\n              'KNH': 'TW',\n              'MZG': 'TW',\n              'HUN': 'TW',\n              'GNI': 'TW',\n              'MFK': 'TW',\n              'LZN': 'TW',\n              'TNN': 'TW',\n              'CMJ': 'TW',\n              'WOT': 'TW',\n              'HND': 'JP',\n              'NRT': 'JP',\n              'KIX': 'JP',\n              'FUK': 'JP',\n              'CTS': 'JP',\n              'NGO': 'JP',\n              'OKA': 'JP',\n              'HKG': 'HK',\n              'ICN': 'KR',\n              'GMP': 'KR',\n              'PVG': 'CN',\n              'PEK': 'CN',\n              'SIN': 'SG',\n              'BKK': 'TH',\n              'MNL': 'PH'\n            };\n\n            // 將熱門機場代碼轉換為標準格式，含名稱、城市和國家\n            this.airports = this.popularAirports.map(code => ({\n              code,\n              name: airportNames[code] || `${code} 機場`,\n              city: cityInfo[code] || '未知城市',\n              country: countryInfo[code] || 'XX'\n            }));\n            console.log('[DEBUG] 轉換後的機場數據:', this.airports);\n\n            // 初始化台灣機場列表\n            this.filterTaiwanAirports();\n          }\n        }\n\n        // 處理航空公司數據\n        if (data && data.airlines && Array.isArray(data.airlines) && this.airlines.length === 0) {\n          console.log('[DEBUG] API沒有返回航空公司數據，使用配置文件數據...');\n\n          // 為航空公司創建下拉選單所需的格式\n          const airlineNames = {\n            'CI': '中華航空',\n            'BR': '長榮航空',\n            'AE': '華信航空',\n            'B7': '立榮航空',\n            'JX': '星宇航空',\n            'DA': '德安航空',\n            'JL': '日本航空',\n            'CX': '國泰航空',\n            'OZ': '韓亞航空'\n          };\n\n          // 將航空公司代碼轉換為標準格式，含名稱\n          this.airlines = data.airlines.map(id => ({\n            id,\n            name: airlineNames[id] || id\n          }));\n          console.log('[DEBUG] 轉換後的航空公司數據:', this.airlines);\n        }\n      } catch (error) {\n        console.error('[ERROR] 無法載入熱門機場數據:', error);\n      }\n    },\n    async searchFlights() {\n      this.isLoading = true;\n      this.searchComplete = true;\n      this.errorMessage = '';\n      try {\n        // 調用API搜尋航班\n        const params = {\n          departure: this.departureAirport,\n          destination: this.destinationAirport,\n          date: this.flightDate\n        };\n\n        // 只有選擇了航空公司時才加入航空公司參數\n        if (this.selectedAirline) {\n          params.airline = this.selectedAirline;\n        }\n        const response = await axios.get('http://localhost:5000/api/flights', {\n          params\n        });\n        this.flights = response.data;\n        console.log('[DEBUG] 搜尋結果:', this.flights);\n      } catch (error) {\n        console.error('搜尋航班時出錯:', error);\n        this.errorMessage = '搜尋過程中發生錯誤，請稍後再試';\n        this.flights = [];\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    resetForm() {\n      this.departureAirport = '';\n      this.destinationAirport = '';\n      this.flightDate = this.getTodayDate();\n      this.selectedAirline = '';\n      this.flights = [];\n      this.searchComplete = false;\n      this.directFlightDestinations = [];\n      this.availableAirlines = [];\n      this.errorMessage = '';\n    },\n    getTodayDate() {\n      return new Date().toISOString().split('T')[0];\n    },\n    getAirportName(code) {\n      const airport = this.airports.find(a => a.code === code);\n      return airport ? airport.name : code;\n    },\n    getAirlineName(id) {\n      const airline = this.airlines.find(a => a.id === id);\n      return airline ? airline.name : id;\n    },\n    formatDateTime(dateTimeStr) {\n      const date = new Date(dateTimeStr);\n      return `${date.toLocaleDateString()} ${date.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      })}`;\n    }\n  }\n};","map":{"version":3,"names":["FlightCard","axios","name","components","data","departureAirport","destinationAirport","flightDate","getTodayDate","selectedAirline","airports","airlines","availableAirlines","flights","isLoading","isLoadingDestinations","isLoadingAirlines","searchComplete","errorMessage","popularAirports","airportsByCountry","availableRoutes","debugInfo","apiCallsStatus","dataLoaded","taiwanAirports","directFlightDestinations","airportData","airportNames","cityInfo","countryInfo","computed","minDate","maxDate","date","Date","setFullYear","getFullYear","toISOString","split","canSearch","watch","filterAirlines","mounted","console","log","airportsResponse","get","airlinesResponse","error","loadPopularAirports","methods","filterDestinations","response","fetchInitialData","then","organizeAirportsByCountry","length","catch","processAirportsData","airportsData","airportInfo","city_zh","country","country_name","Array","isArray","map","airport","code","info","city","forEach","countryCode","push","filterTaiwanAirports","filter","fetch","ok","Error","json","airlineNames","id","searchFlights","params","departure","destination","airline","resetForm","getAirportName","find","a","getAirlineName","formatDateTime","dateTimeStr","toLocaleDateString","toLocaleTimeString","hour","minute"],"sources":["C:\\Users\\Aliothouo\\OneDrive\\文件\\學校\\AlphaVision\\AerotwineX\\frontend\\src\\components\\FlightSearch.vue"],"sourcesContent":["<template>\n  <div class=\"flight-search\">\n    <div class=\"header\">\n      <h1>AerotwineX 航班查詢</h1>\n      <p>簡單、快速地查詢您的航班</p>\n    </div>\n    \n    <div class=\"search-container\">\n      <div class=\"search-form\">\n        <div class=\"form-group\">\n          <label>出發地</label>\n          <select v-model=\"departureAirport\" @change=\"filterDestinations\">\n            <option value=\"\">請選擇出發機場</option>\n            <option v-for=\"airport in taiwanAirports\" :key=\"airport.code\" :value=\"airport.code\">\n              {{ airport.city }} - {{ airport.name }} ({{ airport.code }})\n            </option>\n          </select>\n        </div>\n        \n        <div class=\"form-group\">\n          <label>目的地機場</label>\n          <select v-model=\"destinationAirport\" :disabled=\"!departureAirport || isLoadingDestinations\">\n            <option value=\"\">{{ isLoadingDestinations ? '載入中...' : '請選擇目的地機場' }}</option>\n            <option v-for=\"airport in directFlightDestinations\" :key=\"airport.code\" :value=\"airport.code\">\n              {{ airport.city || '未知城市' }} - {{ airport.name }} ({{ airport.code }})\n            </option>\n          </select>\n        </div>\n        \n        <div class=\"form-group\">\n          <label>日期</label>\n          <input type=\"date\" v-model=\"flightDate\" :min=\"minDate\" :max=\"maxDate\">\n        </div>\n        \n        <div class=\"form-group\">\n          <label>航空公司</label>\n          <select v-model=\"selectedAirline\" :disabled=\"!departureAirport || !destinationAirport || isLoadingAirlines\">\n            <option value=\"\">{{ isLoadingAirlines ? '載入中...' : '請選擇航空公司' }}</option>\n            <option v-for=\"airline in availableAirlines\" :key=\"airline.id\" :value=\"airline.id\">\n              {{ airline.name }}\n            </option>\n          </select>\n        </div>\n        \n        <div class=\"action-buttons\">\n          <button class=\"search-button\" @click=\"searchFlights\" :disabled=\"!canSearch\">\n            搜尋航班\n          </button>\n          <button class=\"reset-button\" @click=\"resetForm\">\n            重設\n          </button>\n        </div>\n        \n        <div v-if=\"errorMessage\" class=\"error-message\">\n          {{ errorMessage }}\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"search-results\" v-if=\"searchComplete\">\n      <div v-if=\"isLoading\" class=\"loading\">\n        <div class=\"loader\"></div>\n        <p>搜尋中，請稍候...</p>\n      </div>\n      \n      <div v-else>\n        <div class=\"results-header\">\n          <h2>搜尋結果</h2>\n          <p v-if=\"flights.length === 0\">沒有找到符合條件的航班</p>\n          <p v-else>找到 {{ flights.length }} 個符合條件的航班</p>\n        </div>\n        \n        <div class=\"flights-container\" v-if=\"flights.length > 0\">\n          <flight-card \n            v-for=\"flight in flights\" \n            :key=\"`${flight.flight_number}-${flight.scheduled_departure}`\" \n            :flight=\"flight\"\n            :departureAirportName=\"getAirportName(flight.departure_airport_code)\"\n            :arrivalAirportName=\"getAirportName(flight.arrival_airport_code)\"\n            :airlineName=\"getAirlineName(flight.airline_id)\"\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport FlightCard from './FlightCard.vue';\nimport axios from 'axios';\n\nexport default {\n  name: 'FlightSearch',\n  components: {\n    FlightCard\n  },\n  data() {\n    return {\n      departureAirport: '',\n      destinationAirport: '',\n      flightDate: this.getTodayDate(),\n      selectedAirline: '',\n      airports: [],\n      airlines: [],\n      availableAirlines: [], // 特定航線可用的航空公司\n      flights: [],\n      isLoading: false,\n      isLoadingDestinations: false,\n      isLoadingAirlines: false,\n      searchComplete: false,\n      errorMessage: '',\n      popularAirports: [],\n      airportsByCountry: {},\n      availableRoutes: [], // 存儲可用的直飛航線\n      debugInfo: {\n        apiCallsStatus: {},\n        dataLoaded: false\n      },\n      taiwanAirports: [], // 台灣機場列表\n      directFlightDestinations: [], // 直飛目的地列表\n      airportData: [],\n      airportNames: {\n        'TPE': '台灣桃園國際機場',\n        'TSA': '台北松山機場',\n        'KHH': '高雄國際機場',\n        'RMQ': '台中國際機場',\n        'TTT': '台東機場',\n        'KYD': '蘭嶼機場',\n        'KNH': '金門機場',\n        'MZG': '馬公機場',\n        'HUN': '花蓮機場',\n        'GNI': '綠島機場',\n        'MFK': '馬祖北竿機場',\n        'LZN': '馬祖南竿機場',\n        'TNN': '台南機場',\n        'CMJ': '七美機場',\n        'WOT': '望安機場',\n        'HND': '東京羽田機場',\n        'NRT': '東京成田國際機場',\n        'KIX': '大阪關西國際機場',\n        'FUK': '福岡機場',\n        'CTS': '札幌新千歲機場',\n        'NGO': '名古屋中部國際機場',\n        'OKA': '沖繩那霸機場',\n        'HKG': '香港國際機場',\n        'ICN': '首爾仁川國際機場',\n        'GMP': '首爾金浦國際機場',\n        'PVG': '上海浦東國際機場',\n        'PEK': '北京首都國際機場',\n        'SIN': '新加坡樟宜機場',\n        'BKK': '曼谷素萬那普機場',\n        'MNL': '馬尼拉國際機場'\n      },\n      cityInfo: {\n        'TPE': '桃園',\n        'TSA': '臺北',\n        'KHH': '高雄',\n        'RMQ': '台中',\n        'TTT': '臺東',\n        'KYD': '臺東',\n        'KNH': '金門',\n        'MZG': '澎湖',\n        'HUN': '花蓮',\n        'GNI': '臺東',\n        'MFK': '連江',\n        'LZN': '連江',\n        'TNN': '台南',\n        'CMJ': '澎湖',\n        'WOT': '澎湖',\n        'HND': '東京',\n        'NRT': '東京',\n        'KIX': '大阪',\n        'FUK': '福岡',\n        'CTS': '札幌',\n        'NGO': '名古屋',\n        'OKA': '沖繩',\n        'HKG': '香港',\n        'ICN': '首爾',\n        'GMP': '首爾',\n        'PVG': '上海',\n        'PEK': '北京',\n        'SIN': '新加坡',\n        'BKK': '曼谷',\n        'MNL': '馬尼拉'\n      },\n      countryInfo: {\n        'TPE': 'TW',\n        'TSA': 'TW',\n        'KHH': 'TW',\n        'RMQ': 'TW',\n        'TTT': 'TW',\n        'KYD': 'TW',\n        'KNH': 'TW',\n        'MZG': 'TW',\n        'HUN': 'TW',\n        'GNI': 'TW',\n        'MFK': 'TW',\n        'LZN': 'TW',\n        'TNN': 'TW',\n        'CMJ': 'TW',\n        'WOT': 'TW',\n        'HND': 'JP',\n        'NRT': 'JP',\n        'KIX': 'JP',\n        'FUK': 'JP',\n        'CTS': 'JP',\n        'NGO': 'JP',\n        'OKA': 'JP',\n        'HKG': 'HK',\n        'ICN': 'KR',\n        'GMP': 'KR',\n        'PVG': 'CN',\n        'PEK': 'CN',\n        'SIN': 'SG',\n        'BKK': 'TH',\n        'MNL': 'PH'\n      }\n    };\n  },\n  computed: {\n    minDate() {\n      // 設定最小日期為今天\n      return this.getTodayDate();\n    },\n    maxDate() {\n      // 設定最大日期為一年後\n      const date = new Date();\n      date.setFullYear(date.getFullYear() + 1);\n      return date.toISOString().split('T')[0];\n    },\n    canSearch() {\n      // 不需要選擇航空公司也可以搜尋\n      return this.departureAirport && this.destinationAirport && this.flightDate;\n    }\n  },\n  \n  watch: {\n    // 當目的地機場變更時，獲取可用航空公司\n    destinationAirport() {\n      if (this.destinationAirport) {\n        this.filterAirlines();\n      }\n    }\n  },\n  async mounted() {\n    console.log('[DEBUG] FlightSearch組件掛載...');\n    this.isLoading = true;\n    \n    try {\n      // 加載台灣國內機場數據\n      const airportsResponse = await axios.get('http://localhost:5000/api/airports');\n      this.taiwanAirports = airportsResponse.data;\n      console.log('[DEBUG] 台灣機場數據載入成功:', this.taiwanAirports);\n      \n      // 將台灣機場添加到機場清單中\n      this.airports = [...this.taiwanAirports];\n      \n      // 加載所有航空公司數據\n      const airlinesResponse = await axios.get('http://localhost:5000/api/airlines');\n      this.airlines = airlinesResponse.data;\n      console.log('[DEBUG] 航空公司數據載入成功:', this.airlines);\n    } catch (error) {\n      console.error('[ERROR] 初始數據加載失敗:', error);\n      this.errorMessage = '載入初始數據時出錯，請重新整理頁面。';\n      await this.loadPopularAirports(); // 如果API失敗，嘗試加載本地數據\n    } finally {\n      this.isLoading = false;\n    }\n  },\n  methods: {\n    // 修改後的方法：根據選擇的出發機場從API獲取可直飛的目的地\n    async filterDestinations() {\n      console.log('[DEBUG] 根據出發機場獲取目的地，當前出發機場:', this.departureAirport);\n      this.directFlightDestinations = [];\n      this.destinationAirport = '';\n      this.selectedAirline = '';\n      this.availableAirlines = [];\n      \n      if (!this.departureAirport) {\n        return;\n      }\n      \n      // 從API獲取可直飛的目的地\n      this.isLoadingDestinations = true;\n      try {\n        const response = await axios.get(`http://localhost:5000/api/destinations?departure=${this.departureAirport}`);\n        this.directFlightDestinations = response.data;\n        console.log('[DEBUG] 從API獲取的目的地機場:', this.directFlightDestinations);\n      } catch (error) {\n        console.error('[ERROR] 獲取目的地機場失敗:', error);\n        this.errorMessage = '無法獲取目的地機場資訊，請稍後再試。';\n      } finally {\n        this.isLoadingDestinations = false;\n      }\n    },\n    \n    // 新增方法：根據出發地和目的地獲取可用航空公司\n    async filterAirlines() {\n      console.log('[DEBUG] 獲取可用航空公司，出發地:', this.departureAirport, '目的地:', this.destinationAirport);\n      this.availableAirlines = [];\n      this.selectedAirline = '';\n      \n      if (!this.departureAirport || !this.destinationAirport) {\n        return;\n      }\n      \n      // 從API獲取該航線的可用航空公司\n      this.isLoadingAirlines = true;\n      try {\n        const response = await axios.get(`http://localhost:5000/api/airlines?departure=${this.departureAirport}&destination=${this.destinationAirport}`);\n        this.availableAirlines = response.data;\n        console.log('[DEBUG] 從API獲取的航空公司:', this.availableAirlines);\n      } catch (error) {\n        console.error('[ERROR] 獲取航空公司失敗:', error);\n        this.errorMessage = '無法獲取航空公司資訊，請稍後再試。';\n      } finally {\n        this.isLoadingAirlines = false;\n      }\n    },\n    \n    async fetchInitialData() {\n      this.isLoading = true;\n      \n      // 1. 獲取機場詳細資料，包含城市資訊\n      axios.get('http://localhost:5000/api/airports/details')\n        .then(response => {\n          this.airportData = response.data;\n          this.organizeAirportsByCountry();\n          console.log('機場詳細資料載入成功:', this.airportData.length);\n          this.isLoading = false;\n        })\n        .catch(error => {\n          console.error('無法獲取機場資料:', error);\n          this.isLoading = false;\n        });\n        \n      // 2. 獲取可用路線\n      axios.get('http://localhost:5000/api/routes')\n        .then(response => {\n          this.availableRoutes = response.data;\n          console.log('可用路線載入成功:', this.availableRoutes.length);\n        })\n        .catch(error => {\n          console.error('無法獲取路線資料:', error);\n        });\n    },\n    \n    processAirportsData(airportsData) {\n      // 只有在API請求失敗或沒有返回城市資訊時才使用這個備用資料\n      // 預設的機場資訊（含城市和國家）\n      const airportInfo = {\n        // 台灣機場\n        'TPE': { city_zh: '桃園', country: 'TW', country_name: '台灣' },\n        'TSA': { city_zh: '臺北', country: 'TW', country_name: '台灣' },\n        'KHH': { city_zh: '高雄', country: 'TW', country_name: '台灣' },\n        'RMQ': { city_zh: '台中', country: 'TW', country_name: '台灣' },\n        'TTT': { city_zh: '臺東', country: 'TW', country_name: '台灣' },\n        'KYD': { city_zh: '臺東', country: 'TW', country_name: '台灣' },\n        'KNH': { city_zh: '金門', country: 'TW', country_name: '台灣' },\n        'MZG': { city_zh: '澎湖', country: 'TW', country_name: '台灣' },\n        'HUN': { city_zh: '花蓮', country: 'TW', country_name: '台灣' },\n        'GNI': { city_zh: '臺東', country: 'TW', country_name: '台灣' },\n        'MFK': { city_zh: '連江', country: 'TW', country_name: '台灣' },\n        'LZN': { city_zh: '連江', country: 'TW', country_name: '台灣' },\n        'TNN': { city_zh: '台南', country: 'TW', country_name: '台灣' },\n        'CMJ': { city_zh: '澎湖', country: 'TW', country_name: '台灣' },\n        'WOT': { city_zh: '澎湖', country: 'TW', country_name: '台灣' },\n        \n        // 日本機場\n        'HND': { city_zh: '東京', country: 'JP', country_name: '日本' },\n        'NRT': { city_zh: '東京', country: 'JP', country_name: '日本' },\n        'KIX': { city_zh: '大阪', country: 'JP', country_name: '日本' },\n        'FUK': { city_zh: '福岡', country: 'JP', country_name: '日本' },\n        'CTS': { city_zh: '札幌', country: 'JP', country_name: '日本' },\n        'NGO': { city_zh: '名古屋', country: 'JP', country_name: '日本' },\n        'OKA': { city_zh: '沖繩', country: 'JP', country_name: '日本' },\n        \n        // 亞洲其他熱門機場\n        'HKG': { city_zh: '香港', country: 'HK', country_name: '香港' },\n        'ICN': { city_zh: '首爾', country: 'KR', country_name: '韓國' },\n        'GMP': { city_zh: '首爾', country: 'KR', country_name: '韓國' },\n        'PVG': { city_zh: '上海', country: 'CN', country_name: '中國大陸' },\n        'PEK': { city_zh: '北京', country: 'CN', country_name: '中國大陸' },\n        'SIN': { city_zh: '新加坡', country: 'SG', country_name: '新加坡' },\n        'BKK': { city_zh: '曼谷', country: 'TH', country_name: '泰國' },\n        'MNL': { city_zh: '馬尼拉', country: 'PH', country_name: '菲律賓' }\n      };\n      \n      // 檢查airportsData是否已經包含完整資訊\n      if (Array.isArray(airportsData) && airportsData.length > 0 && \n          typeof airportsData[0] === 'object' && airportsData[0].city_zh) {\n        // 如果已經有完整資訊，直接使用\n        this.airports = airportsData;\n        return;\n      }\n      \n      // 擴展機場數據\n      this.airports = airportsData.map(airport => {\n        // 如果是簡單字串，轉換為物件\n        let code = typeof airport === 'string' ? airport : airport.code;\n        \n        const info = airportInfo[code] || { \n          city_zh: '未知城市', \n          country: 'XX', \n          country_name: '未知國家' \n        };\n        \n        // 如果已經是物件且有city_zh屬性，使用現有的，否則使用默認值\n        return typeof airport === 'string' ? {\n          code,\n          name: `${code} 機場`,\n          city: info.city_zh,\n          country: info.country,\n          country_name: info.country_name\n        } : {\n          ...airport,\n          city: airport.city_zh || info.city_zh,\n          country: airport.country || info.country,\n          country_name: airport.country_name || info.country_name\n        };\n      });\n      \n      // 將機場按國家分類\n      this.organizeAirportsByCountry();\n    },\n    \n    organizeAirportsByCountry() {\n      // 清空現有資料\n      this.airportsByCountry = {};\n      \n      // 按國家組織機場\n      this.airportData.forEach(airport => {\n        const countryCode = airport.country || 'XX';\n        \n        if (!this.airportsByCountry[countryCode]) {\n          this.airportsByCountry[countryCode] = [];\n        }\n        \n        this.airportsByCountry[countryCode].push({\n          code: airport.code,\n          name: airport.name,\n          city: airport.city_zh || '未知城市',\n          country: countryCode,\n          country_name: airport.country_name || '未知國家'\n        });\n      });\n      \n      // 初始化台灣機場列表\n      this.filterTaiwanAirports();\n    },\n    \n    filterTaiwanAirports() {\n      // 篩選出台灣的機場\n      this.taiwanAirports = this.airportData.filter(airport => airport.country === 'TW');\n    },\n    \n    async loadPopularAirports() {\n      console.log('[DEBUG] 加載熱門機場數據...');\n      try {\n        // 嘗試讀取熱門機場配置文件\n        const response = await fetch('/config/airlines_airports.json');\n        if (!response.ok) {\n          throw new Error('無法獲取熱門機場數據');\n        }\n        \n        const data = await response.json();\n        console.log('[DEBUG] 熱門機場配置數據:', data);\n        \n        // 處理機場數據\n        if (data && data.airports && Array.isArray(data.airports)) {\n          this.popularAirports = data.airports;\n          console.log('[DEBUG] 已加載熱門機場數量:', this.popularAirports.length);\n          \n          // 機場數據處理：優先使用API數據，如果API無數據則使用熱門機場列表\n          if (this.airports.length === 0 && this.popularAirports.length > 0) {\n            console.log('[DEBUG] API沒有返回機場數據，使用熱門機場數據...');\n            \n            // 為熱門機場創建下拉選單所需的格式\n            const airportNames = {\n              // 台灣機場\n              'TPE': '台灣桃園國際機場',\n              'TSA': '台北松山機場',\n              'KHH': '高雄國際機場',\n              'RMQ': '台中國際機場',\n              'TTT': '台東機場',\n              'KYD': '蘭嶼機場',\n              'KNH': '金門機場',\n              'MZG': '馬公機場',\n              'HUN': '花蓮機場',\n              'GNI': '綠島機場',\n              'MFK': '馬祖北竿機場',\n              'LZN': '馬祖南竿機場',\n              'TNN': '台南機場',\n              'CMJ': '七美機場',\n              'WOT': '望安機場',\n              \n              // 日本熱門機場\n              'HND': '東京羽田機場',\n              'NRT': '東京成田國際機場',\n              'KIX': '大阪關西國際機場',\n              'FUK': '福岡機場',\n              'CTS': '札幌新千歲機場',\n              'NGO': '名古屋中部國際機場',\n              'OKA': '沖繩那霸機場',\n              \n              // 亞洲其他熱門機場\n              'HKG': '香港國際機場',\n              'ICN': '首爾仁川國際機場',\n              'GMP': '首爾金浦國際機場',\n              'PVG': '上海浦東國際機場',\n              'PEK': '北京首都國際機場',\n              'SIN': '新加坡樟宜機場',\n              'BKK': '曼谷素萬那普機場',\n              'MNL': '馬尼拉國際機場'\n            };\n            \n            const cityInfo = {\n              'TPE': '桃園',\n              'TSA': '臺北',\n              'KHH': '高雄',\n              'RMQ': '台中',\n              'TTT': '臺東',\n              'KYD': '臺東',\n              'KNH': '金門',\n              'MZG': '澎湖',\n              'HUN': '花蓮',\n              'GNI': '臺東',\n              'MFK': '連江',\n              'LZN': '連江',\n              'TNN': '台南',\n              'CMJ': '澎湖',\n              'WOT': '澎湖',\n              \n              'HND': '東京',\n              'NRT': '東京',\n              'KIX': '大阪',\n              'FUK': '福岡',\n              'CTS': '札幌',\n              'NGO': '名古屋',\n              'OKA': '沖繩',\n              \n              'HKG': '香港',\n              'ICN': '首爾',\n              'GMP': '首爾',\n              'PVG': '上海',\n              'PEK': '北京',\n              'SIN': '新加坡',\n              'BKK': '曼谷',\n              'MNL': '馬尼拉'\n            };\n            \n            const countryInfo = {\n              'TPE': 'TW',\n              'TSA': 'TW',\n              'KHH': 'TW',\n              'RMQ': 'TW',\n              'TTT': 'TW',\n              'KYD': 'TW',\n              'KNH': 'TW',\n              'MZG': 'TW',\n              'HUN': 'TW',\n              'GNI': 'TW',\n              'MFK': 'TW',\n              'LZN': 'TW',\n              'TNN': 'TW',\n              'CMJ': 'TW',\n              'WOT': 'TW',\n              \n              'HND': 'JP',\n              'NRT': 'JP',\n              'KIX': 'JP',\n              'FUK': 'JP',\n              'CTS': 'JP',\n              'NGO': 'JP',\n              'OKA': 'JP',\n              \n              'HKG': 'HK',\n              'ICN': 'KR',\n              'GMP': 'KR',\n              'PVG': 'CN',\n              'PEK': 'CN',\n              'SIN': 'SG',\n              'BKK': 'TH',\n              'MNL': 'PH'\n            };\n            \n            // 將熱門機場代碼轉換為標準格式，含名稱、城市和國家\n            this.airports = this.popularAirports.map(code => ({\n              code,\n              name: airportNames[code] || `${code} 機場`,\n              city: cityInfo[code] || '未知城市',\n              country: countryInfo[code] || 'XX'\n            }));\n            \n            console.log('[DEBUG] 轉換後的機場數據:', this.airports);\n            \n            // 初始化台灣機場列表\n            this.filterTaiwanAirports();\n          }\n        }\n        \n        // 處理航空公司數據\n        if (data && data.airlines && Array.isArray(data.airlines) && this.airlines.length === 0) {\n          console.log('[DEBUG] API沒有返回航空公司數據，使用配置文件數據...');\n          \n          // 為航空公司創建下拉選單所需的格式\n          const airlineNames = {\n            'CI': '中華航空',\n            'BR': '長榮航空',\n            'AE': '華信航空',\n            'B7': '立榮航空',\n            'JX': '星宇航空',\n            'DA': '德安航空',\n            'JL': '日本航空',\n            'CX': '國泰航空',\n            'OZ': '韓亞航空'\n          };\n          \n          // 將航空公司代碼轉換為標準格式，含名稱\n          this.airlines = data.airlines.map(id => ({\n            id,\n            name: airlineNames[id] || id\n          }));\n          \n          console.log('[DEBUG] 轉換後的航空公司數據:', this.airlines);\n        }\n      } catch (error) {\n        console.error('[ERROR] 無法載入熱門機場數據:', error);\n      }\n    },\n    \n    async searchFlights() {\n      this.isLoading = true;\n      this.searchComplete = true;\n      this.errorMessage = '';\n      \n      try {\n        // 調用API搜尋航班\n        const params = {\n          departure: this.departureAirport,\n          destination: this.destinationAirport,\n          date: this.flightDate\n        };\n        \n        // 只有選擇了航空公司時才加入航空公司參數\n        if (this.selectedAirline) {\n          params.airline = this.selectedAirline;\n        }\n        \n        const response = await axios.get('http://localhost:5000/api/flights', { params });\n        \n        this.flights = response.data;\n        console.log('[DEBUG] 搜尋結果:', this.flights);\n      } catch (error) {\n        console.error('搜尋航班時出錯:', error);\n        this.errorMessage = '搜尋過程中發生錯誤，請稍後再試';\n        this.flights = [];\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    resetForm() {\n      this.departureAirport = '';\n      this.destinationAirport = '';\n      this.flightDate = this.getTodayDate();\n      this.selectedAirline = '';\n      this.flights = [];\n      this.searchComplete = false;\n      this.directFlightDestinations = [];\n      this.availableAirlines = [];\n      this.errorMessage = '';\n    },\n    getTodayDate() {\n      return new Date().toISOString().split('T')[0];\n    },\n    getAirportName(code) {\n      const airport = this.airports.find(a => a.code === code);\n      return airport ? airport.name : code;\n    },\n    getAirlineName(id) {\n      const airline = this.airlines.find(a => a.id === id);\n      return airline ? airline.name : id;\n    },\n    formatDateTime(dateTimeStr) {\n      const date = new Date(dateTimeStr);\n      return `${date.toLocaleDateString()} ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.flight-search {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 2rem;\n  color: #333;\n  font-family: 'Arial', sans-serif;\n}\n\n.header {\n  text-align: center;\n  margin-bottom: 2rem;\n}\n\n.header h1 {\n  font-size: 2.5rem;\n  margin-bottom: 0.5rem;\n  font-weight: 300;\n  letter-spacing: 1px;\n}\n\n.header p {\n  font-size: 1.2rem;\n  color: #666;\n}\n\n.search-container {\n  background-color: #f8f8f8;\n  border-radius: 8px;\n  padding: 2rem;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\n  margin-bottom: 2rem;\n}\n\n.search-form {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 1.5rem;\n}\n\n.form-group {\n  display: flex;\n  flex-direction: column;\n}\n\nlabel {\n  margin-bottom: 0.5rem;\n  font-weight: 500;\n  color: #555;\n}\n\nselect, input {\n  padding: 0.8rem;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 1rem;\n  background-color: white;\n  transition: border-color 0.3s;\n}\n\nselect:focus, input:focus {\n  border-color: #333;\n  outline: none;\n}\n\n.action-buttons {\n  display: flex;\n  gap: 1rem;\n  margin-top: 1.5rem;\n  grid-column: 1 / -1;\n}\n\nbutton {\n  padding: 0.8rem 1.5rem;\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  cursor: pointer;\n  transition: background-color 0.3s, transform 0.1s;\n}\n\nbutton:hover {\n  transform: translateY(-2px);\n}\n\n.search-button {\n  background-color: #333;\n  color: white;\n  flex: 2;\n}\n\n.search-button:hover {\n  background-color: #222;\n}\n\n.search-button:disabled {\n  background-color: #ccc;\n  cursor: not-allowed;\n  transform: none;\n}\n\n.reset-button {\n  background-color: #e6e6e6;\n  color: #333;\n  flex: 1;\n}\n\n.reset-button:hover {\n  background-color: #d9d9d9;\n}\n\n.error-message {\n  color: #d32f2f;\n  background-color: #ffebee;\n  padding: 0.8rem;\n  border-radius: 4px;\n  margin-top: 1rem;\n  text-align: center;\n  font-weight: 500;\n  grid-column: 1 / -1;\n}\n\n.search-results {\n  margin-top: 2rem;\n}\n\n.results-header {\n  text-align: center;\n  margin-bottom: 1.5rem;\n}\n\n.results-header h2 {\n  font-size: 1.8rem;\n  font-weight: 300;\n  margin-bottom: 0.5rem;\n}\n\n.loading {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 3rem 0;\n}\n\n.loader {\n  border: 4px solid #f3f3f3;\n  border-top: 4px solid #333;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  animation: spin 1s linear infinite;\n  margin-bottom: 1rem;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n.flights-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 1.5rem;\n}\n\n@media (max-width: 768px) {\n  .search-form {\n    grid-template-columns: 1fr;\n  }\n  \n  .flights-container {\n    grid-template-columns: 1fr;\n  }\n  \n  .flight-search {\n    padding: 1rem;\n  }\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}