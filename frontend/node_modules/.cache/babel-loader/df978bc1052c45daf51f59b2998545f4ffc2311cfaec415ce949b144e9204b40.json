{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelSelect as _vModelSelect, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelText as _vModelText, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"flight-search\"\n};\nconst _hoisted_2 = {\n  class: \"search-container\"\n};\nconst _hoisted_3 = {\n  class: \"search-form\"\n};\nconst _hoisted_4 = {\n  class: \"form-group\"\n};\nconst _hoisted_5 = {\n  class: \"form-group\"\n};\nconst _hoisted_6 = [\"disabled\"];\nconst _hoisted_7 = [\"value\"];\nconst _hoisted_8 = {\n  class: \"form-group\"\n};\nconst _hoisted_9 = [\"disabled\"];\nconst _hoisted_10 = [\"value\"];\nconst _hoisted_11 = {\n  class: \"form-group\"\n};\nconst _hoisted_12 = [\"disabled\"];\nconst _hoisted_13 = [\"value\"];\nconst _hoisted_14 = {\n  class: \"form-group\"\n};\nconst _hoisted_15 = [\"disabled\"];\nconst _hoisted_16 = [\"value\"];\nconst _hoisted_17 = {\n  class: \"form-group\"\n};\nconst _hoisted_18 = [\"disabled\"];\nconst _hoisted_19 = [\"value\"];\nconst _hoisted_20 = {\n  class: \"form-group\"\n};\nconst _hoisted_21 = [\"min\", \"max\"];\nconst _hoisted_22 = {\n  class: \"form-group\"\n};\nconst _hoisted_23 = [\"value\"];\nconst _hoisted_24 = {\n  class: \"action-buttons\"\n};\nconst _hoisted_25 = [\"disabled\"];\nconst _hoisted_26 = {\n  key: 0,\n  class: \"error-message\"\n};\nconst _hoisted_27 = {\n  key: 0,\n  class: \"search-results\"\n};\nconst _hoisted_28 = {\n  key: 0,\n  class: \"loading\"\n};\nconst _hoisted_29 = {\n  key: 1\n};\nconst _hoisted_30 = {\n  class: \"results-header\"\n};\nconst _hoisted_31 = {\n  key: 0\n};\nconst _hoisted_32 = {\n  key: 1\n};\nconst _hoisted_33 = {\n  key: 0,\n  class: \"flights-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_flight_card = _resolveComponent(\"flight-card\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[32] || (_cache[32] = _createElementVNode(\"div\", {\n    class: \"header\"\n  }, [_createElementVNode(\"h1\", null, \"AerotwineX 航班查詢\"), _createElementVNode(\"p\", null, \"簡單、快速地查詢您的航班\")], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_cache[16] || (_cache[16] = _createElementVNode(\"label\", null, \"出發國家/地區\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.departureCountry = $event),\n    onChange: _cache[1] || (_cache[1] = (...args) => $options.filterDepartureAirports && $options.filterDepartureAirports(...args))\n  }, _cache[15] || (_cache[15] = [_createElementVNode(\"option\", {\n    value: \"TW\"\n  }, \"台灣\", -1 /* HOISTED */)]), 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, $data.departureCountry]])]), _createElementVNode(\"div\", _hoisted_5, [_cache[18] || (_cache[18] = _createElementVNode(\"label\", null, \"出發城市\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.departureCity = $event),\n    onChange: _cache[3] || (_cache[3] = (...args) => $options.filterDepartureAirportsByCity && $options.filterDepartureAirportsByCity(...args)),\n    disabled: !$data.departureCountry || !$data.departureCities.length\n  }, [_cache[17] || (_cache[17] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"請選擇城市\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.departureCities, city => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: city,\n      value: city\n    }, _toDisplayString(city), 9 /* TEXT, PROPS */, _hoisted_7);\n  }), 128 /* KEYED_FRAGMENT */))], 40 /* PROPS, NEED_HYDRATION */, _hoisted_6), [[_vModelSelect, $data.departureCity]])]), _createElementVNode(\"div\", _hoisted_8, [_cache[20] || (_cache[20] = _createElementVNode(\"label\", null, \"出發機場\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.departureAirport = $event),\n    onChange: _cache[5] || (_cache[5] = (...args) => $options.filterDestinations && $options.filterDestinations(...args)),\n    disabled: !$data.departureCity || !$data.filteredDepartureAirports.length\n  }, [_cache[19] || (_cache[19] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"請選擇出發機場\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.filteredDepartureAirports, airport => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: airport.code,\n      value: airport.code\n    }, _toDisplayString(airport.name) + \" (\" + _toDisplayString(airport.code) + \") \", 9 /* TEXT, PROPS */, _hoisted_10);\n  }), 128 /* KEYED_FRAGMENT */))], 40 /* PROPS, NEED_HYDRATION */, _hoisted_9), [[_vModelSelect, $data.departureAirport]])]), _createElementVNode(\"div\", _hoisted_11, [_cache[22] || (_cache[22] = _createElementVNode(\"label\", null, \"目的地國家/地區\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[6] || (_cache[6] = $event => $data.destinationCountry = $event),\n    onChange: _cache[7] || (_cache[7] = (...args) => $options.filterDestinationAirports && $options.filterDestinationAirports(...args)),\n    disabled: !$data.departureAirport\n  }, [_cache[21] || (_cache[21] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"請選擇國家/地區\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.availableDestinationCountries, country => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: country.code,\n      value: country.code\n    }, _toDisplayString(country.name), 9 /* TEXT, PROPS */, _hoisted_13);\n  }), 128 /* KEYED_FRAGMENT */))], 40 /* PROPS, NEED_HYDRATION */, _hoisted_12), [[_vModelSelect, $data.destinationCountry]])]), _createElementVNode(\"div\", _hoisted_14, [_cache[24] || (_cache[24] = _createElementVNode(\"label\", null, \"目的地城市\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[8] || (_cache[8] = $event => $data.destinationCity = $event),\n    onChange: _cache[9] || (_cache[9] = (...args) => $options.filterDestinationAirportsByCity && $options.filterDestinationAirportsByCity(...args)),\n    disabled: !$data.destinationCountry || !$data.destinationCities.length\n  }, [_cache[23] || (_cache[23] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"請選擇城市\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.destinationCities, city => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: city,\n      value: city\n    }, _toDisplayString(city), 9 /* TEXT, PROPS */, _hoisted_16);\n  }), 128 /* KEYED_FRAGMENT */))], 40 /* PROPS, NEED_HYDRATION */, _hoisted_15), [[_vModelSelect, $data.destinationCity]])]), _createElementVNode(\"div\", _hoisted_17, [_cache[26] || (_cache[26] = _createElementVNode(\"label\", null, \"目的地機場\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[10] || (_cache[10] = $event => $data.destinationAirport = $event),\n    disabled: !$data.destinationCity || !$data.filteredDestinationAirports.length\n  }, [_cache[25] || (_cache[25] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"請選擇目的地機場\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.filteredDestinationAirports, airport => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: airport.code,\n      value: airport.code\n    }, _toDisplayString(airport.name) + \" (\" + _toDisplayString(airport.code) + \") \", 9 /* TEXT, PROPS */, _hoisted_19);\n  }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_18), [[_vModelSelect, $data.destinationAirport]])]), _createElementVNode(\"div\", _hoisted_20, [_cache[27] || (_cache[27] = _createElementVNode(\"label\", null, \"日期\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    \"onUpdate:modelValue\": _cache[11] || (_cache[11] = $event => $data.flightDate = $event),\n    min: $options.minDate,\n    max: $options.maxDate\n  }, null, 8 /* PROPS */, _hoisted_21), [[_vModelText, $data.flightDate]])]), _createElementVNode(\"div\", _hoisted_22, [_cache[29] || (_cache[29] = _createElementVNode(\"label\", null, \"航空公司\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[12] || (_cache[12] = $event => $data.selectedAirline = $event)\n  }, [_cache[28] || (_cache[28] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"所有航空公司\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.airlines, airline => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: airline.id,\n      value: airline.id\n    }, _toDisplayString(airline.name), 9 /* TEXT, PROPS */, _hoisted_23);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $data.selectedAirline]])]), _createElementVNode(\"div\", _hoisted_24, [_createElementVNode(\"button\", {\n    class: \"search-button\",\n    onClick: _cache[13] || (_cache[13] = (...args) => $options.searchFlights && $options.searchFlights(...args)),\n    disabled: !$options.canSearch\n  }, \" 搜尋航班 \", 8 /* PROPS */, _hoisted_25), _createElementVNode(\"button\", {\n    class: \"reset-button\",\n    onClick: _cache[14] || (_cache[14] = (...args) => $options.resetForm && $options.resetForm(...args))\n  }, \" 重設 \")]), $data.errorMessage ? (_openBlock(), _createElementBlock(\"div\", _hoisted_26, _toDisplayString($data.errorMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)])]), $data.searchComplete ? (_openBlock(), _createElementBlock(\"div\", _hoisted_27, [$data.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_28, _cache[30] || (_cache[30] = [_createElementVNode(\"div\", {\n    class: \"loader\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"搜尋中，請稍候...\", -1 /* HOISTED */)]))) : (_openBlock(), _createElementBlock(\"div\", _hoisted_29, [_createElementVNode(\"div\", _hoisted_30, [_cache[31] || (_cache[31] = _createElementVNode(\"h2\", null, \"搜尋結果\", -1 /* HOISTED */)), $data.flights.length === 0 ? (_openBlock(), _createElementBlock(\"p\", _hoisted_31, \"沒有找到符合條件的航班\")) : (_openBlock(), _createElementBlock(\"p\", _hoisted_32, \"找到 \" + _toDisplayString($data.flights.length) + \" 個符合條件的航班\", 1 /* TEXT */))]), $data.flights.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_33, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.flights, flight => {\n    return _openBlock(), _createBlock(_component_flight_card, {\n      key: `${flight.flight_number}-${flight.scheduled_departure}`,\n      flight: flight,\n      departureAirportName: $options.getAirportName(flight.departure_airport_code),\n      arrivalAirportName: $options.getAirportName(flight.arrival_airport_code),\n      airlineName: $options.getAirlineName(flight.airline_id)\n    }, null, 8 /* PROPS */, [\"flight\", \"departureAirportName\", \"arrivalAirportName\", \"airlineName\"]);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)]))])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_cache","$event","$data","departureCountry","onChange","args","$options","filterDepartureAirports","value","_hoisted_5","departureCity","filterDepartureAirportsByCity","disabled","departureCities","length","_Fragment","_renderList","city","_hoisted_7","_hoisted_6","_hoisted_8","departureAirport","filterDestinations","filteredDepartureAirports","airport","code","name","_toDisplayString","_hoisted_10","_hoisted_9","_hoisted_11","destinationCountry","filterDestinationAirports","availableDestinationCountries","country","_hoisted_13","_hoisted_12","_hoisted_14","destinationCity","filterDestinationAirportsByCity","destinationCities","_hoisted_16","_hoisted_15","_hoisted_17","destinationAirport","filteredDestinationAirports","_hoisted_19","_hoisted_18","_hoisted_20","type","flightDate","min","minDate","max","maxDate","_hoisted_21","_hoisted_22","selectedAirline","airlines","airline","id","_hoisted_23","_hoisted_24","onClick","searchFlights","canSearch","_hoisted_25","resetForm","errorMessage","_hoisted_26","_createCommentVNode","searchComplete","_hoisted_27","isLoading","_hoisted_28","_hoisted_29","_hoisted_30","flights","_hoisted_31","_hoisted_32","_hoisted_33","flight","_createBlock","_component_flight_card","flight_number","scheduled_departure","departureAirportName","getAirportName","departure_airport_code","arrivalAirportName","arrival_airport_code","airlineName","getAirlineName","airline_id"],"sources":["C:\\Users\\Aliothouo\\OneDrive\\文件\\學校\\AlphaVision\\AerotwineX\\frontend\\src\\components\\FlightSearch.vue"],"sourcesContent":["<template>\n  <div class=\"flight-search\">\n    <div class=\"header\">\n      <h1>AerotwineX 航班查詢</h1>\n      <p>簡單、快速地查詢您的航班</p>\n    </div>\n    \n    <div class=\"search-container\">\n      <div class=\"search-form\">\n        <div class=\"form-group\">\n          <label>出發國家/地區</label>\n          <select v-model=\"departureCountry\" @change=\"filterDepartureAirports\">\n            <option value=\"TW\">台灣</option>\n          </select>\n        </div>\n        \n        <div class=\"form-group\">\n          <label>出發城市</label>\n          <select v-model=\"departureCity\" @change=\"filterDepartureAirportsByCity\" :disabled=\"!departureCountry || !departureCities.length\">\n            <option value=\"\">請選擇城市</option>\n            <option v-for=\"city in departureCities\" :key=\"city\" :value=\"city\">\n              {{ city }}\n            </option>\n          </select>\n        </div>\n        \n        <div class=\"form-group\">\n          <label>出發機場</label>\n          <select v-model=\"departureAirport\" @change=\"filterDestinations\" :disabled=\"!departureCity || !filteredDepartureAirports.length\">\n            <option value=\"\">請選擇出發機場</option>\n            <option v-for=\"airport in filteredDepartureAirports\" :key=\"airport.code\" :value=\"airport.code\">\n              {{ airport.name }} ({{ airport.code }})\n            </option>\n          </select>\n        </div>\n        \n        <div class=\"form-group\">\n          <label>目的地國家/地區</label>\n          <select v-model=\"destinationCountry\" @change=\"filterDestinationAirports\" :disabled=\"!departureAirport\">\n            <option value=\"\">請選擇國家/地區</option>\n            <option v-for=\"country in availableDestinationCountries\" :key=\"country.code\" :value=\"country.code\">\n              {{ country.name }}\n            </option>\n          </select>\n        </div>\n        \n        <div class=\"form-group\">\n          <label>目的地城市</label>\n          <select v-model=\"destinationCity\" @change=\"filterDestinationAirportsByCity\" :disabled=\"!destinationCountry || !destinationCities.length\">\n            <option value=\"\">請選擇城市</option>\n            <option v-for=\"city in destinationCities\" :key=\"city\" :value=\"city\">\n              {{ city }}\n            </option>\n          </select>\n        </div>\n        \n        <div class=\"form-group\">\n          <label>目的地機場</label>\n          <select v-model=\"destinationAirport\" :disabled=\"!destinationCity || !filteredDestinationAirports.length\">\n            <option value=\"\">請選擇目的地機場</option>\n            <option v-for=\"airport in filteredDestinationAirports\" :key=\"airport.code\" :value=\"airport.code\">\n              {{ airport.name }} ({{ airport.code }})\n            </option>\n          </select>\n        </div>\n        \n        <div class=\"form-group\">\n          <label>日期</label>\n          <input type=\"date\" v-model=\"flightDate\" :min=\"minDate\" :max=\"maxDate\">\n        </div>\n        \n        <div class=\"form-group\">\n          <label>航空公司</label>\n          <select v-model=\"selectedAirline\">\n            <option value=\"\">所有航空公司</option>\n            <option v-for=\"airline in airlines\" :key=\"airline.id\" :value=\"airline.id\">\n              {{ airline.name }}\n            </option>\n          </select>\n        </div>\n        \n        <div class=\"action-buttons\">\n          <button class=\"search-button\" @click=\"searchFlights\" :disabled=\"!canSearch\">\n            搜尋航班\n          </button>\n          <button class=\"reset-button\" @click=\"resetForm\">\n            重設\n          </button>\n        </div>\n        \n        <div v-if=\"errorMessage\" class=\"error-message\">\n          {{ errorMessage }}\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"search-results\" v-if=\"searchComplete\">\n      <div v-if=\"isLoading\" class=\"loading\">\n        <div class=\"loader\"></div>\n        <p>搜尋中，請稍候...</p>\n      </div>\n      \n      <div v-else>\n        <div class=\"results-header\">\n          <h2>搜尋結果</h2>\n          <p v-if=\"flights.length === 0\">沒有找到符合條件的航班</p>\n          <p v-else>找到 {{ flights.length }} 個符合條件的航班</p>\n        </div>\n        \n        <div class=\"flights-container\" v-if=\"flights.length > 0\">\n          <flight-card \n            v-for=\"flight in flights\" \n            :key=\"`${flight.flight_number}-${flight.scheduled_departure}`\" \n            :flight=\"flight\"\n            :departureAirportName=\"getAirportName(flight.departure_airport_code)\"\n            :arrivalAirportName=\"getAirportName(flight.arrival_airport_code)\"\n            :airlineName=\"getAirlineName(flight.airline_id)\"\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport FlightCard from './FlightCard.vue';\nimport { getAirports, getAirlines, searchFlights } from '../services/api';\n\nexport default {\n  name: 'FlightSearch',\n  components: {\n    FlightCard\n  },\n  data() {\n    return {\n      departureCountry: 'TW', // 預設出發國家為台灣\n      departureCity: '',\n      departureAirport: '',\n      destinationCountry: '',\n      destinationCity: '',\n      destinationAirport: '',\n      flightDate: this.getTodayDate(),\n      selectedAirline: '',\n      airports: [],\n      airlines: [],\n      filteredDepartureAirports: [],\n      filteredDestinationAirports: [],\n      departureCities: [],\n      destinationCities: [],\n      flights: [],\n      isLoading: false,\n      searchComplete: false,\n      errorMessage: '',\n      popularAirports: [],\n      airportsByCountry: {},\n      availableDestinationCountries: [],\n      debugInfo: {\n        apiCallsStatus: {},\n        dataLoaded: false\n      }\n    };\n  },\n  computed: {\n    minDate() {\n      // 設定最小日期為今天\n      return this.getTodayDate();\n    },\n    maxDate() {\n      // 設定最大日期為一年後\n      const date = new Date();\n      date.setFullYear(date.getFullYear() + 1);\n      return date.toISOString().split('T')[0];\n    },\n    canSearch() {\n      return this.departureAirport && this.destinationAirport && this.flightDate;\n    }\n  },\n  async mounted() {\n    console.log('[DEBUG] FlightSearch組件掛載...');\n    await this.loadPopularAirports(); // 先加載熱門機場數據\n    await this.fetchInitialData(); // 嘗試從API獲取數據，如有必要會覆蓋熱門機場數據\n    \n    // 初始化時直接過濾台灣機場\n    this.filterDepartureAirports();\n  },\n  methods: {\n    async fetchInitialData() {\n      console.log('[DEBUG] 開始獲取初始資料...');\n      try {\n        // 從API獲取機場和航空公司資料\n        const [airportsData, airlinesData] = await Promise.all([\n          getAirports(),\n          getAirlines()\n        ]);\n        \n        console.log('[DEBUG] API返回的機場數據:', airportsData);\n        console.log('[DEBUG] API返回的航空公司數據:', airlinesData);\n        \n        if (airportsData && airportsData.length) {\n          // 加入城市和國家資訊到機場數據\n          this.processAirportsData(airportsData);\n        }\n        \n        this.airlines = airlinesData;\n        \n        this.debugInfo.apiCallsStatus = {\n          airports: airportsData.length > 0 ? 'success' : 'empty',\n          airlines: airlinesData.length > 0 ? 'success' : 'empty'\n        };\n        this.debugInfo.dataLoaded = true;\n        \n        console.log('[DEBUG] 初始化完成。機場數量:', this.airports.length, '航空公司數量:', this.airlines.length);\n      } catch (error) {\n        console.error('[ERROR] 無法載入初始資料:', error);\n        this.errorMessage = '無法載入資料，請稍後再試';\n        this.debugInfo.apiCallsStatus = {\n          error: error.message\n        };\n      }\n    },\n    \n    processAirportsData(airportsData) {\n      // 預設的機場資訊（含城市和國家）\n      const airportInfo = {\n        // 台灣機場\n        'TPE': { city_zh: '桃園', country: 'TW', country_name: '台灣' },\n        'TSA': { city_zh: '臺北', country: 'TW', country_name: '台灣' },\n        'KHH': { city_zh: '高雄', country: 'TW', country_name: '台灣' },\n        'RMQ': { city_zh: '台中', country: 'TW', country_name: '台灣' },\n        'TTT': { city_zh: '臺東', country: 'TW', country_name: '台灣' },\n        'KYD': { city_zh: '臺東', country: 'TW', country_name: '台灣' },\n        'KNH': { city_zh: '金門', country: 'TW', country_name: '台灣' },\n        'MZG': { city_zh: '澎湖', country: 'TW', country_name: '台灣' },\n        'HUN': { city_zh: '花蓮', country: 'TW', country_name: '台灣' },\n        'GNI': { city_zh: '臺東', country: 'TW', country_name: '台灣' },\n        'MFK': { city_zh: '連江', country: 'TW', country_name: '台灣' },\n        'LZN': { city_zh: '連江', country: 'TW', country_name: '台灣' },\n        'TNN': { city_zh: '台南', country: 'TW', country_name: '台灣' },\n        'CMJ': { city_zh: '澎湖', country: 'TW', country_name: '台灣' },\n        'WOT': { city_zh: '澎湖', country: 'TW', country_name: '台灣' },\n        \n        // 日本機場\n        'HND': { city_zh: '東京', country: 'JP', country_name: '日本' },\n        'NRT': { city_zh: '東京', country: 'JP', country_name: '日本' },\n        'KIX': { city_zh: '大阪', country: 'JP', country_name: '日本' },\n        'FUK': { city_zh: '福岡', country: 'JP', country_name: '日本' },\n        'CTS': { city_zh: '札幌', country: 'JP', country_name: '日本' },\n        'NGO': { city_zh: '名古屋', country: 'JP', country_name: '日本' },\n        'OKA': { city_zh: '沖繩', country: 'JP', country_name: '日本' },\n        \n        // 亞洲其他熱門機場\n        'HKG': { city_zh: '香港', country: 'HK', country_name: '香港' },\n        'ICN': { city_zh: '首爾', country: 'KR', country_name: '韓國' },\n        'GMP': { city_zh: '首爾', country: 'KR', country_name: '韓國' },\n        'PVG': { city_zh: '上海', country: 'CN', country_name: '中國大陸' },\n        'PEK': { city_zh: '北京', country: 'CN', country_name: '中國大陸' },\n        'SIN': { city_zh: '新加坡', country: 'SG', country_name: '新加坡' },\n        'BKK': { city_zh: '曼谷', country: 'TH', country_name: '泰國' },\n        'MNL': { city_zh: '馬尼拉', country: 'PH', country_name: '菲律賓' }\n      };\n      \n      // 擴展機場數據\n      this.airports = airportsData.map(airport => {\n        const info = airportInfo[airport.code] || { \n          city_zh: '未知城市', \n          country: 'XX', \n          country_name: '未知國家' \n        };\n        \n        return {\n          ...airport,\n          city: info.city_zh,\n          country: info.country,\n          country_name: info.country_name\n        };\n      });\n      \n      // 將機場按國家分類\n      this.organizeAirportsByCountry();\n    },\n    \n    organizeAirportsByCountry() {\n      // 整理機場按國家分類\n      this.airportsByCountry = {};\n      \n      for (const airport of this.airports) {\n        if (!this.airportsByCountry[airport.country]) {\n          this.airportsByCountry[airport.country] = [];\n        }\n        this.airportsByCountry[airport.country].push(airport);\n      }\n      \n      // 設定可用的目的地國家列表\n      const countries = [];\n      for (const countryCode in this.airportsByCountry) {\n        if (countryCode !== 'TW') {  // 排除台灣，因為不能同時作為出發地和目的地\n          const airports = this.airportsByCountry[countryCode];\n          if (airports && airports.length > 0) {\n            countries.push({\n              code: countryCode,\n              name: airports[0].country_name || countryCode\n            });\n          }\n        }\n      }\n      \n      this.availableDestinationCountries = countries;\n      console.log('[DEBUG] 可用的目的地國家:', this.availableDestinationCountries);\n    },\n    \n    filterDepartureAirports() {\n      console.log('[DEBUG] 篩選出發機場，當前國家:', this.departureCountry);\n      // 取得台灣機場\n      this.filteredDepartureAirports = this.airports.filter(\n        airport => airport.country === this.departureCountry\n      );\n      \n      // 從台灣機場中提取城市列表\n      const cities = [...new Set(this.filteredDepartureAirports.map(airport => airport.city))];\n      this.departureCities = cities;\n      \n      console.log('[DEBUG] 出發城市列表:', this.departureCities);\n      console.log('[DEBUG] 台灣機場數量:', this.filteredDepartureAirports.length);\n      \n      // 重置出發城市和機場選擇\n      this.departureCity = '';\n      this.departureAirport = '';\n      this.resetDestination();\n    },\n    \n    filterDepartureAirportsByCity() {\n      console.log('[DEBUG] 按城市篩選出發機場:', this.departureCity);\n      if (!this.departureCity) {\n        this.filteredDepartureAirports = [];\n        this.departureAirport = '';\n        return;\n      }\n      \n      // 篩選選定城市的機場\n      this.filteredDepartureAirports = this.airports.filter(\n        airport => airport.country === this.departureCountry && airport.city === this.departureCity\n      );\n      \n      console.log('[DEBUG] 篩選後的出發機場:', this.filteredDepartureAirports);\n      \n      // 如果只有一個機場，自動選擇\n      if (this.filteredDepartureAirports.length === 1) {\n        this.departureAirport = this.filteredDepartureAirports[0].code;\n        this.filterDestinations();\n      } else {\n        this.departureAirport = '';\n      }\n    },\n    \n    filterDestinations() {\n      console.log('[DEBUG] 篩選目的地機場，當前出發機場:', this.departureAirport);\n      if (!this.departureAirport) {\n        this.resetDestination();\n        return;\n      }\n      \n      // 重置目的地選擇\n      this.destinationCountry = '';\n      this.destinationCity = '';\n      this.destinationAirport = '';\n      this.filteredDestinationAirports = [];\n      this.destinationCities = [];\n    },\n    \n    filterDestinationAirports() {\n      console.log('[DEBUG] 按國家篩選目的地機場:', this.destinationCountry);\n      if (!this.destinationCountry) {\n        this.destinationCity = '';\n        this.destinationAirport = '';\n        this.filteredDestinationAirports = [];\n        this.destinationCities = [];\n        return;\n      }\n      \n      // 篩選目的地國家的機場\n      const airportsInCountry = this.airports.filter(\n        airport => airport.country === this.destinationCountry\n      );\n      \n      // 從目的地國家機場中提取城市列表\n      const cities = [...new Set(airportsInCountry.map(airport => airport.city))];\n      this.destinationCities = cities;\n      \n      console.log('[DEBUG] 目的地城市列表:', this.destinationCities);\n      \n      // 重置目的地城市和機場選擇\n      this.destinationCity = '';\n      this.destinationAirport = '';\n      this.filteredDestinationAirports = [];\n    },\n    \n    filterDestinationAirportsByCity() {\n      console.log('[DEBUG] 按城市篩選目的地機場:', this.destinationCity);\n      if (!this.destinationCity) {\n        this.filteredDestinationAirports = [];\n        this.destinationAirport = '';\n        return;\n      }\n      \n      // 篩選選定城市的機場\n      this.filteredDestinationAirports = this.airports.filter(\n        airport => airport.country === this.destinationCountry && airport.city === this.destinationCity\n      );\n      \n      console.log('[DEBUG] 篩選後的目的地機場:', this.filteredDestinationAirports);\n      \n      // 如果只有一個機場，自動選擇\n      if (this.filteredDestinationAirports.length === 1) {\n        this.destinationAirport = this.filteredDestinationAirports[0].code;\n      } else {\n        this.destinationAirport = '';\n      }\n    },\n    \n    resetDestination() {\n      this.destinationCountry = '';\n      this.destinationCity = '';\n      this.destinationAirport = '';\n      this.filteredDestinationAirports = [];\n      this.destinationCities = [];\n    },\n    \n    async loadPopularAirports() {\n      console.log('[DEBUG] 加載熱門機場數據...');\n      try {\n        // 嘗試讀取熱門機場配置文件\n        const response = await fetch('/config/airlines_airports.json');\n        if (!response.ok) {\n          throw new Error('無法獲取熱門機場數據');\n        }\n        \n        const data = await response.json();\n        console.log('[DEBUG] 熱門機場配置數據:', data);\n        \n        // 處理機場數據\n        if (data && data.airports && Array.isArray(data.airports)) {\n          this.popularAirports = data.airports;\n          console.log('[DEBUG] 已加載熱門機場數量:', this.popularAirports.length);\n          \n          // 機場數據處理：優先使用API數據，如果API無數據則使用熱門機場列表\n          if (this.airports.length === 0 && this.popularAirports.length > 0) {\n            console.log('[DEBUG] API沒有返回機場數據，使用熱門機場數據...');\n            \n            // 為熱門機場創建下拉選單所需的格式\n            const airportNames = {\n              // 台灣機場\n              'TPE': '台灣桃園國際機場',\n              'TSA': '台北松山機場',\n              'KHH': '高雄國際機場',\n              'RMQ': '台中國際機場',\n              'TTT': '台東機場',\n              'KYD': '蘭嶼機場',\n              'KNH': '金門機場',\n              'MZG': '馬公機場',\n              'HUN': '花蓮機場',\n              'GNI': '綠島機場',\n              'MFK': '馬祖北竿機場',\n              'LZN': '馬祖南竿機場',\n              'TNN': '台南機場',\n              'CMJ': '七美機場',\n              'WOT': '望安機場',\n              \n              // 日本熱門機場\n              'HND': '東京羽田機場',\n              'NRT': '東京成田國際機場',\n              'KIX': '大阪關西國際機場',\n              'FUK': '福岡機場',\n              'CTS': '札幌新千歲機場',\n              'NGO': '名古屋中部國際機場',\n              'OKA': '沖繩那霸機場',\n              \n              // 亞洲其他熱門機場\n              'HKG': '香港國際機場',\n              'ICN': '首爾仁川國際機場',\n              'GMP': '首爾金浦國際機場',\n              'PVG': '上海浦東國際機場',\n              'PEK': '北京首都國際機場',\n              'SIN': '新加坡樟宜機場',\n              'BKK': '曼谷素萬那普機場',\n              'MNL': '馬尼拉國際機場'\n            };\n            \n            // 將熱門機場代碼轉換為標準格式，含名稱\n            this.airports = this.popularAirports.map(code => ({\n              code,\n              name: airportNames[code] || `${code} 機場` // 如果沒有預設名稱，使用代碼+機場\n            }));\n            \n            console.log('[DEBUG] 轉換後的機場數據:', this.airports);\n          }\n        }\n        \n        // 處理航空公司數據\n        if (data && data.airlines && Array.isArray(data.airlines) && this.airlines.length === 0) {\n          console.log('[DEBUG] API沒有返回航空公司數據，使用配置文件數據...');\n          \n          // 為航空公司創建下拉選單所需的格式\n          const airlineNames = {\n            'CI': '中華航空',\n            'BR': '長榮航空',\n            'AE': '華信航空',\n            'B7': '立榮航空',\n            'JX': '星宇航空',\n            'DA': '德安航空',\n            'JL': '日本航空',\n            'CX': '國泰航空',\n            'OZ': '韓亞航空'\n          };\n          \n          // 將航空公司代碼轉換為標準格式，含名稱\n          this.airlines = data.airlines.map(id => ({\n            id,\n            name: airlineNames[id] || id\n          }));\n          \n          console.log('[DEBUG] 轉換後的航空公司數據:', this.airlines);\n        }\n      } catch (error) {\n        console.error('[ERROR] 無法載入熱門機場數據:', error);\n      }\n    },\n    \n    async searchFlights() {\n      this.isLoading = true;\n      this.searchComplete = true;\n      this.errorMessage = '';\n      \n      try {\n        // 調用API搜尋航班\n        const results = await searchFlights({\n          departureAirport: this.departureAirport,\n          destinationAirport: this.destinationAirport,\n          date: this.flightDate,\n          airline: this.selectedAirline\n        });\n        \n        this.flights = results;\n      } catch (error) {\n        console.error('搜尋航班時出錯:', error);\n        this.errorMessage = '搜尋過程中發生錯誤，請稍後再試';\n        this.flights = [];\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    resetForm() {\n      this.departureCountry = 'TW';\n      this.departureCity = '';\n      this.departureAirport = '';\n      this.destinationCountry = '';\n      this.destinationCity = '';\n      this.destinationAirport = '';\n      this.flightDate = this.getTodayDate();\n      this.selectedAirline = '';\n      this.flights = [];\n      this.searchComplete = false;\n      this.filterDepartureAirports();\n    },\n    getTodayDate() {\n      return new Date().toISOString().split('T')[0];\n    },\n    getAirportName(code) {\n      const airport = this.airports.find(a => a.code === code);\n      return airport ? airport.name : code;\n    },\n    getAirlineName(id) {\n      const airline = this.airlines.find(a => a.id === id);\n      return airline ? airline.name : id;\n    },\n    formatDateTime(dateTimeStr) {\n      const date = new Date(dateTimeStr);\n      return `${date.toLocaleDateString()} ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.flight-search {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 2rem;\n  color: #333;\n  font-family: 'Arial', sans-serif;\n}\n\n.header {\n  text-align: center;\n  margin-bottom: 2rem;\n}\n\n.header h1 {\n  font-size: 2.5rem;\n  margin-bottom: 0.5rem;\n  font-weight: 300;\n  letter-spacing: 1px;\n}\n\n.header p {\n  font-size: 1.2rem;\n  color: #666;\n}\n\n.search-container {\n  background-color: #f8f8f8;\n  border-radius: 8px;\n  padding: 2rem;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\n  margin-bottom: 2rem;\n}\n\n.search-form {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 1.5rem;\n}\n\n.form-group {\n  display: flex;\n  flex-direction: column;\n}\n\nlabel {\n  margin-bottom: 0.5rem;\n  font-weight: 500;\n  color: #555;\n}\n\nselect, input {\n  padding: 0.8rem;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 1rem;\n  background-color: white;\n  transition: border-color 0.3s;\n}\n\nselect:focus, input:focus {\n  border-color: #333;\n  outline: none;\n}\n\n.action-buttons {\n  display: flex;\n  gap: 1rem;\n  margin-top: 1.5rem;\n  grid-column: 1 / -1;\n}\n\nbutton {\n  padding: 0.8rem 1.5rem;\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  cursor: pointer;\n  transition: background-color 0.3s, transform 0.1s;\n}\n\nbutton:hover {\n  transform: translateY(-2px);\n}\n\n.search-button {\n  background-color: #333;\n  color: white;\n  flex: 2;\n}\n\n.search-button:hover {\n  background-color: #222;\n}\n\n.search-button:disabled {\n  background-color: #ccc;\n  cursor: not-allowed;\n  transform: none;\n}\n\n.reset-button {\n  background-color: #e6e6e6;\n  color: #333;\n  flex: 1;\n}\n\n.reset-button:hover {\n  background-color: #d9d9d9;\n}\n\n.error-message {\n  color: #d32f2f;\n  background-color: #ffebee;\n  padding: 0.8rem;\n  border-radius: 4px;\n  margin-top: 1rem;\n  text-align: center;\n  font-weight: 500;\n  grid-column: 1 / -1;\n}\n\n.search-results {\n  margin-top: 2rem;\n}\n\n.results-header {\n  text-align: center;\n  margin-bottom: 1.5rem;\n}\n\n.results-header h2 {\n  font-size: 1.8rem;\n  font-weight: 300;\n  margin-bottom: 0.5rem;\n}\n\n.loading {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 3rem 0;\n}\n\n.loader {\n  border: 4px solid #f3f3f3;\n  border-top: 4px solid #333;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  animation: spin 1s linear infinite;\n  margin-bottom: 1rem;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n.flights-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 1.5rem;\n}\n\n@media (max-width: 768px) {\n  .search-form {\n    grid-template-columns: 1fr;\n  }\n  \n  .flights-container {\n    grid-template-columns: 1fr;\n  }\n  \n  .flight-search {\n    padding: 1rem;\n  }\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}