{"ast":null,"code":"/**\n * 航班API服務\n * 處理與後端API的通信\n */\n\n// 基本API URL\nconst API_BASE_URL = '/api';\n\n/**\n * 獲取所有機場列表\n * @returns {Promise<Array>} 機場列表\n */\nexport async function getAirports() {\n  try {\n    // 調用後端API獲取機場列表\n    const response = await fetch(`${API_BASE_URL}/airports`);\n    if (!response.ok) {\n      throw new Error(`獲取機場資料失敗: ${response.statusText}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('獲取機場資料時出錯:', error);\n    return [];\n  }\n}\n\n/**\n * 獲取所有航空公司列表\n * @returns {Promise<Array>} 航空公司列表\n */\nexport async function getAirlines() {\n  try {\n    // 調用後端API獲取航空公司列表\n    const response = await fetch(`${API_BASE_URL}/airlines`);\n    if (!response.ok) {\n      throw new Error(`獲取航空公司資料失敗: ${response.statusText}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('獲取航空公司資料時出錯:', error);\n    return [];\n  }\n}\n\n/**\n * 搜尋航班\n * @param {Object} params 搜尋參數\n * @param {string} params.departureAirport 出發機場代碼\n * @param {string} params.destinationAirport 目的地機場代碼\n * @param {string} params.date 日期 (YYYY-MM-DD)\n * @param {string} [params.airline] 航空公司ID (可選)\n * @returns {Promise<Array>} 航班列表\n */\nexport async function searchFlights(params) {\n  try {\n    // 參數驗證\n    if (!params.departureAirport || !params.destinationAirport || !params.date) {\n      throw new Error('缺少必要的搜尋參數');\n    }\n\n    // 構建查詢參數\n    const queryParams = new URLSearchParams({\n      departure: params.departureAirport,\n      arrival: params.destinationAirport,\n      date: params.date\n    });\n\n    // 添加可選參數\n    if (params.airline) {\n      queryParams.append('airline', params.airline);\n    }\n\n    // 調用後端API搜尋航班\n    const response = await fetch(`${API_BASE_URL}/flights/search?${queryParams}`);\n    if (!response.ok) {\n      throw new Error(`搜尋航班失敗: ${response.statusText}`);\n    }\n    const result = await response.json();\n\n    // 檢查API回應狀態\n    if (result.status === 'error') {\n      throw new Error(result.message || '搜尋航班失敗');\n    }\n\n    // 返回航班數據\n    return result.data || [];\n  } catch (error) {\n    console.error('搜尋航班時出錯:', error);\n    throw error;\n  }\n}\n\n/**\n * 生成模擬航班數據\n * @param {Object} params 搜尋參數\n * @returns {Array} 航班列表\n */\nfunction generateMockFlights(params) {\n  const {\n    departureAirport,\n    destinationAirport,\n    date,\n    airline\n  } = params;\n\n  // 轉換日期為Date對象\n  const searchDate = new Date(date);\n  searchDate.setHours(0, 0, 0, 0);\n\n  // 每個機場對生成1-5個航班\n  const numFlights = Math.floor(Math.random() * 5) + 1;\n  const flights = [];\n\n  // 航空公司選項\n  const airlineOptions = !airline ? ['CI', 'BR', 'AE', 'B7', 'DA'] : [airline];\n  for (let i = 0; i < numFlights; i++) {\n    // 選擇一個航空公司\n    const randomAirline = airlineOptions[Math.floor(Math.random() * airlineOptions.length)];\n\n    // 生成航班號\n    const flightNumber = `${randomAirline}${Math.floor(Math.random() * 1000) + 100}`;\n\n    // 生成出發時間 (當天6AM到8PM)\n    const departureTime = new Date(searchDate);\n    departureTime.setHours(Math.floor(Math.random() * 14) + 6);\n    departureTime.setMinutes(Math.floor(Math.random() * 60));\n\n    // 計算飛行時間 (根據機場距離而定)\n    let flightDuration = 0;\n    // 國內線\n    if (['TPE', 'TSA', 'KHH', 'RMQ', 'TTT', 'KYD', 'KNH', 'MZG'].includes(departureAirport) && ['TPE', 'TSA', 'KHH', 'RMQ', 'TTT', 'KYD', 'KNH', 'MZG'].includes(destinationAirport)) {\n      // 國內航線 - 30-120分鐘\n      flightDuration = Math.floor(Math.random() * 90) + 30;\n    } else {\n      // 國際航線 - 120-720分鐘 (2-12小時)\n      flightDuration = Math.floor(Math.random() * 600) + 120;\n    }\n\n    // 計算抵達時間\n    const arrivalTime = new Date(departureTime.getTime() + flightDuration * 60000);\n\n    // 生成價格 (國內/國際)\n    let price = 0;\n    if (flightDuration < 120) {\n      // 國內線 - NT$1,000到NT$5,000\n      price = Math.floor(Math.random() * 4000) + 1000;\n    } else {\n      // 國際線 - NT$5,000到NT$30,000\n      price = Math.floor(Math.random() * 25000) + 5000;\n    }\n\n    // 生成航班狀態 (大部分是已排定)\n    const statusOptions = ['scheduled', 'scheduled', 'scheduled', 'scheduled', 'delayed', 'cancelled'];\n    const status = statusOptions[Math.floor(Math.random() * statusOptions.length)];\n\n    // 添加航班到結果\n    flights.push({\n      flight_number: flightNumber,\n      scheduled_departure: departureTime.toISOString(),\n      scheduled_arrival: arrivalTime.toISOString(),\n      departure_airport_code: departureAirport,\n      arrival_airport_code: destinationAirport,\n      airline_id: randomAirline,\n      flight_status: status,\n      aircraft_type: getRandomAircraftType(randomAirline),\n      price: price,\n      booking_link: '#'\n    });\n  }\n  return flights;\n}\n\n/**\n * 根據航空公司獲取隨機機型\n * @param {string} airlineCode 航空公司代碼\n * @returns {string} 機型\n */\nfunction getRandomAircraftType(airlineCode) {\n  const aircraftTypes = {\n    'CI': ['A330-300', 'A350-900', 'B737-800', 'B777-300ER'],\n    'BR': ['A330-300', 'B777-300ER', 'B787-9', 'B787-10'],\n    'AE': ['A320-200', 'A321neo', 'ATR 72-600'],\n    'B7': ['A320-200', 'A321-200', 'ATR 72-600'],\n    'DA': ['Dornier 228-212', 'ATR 72-600']\n  };\n  const airlineAircrafts = aircraftTypes[airlineCode] || ['A320-200'];\n  return airlineAircrafts[Math.floor(Math.random() * airlineAircrafts.length)];\n}","map":{"version":3,"names":["API_BASE_URL","getAirports","response","fetch","ok","Error","statusText","data","json","error","console","getAirlines","searchFlights","params","departureAirport","destinationAirport","date","queryParams","URLSearchParams","departure","arrival","airline","append","result","status","message","generateMockFlights","searchDate","Date","setHours","numFlights","Math","floor","random","flights","airlineOptions","i","randomAirline","length","flightNumber","departureTime","setMinutes","flightDuration","includes","arrivalTime","getTime","price","statusOptions","push","flight_number","scheduled_departure","toISOString","scheduled_arrival","departure_airport_code","arrival_airport_code","airline_id","flight_status","aircraft_type","getRandomAircraftType","booking_link","airlineCode","aircraftTypes","airlineAircrafts"],"sources":["C:/Users/Aliothouo/OneDrive/文件/學校/AlphaVision/AerotwineX/frontend/src/services/api.js"],"sourcesContent":["/**\n * 航班API服務\n * 處理與後端API的通信\n */\n\n// 基本API URL\nconst API_BASE_URL = '/api';\n\n/**\n * 獲取所有機場列表\n * @returns {Promise<Array>} 機場列表\n */\nexport async function getAirports() {\n  try {\n    // 調用後端API獲取機場列表\n    const response = await fetch(`${API_BASE_URL}/airports`);\n    if (!response.ok) {\n      throw new Error(`獲取機場資料失敗: ${response.statusText}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('獲取機場資料時出錯:', error);\n    return [];\n  }\n}\n\n/**\n * 獲取所有航空公司列表\n * @returns {Promise<Array>} 航空公司列表\n */\nexport async function getAirlines() {\n  try {\n    // 調用後端API獲取航空公司列表\n    const response = await fetch(`${API_BASE_URL}/airlines`);\n    if (!response.ok) {\n      throw new Error(`獲取航空公司資料失敗: ${response.statusText}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('獲取航空公司資料時出錯:', error);\n    return [];\n  }\n}\n\n/**\n * 搜尋航班\n * @param {Object} params 搜尋參數\n * @param {string} params.departureAirport 出發機場代碼\n * @param {string} params.destinationAirport 目的地機場代碼\n * @param {string} params.date 日期 (YYYY-MM-DD)\n * @param {string} [params.airline] 航空公司ID (可選)\n * @returns {Promise<Array>} 航班列表\n */\nexport async function searchFlights(params) {\n  try {\n    // 參數驗證\n    if (!params.departureAirport || !params.destinationAirport || !params.date) {\n      throw new Error('缺少必要的搜尋參數');\n    }\n    \n    // 構建查詢參數\n    const queryParams = new URLSearchParams({\n      departure: params.departureAirport,\n      arrival: params.destinationAirport,\n      date: params.date\n    });\n    \n    // 添加可選參數\n    if (params.airline) {\n      queryParams.append('airline', params.airline);\n    }\n    \n    // 調用後端API搜尋航班\n    const response = await fetch(`${API_BASE_URL}/flights/search?${queryParams}`);\n    if (!response.ok) {\n      throw new Error(`搜尋航班失敗: ${response.statusText}`);\n    }\n    \n    const result = await response.json();\n    \n    // 檢查API回應狀態\n    if (result.status === 'error') {\n      throw new Error(result.message || '搜尋航班失敗');\n    }\n    \n    // 返回航班數據\n    return result.data || [];\n  } catch (error) {\n    console.error('搜尋航班時出錯:', error);\n    throw error;\n  }\n}\n\n/**\n * 生成模擬航班數據\n * @param {Object} params 搜尋參數\n * @returns {Array} 航班列表\n */\nfunction generateMockFlights(params) {\n  const { departureAirport, destinationAirport, date, airline } = params;\n  \n  // 轉換日期為Date對象\n  const searchDate = new Date(date);\n  searchDate.setHours(0, 0, 0, 0);\n  \n  // 每個機場對生成1-5個航班\n  const numFlights = Math.floor(Math.random() * 5) + 1;\n  const flights = [];\n  \n  // 航空公司選項\n  const airlineOptions = !airline ? ['CI', 'BR', 'AE', 'B7', 'DA'] : [airline];\n  \n  for (let i = 0; i < numFlights; i++) {\n    // 選擇一個航空公司\n    const randomAirline = airlineOptions[Math.floor(Math.random() * airlineOptions.length)];\n    \n    // 生成航班號\n    const flightNumber = `${randomAirline}${Math.floor(Math.random() * 1000) + 100}`;\n    \n    // 生成出發時間 (當天6AM到8PM)\n    const departureTime = new Date(searchDate);\n    departureTime.setHours(Math.floor(Math.random() * 14) + 6);\n    departureTime.setMinutes(Math.floor(Math.random() * 60));\n    \n    // 計算飛行時間 (根據機場距離而定)\n    let flightDuration = 0;\n    // 國內線\n    if (\n      ['TPE', 'TSA', 'KHH', 'RMQ', 'TTT', 'KYD', 'KNH', 'MZG'].includes(departureAirport) &&\n      ['TPE', 'TSA', 'KHH', 'RMQ', 'TTT', 'KYD', 'KNH', 'MZG'].includes(destinationAirport)\n    ) {\n      // 國內航線 - 30-120分鐘\n      flightDuration = Math.floor(Math.random() * 90) + 30;\n    } else {\n      // 國際航線 - 120-720分鐘 (2-12小時)\n      flightDuration = Math.floor(Math.random() * 600) + 120;\n    }\n    \n    // 計算抵達時間\n    const arrivalTime = new Date(departureTime.getTime() + flightDuration * 60000);\n    \n    // 生成價格 (國內/國際)\n    let price = 0;\n    if (flightDuration < 120) {\n      // 國內線 - NT$1,000到NT$5,000\n      price = Math.floor(Math.random() * 4000) + 1000;\n    } else {\n      // 國際線 - NT$5,000到NT$30,000\n      price = Math.floor(Math.random() * 25000) + 5000;\n    }\n    \n    // 生成航班狀態 (大部分是已排定)\n    const statusOptions = ['scheduled', 'scheduled', 'scheduled', 'scheduled', 'delayed', 'cancelled'];\n    const status = statusOptions[Math.floor(Math.random() * statusOptions.length)];\n    \n    // 添加航班到結果\n    flights.push({\n      flight_number: flightNumber,\n      scheduled_departure: departureTime.toISOString(),\n      scheduled_arrival: arrivalTime.toISOString(),\n      departure_airport_code: departureAirport,\n      arrival_airport_code: destinationAirport,\n      airline_id: randomAirline,\n      flight_status: status,\n      aircraft_type: getRandomAircraftType(randomAirline),\n      price: price,\n      booking_link: '#'\n    });\n  }\n  \n  return flights;\n}\n\n/**\n * 根據航空公司獲取隨機機型\n * @param {string} airlineCode 航空公司代碼\n * @returns {string} 機型\n */\nfunction getRandomAircraftType(airlineCode) {\n  const aircraftTypes = {\n    'CI': ['A330-300', 'A350-900', 'B737-800', 'B777-300ER'],\n    'BR': ['A330-300', 'B777-300ER', 'B787-9', 'B787-10'],\n    'AE': ['A320-200', 'A321neo', 'ATR 72-600'],\n    'B7': ['A320-200', 'A321-200', 'ATR 72-600'],\n    'DA': ['Dornier 228-212', 'ATR 72-600']\n  };\n  \n  const airlineAircrafts = aircraftTypes[airlineCode] || ['A320-200'];\n  return airlineAircrafts[Math.floor(Math.random() * airlineAircrafts.length)];\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}