{"ast":null,"code":"import FlightCard from './FlightCard.vue';\nimport { getAirports, getAirlines, searchFlights, getAvailableRoutes } from '../services/api';\nexport default {\n  name: 'FlightSearch',\n  components: {\n    FlightCard\n  },\n  data() {\n    return {\n      departureCountry: 'TW',\n      // 預設出發國家為台灣\n      departureCity: '',\n      departureAirport: '',\n      destinationCountry: '',\n      destinationCity: '',\n      destinationAirport: '',\n      flightDate: this.getTodayDate(),\n      selectedAirline: '',\n      airports: [],\n      airlines: [],\n      filteredDepartureAirports: [],\n      filteredDestinationAirports: [],\n      departureCities: [],\n      destinationCities: [],\n      flights: [],\n      isLoading: false,\n      searchComplete: false,\n      errorMessage: '',\n      popularAirports: [],\n      airportsByCountry: {},\n      availableDestinationCountries: [],\n      availableRoutes: [],\n      // 存儲可用的直飛航線\n      debugInfo: {\n        apiCallsStatus: {},\n        dataLoaded: false\n      }\n    };\n  },\n  computed: {\n    minDate() {\n      // 設定最小日期為今天\n      return this.getTodayDate();\n    },\n    maxDate() {\n      // 設定最大日期為一年後\n      const date = new Date();\n      date.setFullYear(date.getFullYear() + 1);\n      return date.toISOString().split('T')[0];\n    },\n    canSearch() {\n      return this.departureAirport && this.destinationAirport && this.flightDate;\n    }\n  },\n  async mounted() {\n    console.log('[DEBUG] FlightSearch組件掛載...');\n    await this.loadPopularAirports(); // 先加載熱門機場數據\n    await this.fetchInitialData(); // 嘗試從API獲取數據，如有必要會覆蓋熱門機場數據\n\n    // 初始化時直接過濾台灣機場\n    this.filterDepartureAirports();\n  },\n  methods: {\n    async fetchInitialData() {\n      console.log('[DEBUG] 開始獲取初始資料...');\n      try {\n        // 從API獲取機場、航空公司和可用航線資料\n        const [airportsData, airlinesData, routesData] = await Promise.all([getAirports(), getAirlines(), getAvailableRoutes()]);\n        console.log('[DEBUG] API返回的機場數據:', airportsData);\n        console.log('[DEBUG] API返回的航空公司數據:', airlinesData);\n        console.log('[DEBUG] API返回的航線數據:', routesData);\n        if (airportsData && airportsData.length) {\n          // 加入城市和國家資訊到機場數據\n          this.processAirportsData(airportsData);\n        }\n        this.airlines = airlinesData;\n        this.availableRoutes = routesData || [];\n        this.debugInfo.apiCallsStatus = {\n          airports: airportsData.length > 0 ? 'success' : 'empty',\n          airlines: airlinesData.length > 0 ? 'success' : 'empty',\n          routes: routesData.length > 0 ? 'success' : 'empty'\n        };\n        this.debugInfo.dataLoaded = true;\n        console.log('[DEBUG] 初始化完成。機場數量:', this.airports.length, '航空公司數量:', this.airlines.length, '可用航線數量:', this.availableRoutes.length);\n      } catch (error) {\n        console.error('[ERROR] 無法載入初始資料:', error);\n        this.errorMessage = '無法載入資料，請稍後再試';\n        this.debugInfo.apiCallsStatus = {\n          error: error.message\n        };\n      }\n    },\n    processAirportsData(airportsData) {\n      // 預設的機場資訊（含城市和國家）\n      const airportInfo = {\n        // 台灣機場\n        'TPE': {\n          city_zh: '桃園',\n          country: 'TW',\n          country_name: '台灣'\n        },\n        'TSA': {\n          city_zh: '臺北',\n          country: 'TW',\n          country_name: '台灣'\n        },\n        'KHH': {\n          city_zh: '高雄',\n          country: 'TW',\n          country_name: '台灣'\n        },\n        'RMQ': {\n          city_zh: '台中',\n          country: 'TW',\n          country_name: '台灣'\n        },\n        'TTT': {\n          city_zh: '臺東',\n          country: 'TW',\n          country_name: '台灣'\n        },\n        'KYD': {\n          city_zh: '臺東',\n          country: 'TW',\n          country_name: '台灣'\n        },\n        'KNH': {\n          city_zh: '金門',\n          country: 'TW',\n          country_name: '台灣'\n        },\n        'MZG': {\n          city_zh: '澎湖',\n          country: 'TW',\n          country_name: '台灣'\n        },\n        'HUN': {\n          city_zh: '花蓮',\n          country: 'TW',\n          country_name: '台灣'\n        },\n        'GNI': {\n          city_zh: '臺東',\n          country: 'TW',\n          country_name: '台灣'\n        },\n        'MFK': {\n          city_zh: '連江',\n          country: 'TW',\n          country_name: '台灣'\n        },\n        'LZN': {\n          city_zh: '連江',\n          country: 'TW',\n          country_name: '台灣'\n        },\n        'TNN': {\n          city_zh: '台南',\n          country: 'TW',\n          country_name: '台灣'\n        },\n        'CMJ': {\n          city_zh: '澎湖',\n          country: 'TW',\n          country_name: '台灣'\n        },\n        'WOT': {\n          city_zh: '澎湖',\n          country: 'TW',\n          country_name: '台灣'\n        },\n        // 日本機場\n        'HND': {\n          city_zh: '東京',\n          country: 'JP',\n          country_name: '日本'\n        },\n        'NRT': {\n          city_zh: '東京',\n          country: 'JP',\n          country_name: '日本'\n        },\n        'KIX': {\n          city_zh: '大阪',\n          country: 'JP',\n          country_name: '日本'\n        },\n        'FUK': {\n          city_zh: '福岡',\n          country: 'JP',\n          country_name: '日本'\n        },\n        'CTS': {\n          city_zh: '札幌',\n          country: 'JP',\n          country_name: '日本'\n        },\n        'NGO': {\n          city_zh: '名古屋',\n          country: 'JP',\n          country_name: '日本'\n        },\n        'OKA': {\n          city_zh: '沖繩',\n          country: 'JP',\n          country_name: '日本'\n        },\n        // 亞洲其他熱門機場\n        'HKG': {\n          city_zh: '香港',\n          country: 'HK',\n          country_name: '香港'\n        },\n        'ICN': {\n          city_zh: '首爾',\n          country: 'KR',\n          country_name: '韓國'\n        },\n        'GMP': {\n          city_zh: '首爾',\n          country: 'KR',\n          country_name: '韓國'\n        },\n        'PVG': {\n          city_zh: '上海',\n          country: 'CN',\n          country_name: '中國大陸'\n        },\n        'PEK': {\n          city_zh: '北京',\n          country: 'CN',\n          country_name: '中國大陸'\n        },\n        'SIN': {\n          city_zh: '新加坡',\n          country: 'SG',\n          country_name: '新加坡'\n        },\n        'BKK': {\n          city_zh: '曼谷',\n          country: 'TH',\n          country_name: '泰國'\n        },\n        'MNL': {\n          city_zh: '馬尼拉',\n          country: 'PH',\n          country_name: '菲律賓'\n        }\n      };\n\n      // 擴展機場數據\n      this.airports = airportsData.map(airport => {\n        const info = airportInfo[airport.code] || {\n          city_zh: '未知城市',\n          country: 'XX',\n          country_name: '未知國家'\n        };\n        return {\n          ...airport,\n          city: info.city_zh,\n          country: info.country,\n          country_name: info.country_name\n        };\n      });\n\n      // 將機場按國家分類\n      this.organizeAirportsByCountry();\n    },\n    organizeAirportsByCountry() {\n      // 整理機場按國家分類\n      this.airportsByCountry = {};\n      for (const airport of this.airports) {\n        if (!this.airportsByCountry[airport.country]) {\n          this.airportsByCountry[airport.country] = [];\n        }\n        this.airportsByCountry[airport.country].push(airport);\n      }\n\n      // 設定可用的目的地國家列表\n      const countries = [];\n      for (const countryCode in this.airportsByCountry) {\n        if (countryCode !== 'TW') {\n          // 排除台灣，因為不能同時作為出發地和目的地\n          const airports = this.airportsByCountry[countryCode];\n          if (airports && airports.length > 0) {\n            countries.push({\n              code: countryCode,\n              name: airports[0].country_name || countryCode\n            });\n          }\n        }\n      }\n      this.availableDestinationCountries = countries;\n      console.log('[DEBUG] 可用的目的地國家:', this.availableDestinationCountries);\n    },\n    filterDepartureAirports() {\n      console.log('[DEBUG] 篩選出發機場，當前國家:', this.departureCountry);\n      // 取得台灣機場\n      this.filteredDepartureAirports = this.airports.filter(airport => airport.country === this.departureCountry);\n\n      // 從台灣機場中提取城市列表\n      const cities = [...new Set(this.filteredDepartureAirports.map(airport => airport.city))];\n      this.departureCities = cities;\n      console.log('[DEBUG] 出發城市列表:', this.departureCities);\n      console.log('[DEBUG] 台灣機場數量:', this.filteredDepartureAirports.length);\n\n      // 重置出發城市和機場選擇\n      this.departureCity = '';\n      this.departureAirport = '';\n      this.resetDestination();\n    },\n    filterDepartureAirportsByCity() {\n      console.log('[DEBUG] 按城市篩選出發機場:', this.departureCity);\n      if (!this.departureCity) {\n        this.filteredDepartureAirports = [];\n        this.departureAirport = '';\n        return;\n      }\n\n      // 篩選選定城市的機場\n      this.filteredDepartureAirports = this.airports.filter(airport => airport.country === this.departureCountry && airport.city === this.departureCity);\n      console.log('[DEBUG] 篩選後的出發機場:', this.filteredDepartureAirports);\n\n      // 如果只有一個機場，自動選擇\n      if (this.filteredDepartureAirports.length === 1) {\n        this.departureAirport = this.filteredDepartureAirports[0].code;\n        this.filterDestinations();\n      } else {\n        this.departureAirport = '';\n      }\n    },\n    filterDestinations() {\n      console.log('[DEBUG] 篩選目的地機場，當前出發機場:', this.departureAirport);\n      if (!this.departureAirport) {\n        this.resetDestination();\n        return;\n      }\n\n      // 重置目的地選擇\n      this.destinationCountry = '';\n      this.destinationCity = '';\n      this.destinationAirport = '';\n      this.filteredDestinationAirports = [];\n      this.destinationCities = [];\n\n      // 根據可用航線過濾目的地國家\n      if (this.availableRoutes && this.availableRoutes.length > 0) {\n        console.log('[DEBUG] 使用可用航線過濾目的地...');\n\n        // 找出當前出發地可以直飛的所有目的地機場代碼\n        const availableDestinations = this.availableRoutes.filter(route => route.departure === this.departureAirport).map(route => route.arrival);\n        console.log('[DEBUG] 可直飛的目的地機場:', availableDestinations);\n        if (availableDestinations.length > 0) {\n          // 從可直飛的目的地機場中獲取它們的國家信息\n          const destinationAirports = this.airports.filter(airport => availableDestinations.includes(airport.code));\n\n          // 獲取可用目的地國家列表（不包括台灣）\n          const countries = [];\n          const countrySet = new Set();\n          for (const airport of destinationAirports) {\n            if (airport.country !== 'TW' && !countrySet.has(airport.country)) {\n              countrySet.add(airport.country);\n              countries.push({\n                code: airport.country,\n                name: airport.country_name || airport.country\n              });\n            }\n          }\n          this.availableDestinationCountries = countries;\n          console.log('[DEBUG] 可用的目的地國家 (直飛):', this.availableDestinationCountries);\n        } else {\n          // 如果沒有找到可直飛的目的地，則清空可用國家列表\n          this.availableDestinationCountries = [];\n          console.log('[DEBUG] 沒有找到可直飛的目的地');\n        }\n      } else {\n        console.log('[DEBUG] 沒有可用航線資料，使用所有非台灣國家作為目的地');\n        this.organizeAirportsByCountry(); // 使用原始的分類方法\n      }\n    },\n    filterDestinationAirports() {\n      console.log('[DEBUG] 按國家篩選目的地機場:', this.destinationCountry);\n      if (!this.destinationCountry) {\n        this.destinationCity = '';\n        this.destinationAirport = '';\n        this.filteredDestinationAirports = [];\n        this.destinationCities = [];\n        return;\n      }\n\n      // 獲取當前出發機場可直飛的目的地機場列表\n      const availableDestinationCodes = this.availableRoutes.filter(route => route.departure === this.departureAirport).map(route => route.arrival);\n\n      // 篩選選定國家內的機場，且必須是可直飛的\n      const airportsInCountry = this.airports.filter(airport => airport.country === this.destinationCountry && availableDestinationCodes.includes(airport.code));\n\n      // 從目的地國家機場中提取城市列表\n      const cities = [...new Set(airportsInCountry.map(airport => airport.city))];\n      this.destinationCities = cities;\n      console.log('[DEBUG] 目的地城市列表 (直飛):', this.destinationCities);\n\n      // 重置目的地城市和機場選擇\n      this.destinationCity = '';\n      this.destinationAirport = '';\n      this.filteredDestinationAirports = [];\n    },\n    filterDestinationAirportsByCity() {\n      console.log('[DEBUG] 按城市篩選目的地機場:', this.destinationCity);\n      if (!this.destinationCity) {\n        this.filteredDestinationAirports = [];\n        this.destinationAirport = '';\n        return;\n      }\n\n      // 獲取當前出發機場可直飛的目的地機場列表\n      const availableDestinationCodes = this.availableRoutes.filter(route => route.departure === this.departureAirport).map(route => route.arrival);\n\n      // 篩選選定城市的機場，且必須是可直飛的\n      this.filteredDestinationAirports = this.airports.filter(airport => airport.country === this.destinationCountry && airport.city === this.destinationCity && availableDestinationCodes.includes(airport.code));\n      console.log('[DEBUG] 篩選後的目的地機場 (直飛):', this.filteredDestinationAirports);\n\n      // 如果只有一個機場，自動選擇\n      if (this.filteredDestinationAirports.length === 1) {\n        this.destinationAirport = this.filteredDestinationAirports[0].code;\n      } else {\n        this.destinationAirport = '';\n      }\n    },\n    resetDestination() {\n      this.destinationCountry = '';\n      this.destinationCity = '';\n      this.destinationAirport = '';\n      this.filteredDestinationAirports = [];\n      this.destinationCities = [];\n    },\n    async loadPopularAirports() {\n      console.log('[DEBUG] 加載熱門機場數據...');\n      try {\n        // 嘗試讀取熱門機場配置文件\n        const response = await fetch('/config/airlines_airports.json');\n        if (!response.ok) {\n          throw new Error('無法獲取熱門機場數據');\n        }\n        const data = await response.json();\n        console.log('[DEBUG] 熱門機場配置數據:', data);\n\n        // 處理機場數據\n        if (data && data.airports && Array.isArray(data.airports)) {\n          this.popularAirports = data.airports;\n          console.log('[DEBUG] 已加載熱門機場數量:', this.popularAirports.length);\n\n          // 機場數據處理：優先使用API數據，如果API無數據則使用熱門機場列表\n          if (this.airports.length === 0 && this.popularAirports.length > 0) {\n            console.log('[DEBUG] API沒有返回機場數據，使用熱門機場數據...');\n\n            // 為熱門機場創建下拉選單所需的格式\n            const airportNames = {\n              // 台灣機場\n              'TPE': '台灣桃園國際機場',\n              'TSA': '台北松山機場',\n              'KHH': '高雄國際機場',\n              'RMQ': '台中國際機場',\n              'TTT': '台東機場',\n              'KYD': '蘭嶼機場',\n              'KNH': '金門機場',\n              'MZG': '馬公機場',\n              'HUN': '花蓮機場',\n              'GNI': '綠島機場',\n              'MFK': '馬祖北竿機場',\n              'LZN': '馬祖南竿機場',\n              'TNN': '台南機場',\n              'CMJ': '七美機場',\n              'WOT': '望安機場',\n              // 日本熱門機場\n              'HND': '東京羽田機場',\n              'NRT': '東京成田國際機場',\n              'KIX': '大阪關西國際機場',\n              'FUK': '福岡機場',\n              'CTS': '札幌新千歲機場',\n              'NGO': '名古屋中部國際機場',\n              'OKA': '沖繩那霸機場',\n              // 亞洲其他熱門機場\n              'HKG': '香港國際機場',\n              'ICN': '首爾仁川國際機場',\n              'GMP': '首爾金浦國際機場',\n              'PVG': '上海浦東國際機場',\n              'PEK': '北京首都國際機場',\n              'SIN': '新加坡樟宜機場',\n              'BKK': '曼谷素萬那普機場',\n              'MNL': '馬尼拉國際機場'\n            };\n\n            // 將熱門機場代碼轉換為標準格式，含名稱\n            this.airports = this.popularAirports.map(code => ({\n              code,\n              name: airportNames[code] || `${code} 機場` // 如果沒有預設名稱，使用代碼+機場\n            }));\n            console.log('[DEBUG] 轉換後的機場數據:', this.airports);\n          }\n        }\n\n        // 處理航空公司數據\n        if (data && data.airlines && Array.isArray(data.airlines) && this.airlines.length === 0) {\n          console.log('[DEBUG] API沒有返回航空公司數據，使用配置文件數據...');\n\n          // 為航空公司創建下拉選單所需的格式\n          const airlineNames = {\n            'CI': '中華航空',\n            'BR': '長榮航空',\n            'AE': '華信航空',\n            'B7': '立榮航空',\n            'JX': '星宇航空',\n            'DA': '德安航空',\n            'JL': '日本航空',\n            'CX': '國泰航空',\n            'OZ': '韓亞航空'\n          };\n\n          // 將航空公司代碼轉換為標準格式，含名稱\n          this.airlines = data.airlines.map(id => ({\n            id,\n            name: airlineNames[id] || id\n          }));\n          console.log('[DEBUG] 轉換後的航空公司數據:', this.airlines);\n        }\n      } catch (error) {\n        console.error('[ERROR] 無法載入熱門機場數據:', error);\n      }\n    },\n    async searchFlights() {\n      this.isLoading = true;\n      this.searchComplete = true;\n      this.errorMessage = '';\n      try {\n        // 調用API搜尋航班\n        const results = await searchFlights({\n          departureAirport: this.departureAirport,\n          destinationAirport: this.destinationAirport,\n          date: this.flightDate,\n          airline: this.selectedAirline\n        });\n        this.flights = results;\n      } catch (error) {\n        console.error('搜尋航班時出錯:', error);\n        this.errorMessage = '搜尋過程中發生錯誤，請稍後再試';\n        this.flights = [];\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    resetForm() {\n      this.departureCountry = 'TW';\n      this.departureCity = '';\n      this.departureAirport = '';\n      this.destinationCountry = '';\n      this.destinationCity = '';\n      this.destinationAirport = '';\n      this.flightDate = this.getTodayDate();\n      this.selectedAirline = '';\n      this.flights = [];\n      this.searchComplete = false;\n      this.filterDepartureAirports();\n    },\n    getTodayDate() {\n      return new Date().toISOString().split('T')[0];\n    },\n    getAirportName(code) {\n      const airport = this.airports.find(a => a.code === code);\n      return airport ? airport.name : code;\n    },\n    getAirlineName(id) {\n      const airline = this.airlines.find(a => a.id === id);\n      return airline ? airline.name : id;\n    },\n    formatDateTime(dateTimeStr) {\n      const date = new Date(dateTimeStr);\n      return `${date.toLocaleDateString()} ${date.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      })}`;\n    }\n  }\n};","map":{"version":3,"names":["FlightCard","getAirports","getAirlines","searchFlights","getAvailableRoutes","name","components","data","departureCountry","departureCity","departureAirport","destinationCountry","destinationCity","destinationAirport","flightDate","getTodayDate","selectedAirline","airports","airlines","filteredDepartureAirports","filteredDestinationAirports","departureCities","destinationCities","flights","isLoading","searchComplete","errorMessage","popularAirports","airportsByCountry","availableDestinationCountries","availableRoutes","debugInfo","apiCallsStatus","dataLoaded","computed","minDate","maxDate","date","Date","setFullYear","getFullYear","toISOString","split","canSearch","mounted","console","log","loadPopularAirports","fetchInitialData","filterDepartureAirports","methods","airportsData","airlinesData","routesData","Promise","all","length","processAirportsData","routes","error","message","airportInfo","city_zh","country","country_name","map","airport","info","code","city","organizeAirportsByCountry","push","countries","countryCode","filter","cities","Set","resetDestination","filterDepartureAirportsByCity","filterDestinations","availableDestinations","route","departure","arrival","destinationAirports","includes","countrySet","has","add","filterDestinationAirports","availableDestinationCodes","airportsInCountry","filterDestinationAirportsByCity","response","fetch","ok","Error","json","Array","isArray","airportNames","airlineNames","id","results","airline","resetForm","getAirportName","find","a","getAirlineName","formatDateTime","dateTimeStr","toLocaleDateString","toLocaleTimeString","hour","minute"],"sources":["C:\\Users\\Aliothouo\\OneDrive\\文件\\學校\\AlphaVision\\AerotwineX\\frontend\\src\\components\\FlightSearch.vue"],"sourcesContent":["<template>\n  <div class=\"flight-search\">\n    <div class=\"header\">\n      <h1>AerotwineX 航班查詢</h1>\n      <p>簡單、快速地查詢您的航班</p>\n    </div>\n    \n    <div class=\"search-container\">\n      <div class=\"search-form\">\n        <div class=\"form-group\">\n          <label>出發地</label>\n          <select v-model=\"departureAirport\" @change=\"filterDestinations\">\n            <option value=\"\">請選擇出發機場</option>\n            <option v-for=\"airport in airports\" :key=\"airport.code\" :value=\"airport.code\">\n              {{ airport.name }} ({{ airport.code }})\n            </option>\n          </select>\n        </div>\n        \n        <div class=\"form-group\">\n          <label>目的地國家/地區</label>\n          <select v-model=\"destinationCountry\" @change=\"filterDestinationAirports\" :disabled=\"!departureAirport\">\n            <option value=\"\">請選擇國家/地區</option>\n            <option v-for=\"country in availableDestinationCountries\" :key=\"country.code\" :value=\"country.code\">\n              {{ country.name }}\n            </option>\n          </select>\n        </div>\n        \n        <div class=\"form-group\">\n          <label>目的地城市</label>\n          <select v-model=\"destinationCity\" @change=\"filterDestinationAirportsByCity\" :disabled=\"!destinationCountry || !destinationCities.length\">\n            <option value=\"\">請選擇城市</option>\n            <option v-for=\"city in destinationCities\" :key=\"city\" :value=\"city\">\n              {{ city }}\n            </option>\n          </select>\n        </div>\n        \n        <div class=\"form-group\">\n          <label>目的地機場</label>\n          <select v-model=\"destinationAirport\" :disabled=\"!destinationCity || !filteredDestinationAirports.length\">\n            <option value=\"\">請選擇目的地機場</option>\n            <option v-for=\"airport in filteredDestinationAirports\" :key=\"airport.code\" :value=\"airport.code\">\n              {{ airport.name }} ({{ airport.code }})\n            </option>\n          </select>\n        </div>\n        \n        <div class=\"form-group\">\n          <label>日期</label>\n          <input type=\"date\" v-model=\"flightDate\" :min=\"minDate\" :max=\"maxDate\">\n        </div>\n        \n        <div class=\"form-group\">\n          <label>航空公司</label>\n          <select v-model=\"selectedAirline\">\n            <option value=\"\">所有航空公司</option>\n            <option v-for=\"airline in airlines\" :key=\"airline.id\" :value=\"airline.id\">\n              {{ airline.name }}\n            </option>\n          </select>\n        </div>\n        \n        <div class=\"action-buttons\">\n          <button class=\"search-button\" @click=\"searchFlights\" :disabled=\"!canSearch\">\n            搜尋航班\n          </button>\n          <button class=\"reset-button\" @click=\"resetForm\">\n            重設\n          </button>\n        </div>\n        \n        <div v-if=\"errorMessage\" class=\"error-message\">\n          {{ errorMessage }}\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"search-results\" v-if=\"searchComplete\">\n      <div v-if=\"isLoading\" class=\"loading\">\n        <div class=\"loader\"></div>\n        <p>搜尋中，請稍候...</p>\n      </div>\n      \n      <div v-else>\n        <div class=\"results-header\">\n          <h2>搜尋結果</h2>\n          <p v-if=\"flights.length === 0\">沒有找到符合條件的航班</p>\n          <p v-else>找到 {{ flights.length }} 個符合條件的航班</p>\n        </div>\n        \n        <div class=\"flights-container\" v-if=\"flights.length > 0\">\n          <flight-card \n            v-for=\"flight in flights\" \n            :key=\"`${flight.flight_number}-${flight.scheduled_departure}`\" \n            :flight=\"flight\"\n            :departureAirportName=\"getAirportName(flight.departure_airport_code)\"\n            :arrivalAirportName=\"getAirportName(flight.arrival_airport_code)\"\n            :airlineName=\"getAirlineName(flight.airline_id)\"\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport FlightCard from './FlightCard.vue';\nimport { getAirports, getAirlines, searchFlights, getAvailableRoutes } from '../services/api';\n\nexport default {\n  name: 'FlightSearch',\n  components: {\n    FlightCard\n  },\n  data() {\n    return {\n      departureCountry: 'TW', // 預設出發國家為台灣\n      departureCity: '',\n      departureAirport: '',\n      destinationCountry: '',\n      destinationCity: '',\n      destinationAirport: '',\n      flightDate: this.getTodayDate(),\n      selectedAirline: '',\n      airports: [],\n      airlines: [],\n      filteredDepartureAirports: [],\n      filteredDestinationAirports: [],\n      departureCities: [],\n      destinationCities: [],\n      flights: [],\n      isLoading: false,\n      searchComplete: false,\n      errorMessage: '',\n      popularAirports: [],\n      airportsByCountry: {},\n      availableDestinationCountries: [],\n      availableRoutes: [], // 存儲可用的直飛航線\n      debugInfo: {\n        apiCallsStatus: {},\n        dataLoaded: false\n      }\n    };\n  },\n  computed: {\n    minDate() {\n      // 設定最小日期為今天\n      return this.getTodayDate();\n    },\n    maxDate() {\n      // 設定最大日期為一年後\n      const date = new Date();\n      date.setFullYear(date.getFullYear() + 1);\n      return date.toISOString().split('T')[0];\n    },\n    canSearch() {\n      return this.departureAirport && this.destinationAirport && this.flightDate;\n    }\n  },\n  async mounted() {\n    console.log('[DEBUG] FlightSearch組件掛載...');\n    await this.loadPopularAirports(); // 先加載熱門機場數據\n    await this.fetchInitialData(); // 嘗試從API獲取數據，如有必要會覆蓋熱門機場數據\n    \n    // 初始化時直接過濾台灣機場\n    this.filterDepartureAirports();\n  },\n  methods: {\n    async fetchInitialData() {\n      console.log('[DEBUG] 開始獲取初始資料...');\n      try {\n        // 從API獲取機場、航空公司和可用航線資料\n        const [airportsData, airlinesData, routesData] = await Promise.all([\n          getAirports(),\n          getAirlines(),\n          getAvailableRoutes()\n        ]);\n        \n        console.log('[DEBUG] API返回的機場數據:', airportsData);\n        console.log('[DEBUG] API返回的航空公司數據:', airlinesData);\n        console.log('[DEBUG] API返回的航線數據:', routesData);\n        \n        if (airportsData && airportsData.length) {\n          // 加入城市和國家資訊到機場數據\n          this.processAirportsData(airportsData);\n        }\n        \n        this.airlines = airlinesData;\n        this.availableRoutes = routesData || [];\n        \n        this.debugInfo.apiCallsStatus = {\n          airports: airportsData.length > 0 ? 'success' : 'empty',\n          airlines: airlinesData.length > 0 ? 'success' : 'empty',\n          routes: routesData.length > 0 ? 'success' : 'empty'\n        };\n        this.debugInfo.dataLoaded = true;\n        \n        console.log('[DEBUG] 初始化完成。機場數量:', this.airports.length, '航空公司數量:', this.airlines.length, '可用航線數量:', this.availableRoutes.length);\n      } catch (error) {\n        console.error('[ERROR] 無法載入初始資料:', error);\n        this.errorMessage = '無法載入資料，請稍後再試';\n        this.debugInfo.apiCallsStatus = {\n          error: error.message\n        };\n      }\n    },\n    \n    processAirportsData(airportsData) {\n      // 預設的機場資訊（含城市和國家）\n      const airportInfo = {\n        // 台灣機場\n        'TPE': { city_zh: '桃園', country: 'TW', country_name: '台灣' },\n        'TSA': { city_zh: '臺北', country: 'TW', country_name: '台灣' },\n        'KHH': { city_zh: '高雄', country: 'TW', country_name: '台灣' },\n        'RMQ': { city_zh: '台中', country: 'TW', country_name: '台灣' },\n        'TTT': { city_zh: '臺東', country: 'TW', country_name: '台灣' },\n        'KYD': { city_zh: '臺東', country: 'TW', country_name: '台灣' },\n        'KNH': { city_zh: '金門', country: 'TW', country_name: '台灣' },\n        'MZG': { city_zh: '澎湖', country: 'TW', country_name: '台灣' },\n        'HUN': { city_zh: '花蓮', country: 'TW', country_name: '台灣' },\n        'GNI': { city_zh: '臺東', country: 'TW', country_name: '台灣' },\n        'MFK': { city_zh: '連江', country: 'TW', country_name: '台灣' },\n        'LZN': { city_zh: '連江', country: 'TW', country_name: '台灣' },\n        'TNN': { city_zh: '台南', country: 'TW', country_name: '台灣' },\n        'CMJ': { city_zh: '澎湖', country: 'TW', country_name: '台灣' },\n        'WOT': { city_zh: '澎湖', country: 'TW', country_name: '台灣' },\n        \n        // 日本機場\n        'HND': { city_zh: '東京', country: 'JP', country_name: '日本' },\n        'NRT': { city_zh: '東京', country: 'JP', country_name: '日本' },\n        'KIX': { city_zh: '大阪', country: 'JP', country_name: '日本' },\n        'FUK': { city_zh: '福岡', country: 'JP', country_name: '日本' },\n        'CTS': { city_zh: '札幌', country: 'JP', country_name: '日本' },\n        'NGO': { city_zh: '名古屋', country: 'JP', country_name: '日本' },\n        'OKA': { city_zh: '沖繩', country: 'JP', country_name: '日本' },\n        \n        // 亞洲其他熱門機場\n        'HKG': { city_zh: '香港', country: 'HK', country_name: '香港' },\n        'ICN': { city_zh: '首爾', country: 'KR', country_name: '韓國' },\n        'GMP': { city_zh: '首爾', country: 'KR', country_name: '韓國' },\n        'PVG': { city_zh: '上海', country: 'CN', country_name: '中國大陸' },\n        'PEK': { city_zh: '北京', country: 'CN', country_name: '中國大陸' },\n        'SIN': { city_zh: '新加坡', country: 'SG', country_name: '新加坡' },\n        'BKK': { city_zh: '曼谷', country: 'TH', country_name: '泰國' },\n        'MNL': { city_zh: '馬尼拉', country: 'PH', country_name: '菲律賓' }\n      };\n      \n      // 擴展機場數據\n      this.airports = airportsData.map(airport => {\n        const info = airportInfo[airport.code] || { \n          city_zh: '未知城市', \n          country: 'XX', \n          country_name: '未知國家' \n        };\n        \n        return {\n          ...airport,\n          city: info.city_zh,\n          country: info.country,\n          country_name: info.country_name\n        };\n      });\n      \n      // 將機場按國家分類\n      this.organizeAirportsByCountry();\n    },\n    \n    organizeAirportsByCountry() {\n      // 整理機場按國家分類\n      this.airportsByCountry = {};\n      \n      for (const airport of this.airports) {\n        if (!this.airportsByCountry[airport.country]) {\n          this.airportsByCountry[airport.country] = [];\n        }\n        this.airportsByCountry[airport.country].push(airport);\n      }\n      \n      // 設定可用的目的地國家列表\n      const countries = [];\n      for (const countryCode in this.airportsByCountry) {\n        if (countryCode !== 'TW') {  // 排除台灣，因為不能同時作為出發地和目的地\n          const airports = this.airportsByCountry[countryCode];\n          if (airports && airports.length > 0) {\n            countries.push({\n              code: countryCode,\n              name: airports[0].country_name || countryCode\n            });\n          }\n        }\n      }\n      \n      this.availableDestinationCountries = countries;\n      console.log('[DEBUG] 可用的目的地國家:', this.availableDestinationCountries);\n    },\n    \n    filterDepartureAirports() {\n      console.log('[DEBUG] 篩選出發機場，當前國家:', this.departureCountry);\n      // 取得台灣機場\n      this.filteredDepartureAirports = this.airports.filter(\n        airport => airport.country === this.departureCountry\n      );\n      \n      // 從台灣機場中提取城市列表\n      const cities = [...new Set(this.filteredDepartureAirports.map(airport => airport.city))];\n      this.departureCities = cities;\n      \n      console.log('[DEBUG] 出發城市列表:', this.departureCities);\n      console.log('[DEBUG] 台灣機場數量:', this.filteredDepartureAirports.length);\n      \n      // 重置出發城市和機場選擇\n      this.departureCity = '';\n      this.departureAirport = '';\n      this.resetDestination();\n    },\n    \n    filterDepartureAirportsByCity() {\n      console.log('[DEBUG] 按城市篩選出發機場:', this.departureCity);\n      if (!this.departureCity) {\n        this.filteredDepartureAirports = [];\n        this.departureAirport = '';\n        return;\n      }\n      \n      // 篩選選定城市的機場\n      this.filteredDepartureAirports = this.airports.filter(\n        airport => airport.country === this.departureCountry && airport.city === this.departureCity\n      );\n      \n      console.log('[DEBUG] 篩選後的出發機場:', this.filteredDepartureAirports);\n      \n      // 如果只有一個機場，自動選擇\n      if (this.filteredDepartureAirports.length === 1) {\n        this.departureAirport = this.filteredDepartureAirports[0].code;\n        this.filterDestinations();\n      } else {\n        this.departureAirport = '';\n      }\n    },\n    \n    filterDestinations() {\n      console.log('[DEBUG] 篩選目的地機場，當前出發機場:', this.departureAirport);\n      if (!this.departureAirport) {\n        this.resetDestination();\n        return;\n      }\n      \n      // 重置目的地選擇\n      this.destinationCountry = '';\n      this.destinationCity = '';\n      this.destinationAirport = '';\n      this.filteredDestinationAirports = [];\n      this.destinationCities = [];\n      \n      // 根據可用航線過濾目的地國家\n      if (this.availableRoutes && this.availableRoutes.length > 0) {\n        console.log('[DEBUG] 使用可用航線過濾目的地...');\n        \n        // 找出當前出發地可以直飛的所有目的地機場代碼\n        const availableDestinations = this.availableRoutes\n          .filter(route => route.departure === this.departureAirport)\n          .map(route => route.arrival);\n        \n        console.log('[DEBUG] 可直飛的目的地機場:', availableDestinations);\n        \n        if (availableDestinations.length > 0) {\n          // 從可直飛的目的地機場中獲取它們的國家信息\n          const destinationAirports = this.airports.filter(airport => \n            availableDestinations.includes(airport.code)\n          );\n          \n          // 獲取可用目的地國家列表（不包括台灣）\n          const countries = [];\n          const countrySet = new Set();\n          \n          for (const airport of destinationAirports) {\n            if (airport.country !== 'TW' && !countrySet.has(airport.country)) {\n              countrySet.add(airport.country);\n              countries.push({\n                code: airport.country,\n                name: airport.country_name || airport.country\n              });\n            }\n          }\n          \n          this.availableDestinationCountries = countries;\n          console.log('[DEBUG] 可用的目的地國家 (直飛):', this.availableDestinationCountries);\n        } else {\n          // 如果沒有找到可直飛的目的地，則清空可用國家列表\n          this.availableDestinationCountries = [];\n          console.log('[DEBUG] 沒有找到可直飛的目的地');\n        }\n      } else {\n        console.log('[DEBUG] 沒有可用航線資料，使用所有非台灣國家作為目的地');\n        this.organizeAirportsByCountry(); // 使用原始的分類方法\n      }\n    },\n    \n    filterDestinationAirports() {\n      console.log('[DEBUG] 按國家篩選目的地機場:', this.destinationCountry);\n      if (!this.destinationCountry) {\n        this.destinationCity = '';\n        this.destinationAirport = '';\n        this.filteredDestinationAirports = [];\n        this.destinationCities = [];\n        return;\n      }\n      \n      // 獲取當前出發機場可直飛的目的地機場列表\n      const availableDestinationCodes = this.availableRoutes\n        .filter(route => route.departure === this.departureAirport)\n        .map(route => route.arrival);\n      \n      // 篩選選定國家內的機場，且必須是可直飛的\n      const airportsInCountry = this.airports.filter(\n        airport => airport.country === this.destinationCountry && \n                   availableDestinationCodes.includes(airport.code)\n      );\n      \n      // 從目的地國家機場中提取城市列表\n      const cities = [...new Set(airportsInCountry.map(airport => airport.city))];\n      this.destinationCities = cities;\n      \n      console.log('[DEBUG] 目的地城市列表 (直飛):', this.destinationCities);\n      \n      // 重置目的地城市和機場選擇\n      this.destinationCity = '';\n      this.destinationAirport = '';\n      this.filteredDestinationAirports = [];\n    },\n    \n    filterDestinationAirportsByCity() {\n      console.log('[DEBUG] 按城市篩選目的地機場:', this.destinationCity);\n      if (!this.destinationCity) {\n        this.filteredDestinationAirports = [];\n        this.destinationAirport = '';\n        return;\n      }\n      \n      // 獲取當前出發機場可直飛的目的地機場列表\n      const availableDestinationCodes = this.availableRoutes\n        .filter(route => route.departure === this.departureAirport)\n        .map(route => route.arrival);\n      \n      // 篩選選定城市的機場，且必須是可直飛的\n      this.filteredDestinationAirports = this.airports.filter(\n        airport => airport.country === this.destinationCountry && \n                  airport.city === this.destinationCity &&\n                  availableDestinationCodes.includes(airport.code)\n      );\n      \n      console.log('[DEBUG] 篩選後的目的地機場 (直飛):', this.filteredDestinationAirports);\n      \n      // 如果只有一個機場，自動選擇\n      if (this.filteredDestinationAirports.length === 1) {\n        this.destinationAirport = this.filteredDestinationAirports[0].code;\n      } else {\n        this.destinationAirport = '';\n      }\n    },\n    \n    resetDestination() {\n      this.destinationCountry = '';\n      this.destinationCity = '';\n      this.destinationAirport = '';\n      this.filteredDestinationAirports = [];\n      this.destinationCities = [];\n    },\n    \n    async loadPopularAirports() {\n      console.log('[DEBUG] 加載熱門機場數據...');\n      try {\n        // 嘗試讀取熱門機場配置文件\n        const response = await fetch('/config/airlines_airports.json');\n        if (!response.ok) {\n          throw new Error('無法獲取熱門機場數據');\n        }\n        \n        const data = await response.json();\n        console.log('[DEBUG] 熱門機場配置數據:', data);\n        \n        // 處理機場數據\n        if (data && data.airports && Array.isArray(data.airports)) {\n          this.popularAirports = data.airports;\n          console.log('[DEBUG] 已加載熱門機場數量:', this.popularAirports.length);\n          \n          // 機場數據處理：優先使用API數據，如果API無數據則使用熱門機場列表\n          if (this.airports.length === 0 && this.popularAirports.length > 0) {\n            console.log('[DEBUG] API沒有返回機場數據，使用熱門機場數據...');\n            \n            // 為熱門機場創建下拉選單所需的格式\n            const airportNames = {\n              // 台灣機場\n              'TPE': '台灣桃園國際機場',\n              'TSA': '台北松山機場',\n              'KHH': '高雄國際機場',\n              'RMQ': '台中國際機場',\n              'TTT': '台東機場',\n              'KYD': '蘭嶼機場',\n              'KNH': '金門機場',\n              'MZG': '馬公機場',\n              'HUN': '花蓮機場',\n              'GNI': '綠島機場',\n              'MFK': '馬祖北竿機場',\n              'LZN': '馬祖南竿機場',\n              'TNN': '台南機場',\n              'CMJ': '七美機場',\n              'WOT': '望安機場',\n              \n              // 日本熱門機場\n              'HND': '東京羽田機場',\n              'NRT': '東京成田國際機場',\n              'KIX': '大阪關西國際機場',\n              'FUK': '福岡機場',\n              'CTS': '札幌新千歲機場',\n              'NGO': '名古屋中部國際機場',\n              'OKA': '沖繩那霸機場',\n              \n              // 亞洲其他熱門機場\n              'HKG': '香港國際機場',\n              'ICN': '首爾仁川國際機場',\n              'GMP': '首爾金浦國際機場',\n              'PVG': '上海浦東國際機場',\n              'PEK': '北京首都國際機場',\n              'SIN': '新加坡樟宜機場',\n              'BKK': '曼谷素萬那普機場',\n              'MNL': '馬尼拉國際機場'\n            };\n            \n            // 將熱門機場代碼轉換為標準格式，含名稱\n            this.airports = this.popularAirports.map(code => ({\n              code,\n              name: airportNames[code] || `${code} 機場` // 如果沒有預設名稱，使用代碼+機場\n            }));\n            \n            console.log('[DEBUG] 轉換後的機場數據:', this.airports);\n          }\n        }\n        \n        // 處理航空公司數據\n        if (data && data.airlines && Array.isArray(data.airlines) && this.airlines.length === 0) {\n          console.log('[DEBUG] API沒有返回航空公司數據，使用配置文件數據...');\n          \n          // 為航空公司創建下拉選單所需的格式\n          const airlineNames = {\n            'CI': '中華航空',\n            'BR': '長榮航空',\n            'AE': '華信航空',\n            'B7': '立榮航空',\n            'JX': '星宇航空',\n            'DA': '德安航空',\n            'JL': '日本航空',\n            'CX': '國泰航空',\n            'OZ': '韓亞航空'\n          };\n          \n          // 將航空公司代碼轉換為標準格式，含名稱\n          this.airlines = data.airlines.map(id => ({\n            id,\n            name: airlineNames[id] || id\n          }));\n          \n          console.log('[DEBUG] 轉換後的航空公司數據:', this.airlines);\n        }\n      } catch (error) {\n        console.error('[ERROR] 無法載入熱門機場數據:', error);\n      }\n    },\n    \n    async searchFlights() {\n      this.isLoading = true;\n      this.searchComplete = true;\n      this.errorMessage = '';\n      \n      try {\n        // 調用API搜尋航班\n        const results = await searchFlights({\n          departureAirport: this.departureAirport,\n          destinationAirport: this.destinationAirport,\n          date: this.flightDate,\n          airline: this.selectedAirline\n        });\n        \n        this.flights = results;\n      } catch (error) {\n        console.error('搜尋航班時出錯:', error);\n        this.errorMessage = '搜尋過程中發生錯誤，請稍後再試';\n        this.flights = [];\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    resetForm() {\n      this.departureCountry = 'TW';\n      this.departureCity = '';\n      this.departureAirport = '';\n      this.destinationCountry = '';\n      this.destinationCity = '';\n      this.destinationAirport = '';\n      this.flightDate = this.getTodayDate();\n      this.selectedAirline = '';\n      this.flights = [];\n      this.searchComplete = false;\n      this.filterDepartureAirports();\n    },\n    getTodayDate() {\n      return new Date().toISOString().split('T')[0];\n    },\n    getAirportName(code) {\n      const airport = this.airports.find(a => a.code === code);\n      return airport ? airport.name : code;\n    },\n    getAirlineName(id) {\n      const airline = this.airlines.find(a => a.id === id);\n      return airline ? airline.name : id;\n    },\n    formatDateTime(dateTimeStr) {\n      const date = new Date(dateTimeStr);\n      return `${date.toLocaleDateString()} ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.flight-search {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 2rem;\n  color: #333;\n  font-family: 'Arial', sans-serif;\n}\n\n.header {\n  text-align: center;\n  margin-bottom: 2rem;\n}\n\n.header h1 {\n  font-size: 2.5rem;\n  margin-bottom: 0.5rem;\n  font-weight: 300;\n  letter-spacing: 1px;\n}\n\n.header p {\n  font-size: 1.2rem;\n  color: #666;\n}\n\n.search-container {\n  background-color: #f8f8f8;\n  border-radius: 8px;\n  padding: 2rem;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\n  margin-bottom: 2rem;\n}\n\n.search-form {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 1.5rem;\n}\n\n.form-group {\n  display: flex;\n  flex-direction: column;\n}\n\nlabel {\n  margin-bottom: 0.5rem;\n  font-weight: 500;\n  color: #555;\n}\n\nselect, input {\n  padding: 0.8rem;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 1rem;\n  background-color: white;\n  transition: border-color 0.3s;\n}\n\nselect:focus, input:focus {\n  border-color: #333;\n  outline: none;\n}\n\n.action-buttons {\n  display: flex;\n  gap: 1rem;\n  margin-top: 1.5rem;\n  grid-column: 1 / -1;\n}\n\nbutton {\n  padding: 0.8rem 1.5rem;\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  cursor: pointer;\n  transition: background-color 0.3s, transform 0.1s;\n}\n\nbutton:hover {\n  transform: translateY(-2px);\n}\n\n.search-button {\n  background-color: #333;\n  color: white;\n  flex: 2;\n}\n\n.search-button:hover {\n  background-color: #222;\n}\n\n.search-button:disabled {\n  background-color: #ccc;\n  cursor: not-allowed;\n  transform: none;\n}\n\n.reset-button {\n  background-color: #e6e6e6;\n  color: #333;\n  flex: 1;\n}\n\n.reset-button:hover {\n  background-color: #d9d9d9;\n}\n\n.error-message {\n  color: #d32f2f;\n  background-color: #ffebee;\n  padding: 0.8rem;\n  border-radius: 4px;\n  margin-top: 1rem;\n  text-align: center;\n  font-weight: 500;\n  grid-column: 1 / -1;\n}\n\n.search-results {\n  margin-top: 2rem;\n}\n\n.results-header {\n  text-align: center;\n  margin-bottom: 1.5rem;\n}\n\n.results-header h2 {\n  font-size: 1.8rem;\n  font-weight: 300;\n  margin-bottom: 0.5rem;\n}\n\n.loading {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 3rem 0;\n}\n\n.loader {\n  border: 4px solid #f3f3f3;\n  border-top: 4px solid #333;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  animation: spin 1s linear infinite;\n  margin-bottom: 1rem;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n.flights-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 1.5rem;\n}\n\n@media (max-width: 768px) {\n  .search-form {\n    grid-template-columns: 1fr;\n  }\n  \n  .flights-container {\n    grid-template-columns: 1fr;\n  }\n  \n  .flight-search {\n    padding: 1rem;\n  }\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}